<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘楠的博客</title>
  <subtitle>热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ln0491.github.io/"/>
  <updated>2016-10-08T02:17:02.379Z</updated>
  <id>https://ln0491.github.io/</id>
  
  <author>
    <name>Liu Nan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ViewPager添加指示器</title>
    <link href="https://ln0491.github.io/2016/10/08/ViewPager%E6%B7%BB%E5%8A%A0%E6%8C%87%E7%A4%BA%E5%99%A8/"/>
    <id>https://ln0491.github.io/2016/10/08/ViewPager添加指示器/</id>
    <published>2016-10-08T02:08:50.000Z</published>
    <updated>2016-10-08T02:17:02.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewPager添加指示器"><a href="#ViewPager添加指示器" class="headerlink" title="ViewPager添加指示器"></a>ViewPager添加指示器</h2><p>接着基本使用的例子<br>基本使用<a href="https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/">https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</a></p>
<h3 id="布局中添加存放揭示器的容器"><a href="#布局中添加存放揭示器的容器" class="headerlink" title="布局中添加存放揭示器的容器"></a>布局中添加存放揭示器的容器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">   存放指示器的容器</div><div class="line">   --&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/llLayoutDots"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">       <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">       <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Activity中"><a href="#Activity中" class="headerlink" title="Activity中"></a>Activity中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//dots容器</div><div class="line">   private LinearLayout mLlLayoutDots;</div><div class="line">//指示器布局参数</div><div class="line">   private LinearLayout.LayoutParams mDotParams;</div><div class="line"></div><div class="line">   //指示器容器列表</div><div class="line">   private List&lt;ImageView&gt; dots = new ArrayList&lt;ImageView&gt;();</div><div class="line">   //当前索引</div><div class="line">   private int currPageIndex;</div></pre></td></tr></table></figure>
<blockquote>
<p>初始化指示器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">private void initDots() &#123;</div><div class="line">       mDotParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line"></div><div class="line">       mDotParams.rightMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, getResources().getDisplayMetrics());</div><div class="line"></div><div class="line">       //根据viewpager 的数据去添加指示器</div><div class="line">       for(int i = 0; i &lt; mDatas.size(); i++) &#123;</div><div class="line"></div><div class="line">           ImageView imageView = new ImageView(getApplicationContext());</div><div class="line"></div><div class="line">           //添加背景 选择器</div><div class="line">           //imageView.setBackgroundResource(R.drawable.dot_selector);</div><div class="line">           //添加图片选择器</div><div class="line">           imageView.setImageResource(R.drawable.dot_selector);</div><div class="line"></div><div class="line">           //默认为不选择灰色</div><div class="line"></div><div class="line">           imageView.setSelected(false);</div><div class="line"></div><div class="line">           //添加到dot容器</div><div class="line">           mLlLayoutDots.addView(imageView, mDotParams);</div><div class="line"></div><div class="line">           dots.add(imageView);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       //设置第一个为选择状态</div><div class="line">       dots.get(0).setSelected(true);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>viewpager设置监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">private void initViewPagerListener() &#123;</div><div class="line"></div><div class="line"></div><div class="line">        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</div><div class="line">                Log.d(&quot;vivi&quot;, &quot;onPageScrolled:  position    &quot; + position + &quot;   positionOffset   &quot; + positionOffset + &quot;  positionOffsetPixels &quot; + positionOffsetPixels);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageSelected(int position) &#123;</div><div class="line">               /* int childCount = mLlLayoutDots.getChildCount();</div><div class="line"></div><div class="line">                for(int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">                    if(i == position) &#123;</div><div class="line">                        mLlLayoutDots.getChildAt(i).setSelected(true);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        mLlLayoutDots.getChildAt(i).setSelected(false);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;*/</div><div class="line"></div><div class="line">                //旧点不亮</div><div class="line">                dots.get(currPageIndex%mDatas.size()).setSelected(false);</div><div class="line">                //设置新的点</div><div class="line">                currPageIndex=position;</div><div class="line">                //新点亮起来</div><div class="line">                dots.get(currPageIndex%mDatas.size()).setSelected(true);</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageScrollStateChanged(int state) &#123;</div><div class="line"></div><div class="line">                Log.d(&quot;vivi&quot;, &quot;onPageScrollStateChanged: &quot; + state);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>效果</li>
</ul>
</blockquote>
<p><img src="https://ln0491.github.io/img/vpdots.gif" alt="vpdots.gif"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ViewPager添加指示器&quot;&gt;&lt;a href=&quot;#ViewPager添加指示器&quot; class=&quot;headerlink&quot; title=&quot;ViewPager添加指示器&quot;&gt;&lt;/a&gt;ViewPager添加指示器&lt;/h2&gt;&lt;p&gt;接着基本使用的例子&lt;br&gt;基本使用&lt;a hr
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="viewpager" scheme="https://ln0491.github.io/tags/viewpager/"/>
    
  </entry>
  
  <entry>
    <title>Bitmap和Base64的相互转换</title>
    <link href="https://ln0491.github.io/2016/09/29/Bitmap%E5%92%8CBase64%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>https://ln0491.github.io/2016/09/29/Bitmap和Base64的相互转换/</id>
    <published>2016-09-29T07:58:17.000Z</published>
    <updated>2016-09-29T08:00:04.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bitmap和Base64的相互转换"><a href="#Bitmap和Base64的相互转换" class="headerlink" title="Bitmap和Base64的相互转换"></a>Bitmap和Base64的相互转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class Base64Util &#123;</div><div class="line">	public static void gcBitmap(Bitmap bitmap) &#123;</div><div class="line">		if (bitmap != null &amp;&amp; !bitmap.isRecycled()) &#123;</div><div class="line">			bitmap.recycle(); // 回收图片所占的内存</div><div class="line">			bitmap = null;</div><div class="line">			System.gc(); // 提醒系统及时回收</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 * @Title: bitmapToBase64 </div><div class="line">	 * @Description: TODO(Bitmap 转换为字符串)       </div><div class="line">	 * @param @param bitmap</div><div class="line">	 * @param @return    设定文件</div><div class="line">	 * @return String    返回类型    </div><div class="line">	 * @throws</div><div class="line">	 */</div><div class="line"></div><div class="line">	@SuppressLint(&quot;NewApi&quot;)</div><div class="line">	public static String bitmapToBase64(Bitmap bitmap) &#123;</div><div class="line"></div><div class="line">		// 要返回的字符串</div><div class="line">		String reslut = null;</div><div class="line"></div><div class="line">		ByteArrayOutputStream baos = null;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			</div><div class="line">			if (bitmap != null) &#123;</div><div class="line">				</div><div class="line">				baos = new ByteArrayOutputStream();</div><div class="line">				/**</div><div class="line">				 * 压缩只对保存有效果bitmap还是原来的大小</div><div class="line">				 */</div><div class="line">				bitmap.compress(CompressFormat.JPEG, 30, baos);</div><div class="line">				</div><div class="line">				baos.flush();</div><div class="line">				baos.close();</div><div class="line">				// 转换为字节数组</div><div class="line">				byte[] byteArray = baos.toByteArray();</div><div class="line">				</div><div class="line">				// 转换为字符串</div><div class="line">				reslut = Base64.encodeToString(byteArray, Base64.DEFAULT);</div><div class="line">			&#125; else &#123;</div><div class="line">				return null;</div><div class="line">			&#125;</div><div class="line">		&#125; catch (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; finally &#123;</div><div class="line"></div><div class="line">			try &#123;</div><div class="line">				if (baos != null) &#123;</div><div class="line">					baos.close();</div><div class="line">				&#125;</div><div class="line">			&#125; catch (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		return reslut;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * </div><div class="line">	 * @Title: base64ToBitmap </div><div class="line">	 * @Description: TODO(base64l转换为Bitmap)       </div><div class="line">	 * @param @param base64String</div><div class="line">	 * @param @return    设定文件</div><div class="line">	 * @return Bitmap    返回类型    </div><div class="line">	 * @throws</div><div class="line">	 */</div><div class="line">	public static Bitmap base64ToBitmap(String base64String)&#123;</div><div class="line">		</div><div class="line">		byte[] decode = Base64.decode(base64String, Base64.DEFAULT);</div><div class="line">		</div><div class="line">		Bitmap bitmap = BitmapFactory.decodeByteArray(decode, 0, decode.length);</div><div class="line">		</div><div class="line">		return bitmap;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将将bitmap转换成base64的字符串，直接把字符串传给服务器</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Bitmap和Base64的相互转换&quot;&gt;&lt;a href=&quot;#Bitmap和Base64的相互转换&quot; class=&quot;headerlink&quot; title=&quot;Bitmap和Base64的相互转换&quot;&gt;&lt;/a&gt;Bitmap和Base64的相互转换&lt;/h2&gt;&lt;figure c
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="工具类" scheme="https://ln0491.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager的基本使用</title>
    <link href="https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://ln0491.github.io/2016/09/29/ViewPager的基本使用/</id>
    <published>2016-09-29T01:52:30.000Z</published>
    <updated>2016-09-29T06:57:40.736Z</updated>
    
    <content type="html"><![CDATA[<p>ViewPagr应该非常常用的控件之一了</p>
<blockquote>
<ul>
<li>引导页</li>
<li>轮播图<br>最常用的地方，今天学习下最基本的用法<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2></li>
</ul>
</blockquote>
<p><img src="https://ln0491.github.io/img/guid.gif" alt="guid.gif"></p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_welcome"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.liu.viewpagerdemo.ui.WelcomeActivity"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/viewPager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class WelcomeViewpagerAdapter extends PagerAdapter &#123;</div><div class="line">    //数据</div><div class="line">    List&lt;Integer&gt; mDatas;</div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    public WelcomeViewpagerAdapter(Context context, List&lt;Integer&gt; datas) &#123;</div><div class="line">        mContext= context;</div><div class="line">        mDatas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 返回要滑动的VIew的个数</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isViewFromObject(View view, Object object) &#123;</div><div class="line">        return view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 做了两件事，第一：将当前视图添加到container中，第二：返回当前View</div><div class="line">     * @param container</div><div class="line">     * @param position</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public Object instantiateItem(ViewGroup container, int position) &#123;</div><div class="line">      //  View view = View.inflate(mContext,R.layout.item_pager,null);</div><div class="line">       // ImageView imageView = (ImageView) view.findViewById(R.id.ivDispaly);</div><div class="line"></div><div class="line">        ImageView imageView = new ImageView(mContext);</div><div class="line">        imageView.setImageResource(mDatas.get(position));</div><div class="line">        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);</div><div class="line">        //添加View到容器</div><div class="line">        container.addView(imageView);</div><div class="line"></div><div class="line">        //返回当前的View</div><div class="line">        return imageView;</div><div class="line">        //        return super.instantiateItem(container, position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从当前container中删除指定位置（position）的View;</div><div class="line">     * @param container</div><div class="line">     * @param position</div><div class="line">     * @param object</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void destroyItem(ViewGroup container, int position, Object object) &#123;</div><div class="line">       // super.destroyItem(container, position, object);</div><div class="line"></div><div class="line">        container.removeView((View) object);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class WelcomeActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    //viewpager</div><div class="line">    private ViewPager mViewPager;</div><div class="line"> </div><div class="line">    //viewpager数据集合也可以用数组</div><div class="line">    private List&lt;Integer&gt; mDatas = new ArrayList&lt;&gt;();</div><div class="line">   // private int[] imageIds = new int[] &#123; R.mipmap.img_recom01,R.mipmap.img_recom02, R.mipmap.img_recom03 &#125;;</div><div class="line">    //viewpager适配器</div><div class="line">    private WelcomeViewpagerAdapter mWelcomeViewpagerAdapter;</div><div class="line">  </div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_welcome);</div><div class="line">        initView();</div><div class="line">        initData();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initView() &#123;</div><div class="line"></div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private void initData() &#123;</div><div class="line">        //添加图片</div><div class="line">        mDatas.add(R.mipmap.img_recom01);</div><div class="line">        mDatas.add(R.mipmap.img_recom02);</div><div class="line">        mDatas.add(R.mipmap.img_recom03);</div><div class="line"></div><div class="line">        initViewPager();</div><div class="line">     </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initViewPager() &#123;</div><div class="line">        mWelcomeViewpagerAdapter = new WelcomeViewpagerAdapter(this,mDatas);</div><div class="line">        mViewPager.setAdapter(mWelcomeViewpagerAdapter);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，这是基本的用法<br>源码：<a href="https://github.com/ln0491/ViewPagerDemo" target="_blank" rel="external">https://github.com/ln0491/ViewPagerDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ViewPagr应该非常常用的控件之一了&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;引导页&lt;/li&gt;
&lt;li&gt;轮播图&lt;br&gt;最常用的地方，今天学习下最基本的用法&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="viewpager" scheme="https://ln0491.github.io/tags/viewpager/"/>
    
  </entry>
  
  <entry>
    <title>Android onTouch 事件</title>
    <link href="https://ln0491.github.io/2016/09/28/Android%20onTouch%20%E4%BA%8B%E4%BB%B6/"/>
    <id>https://ln0491.github.io/2016/09/28/Android onTouch 事件/</id>
    <published>2016-09-28T09:18:06.000Z</published>
    <updated>2016-09-28T10:32:23.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="onTouch事件"><a href="#onTouch事件" class="headerlink" title="onTouch事件"></a>onTouch事件</h1><p>##ViegGroup中有3个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 分发事件</div><div class="line">    * @param ev</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   @Override</div><div class="line">   public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">       Log.d(&quot;vivi&quot;, &quot;  MyRelativeLayout dispatchTouchEvent: &quot;+ TouchEventUtil.getTouchAction(ev.getAction()));</div><div class="line">       return super.dispatchTouchEvent(ev);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * 拦截事件</div><div class="line">    * @param ev</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   @Override</div><div class="line">   public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</div><div class="line">       Log.d(&quot;vivi&quot;, &quot;  MyRelativeLayout onInterceptTouchEvent: &quot;+TouchEventUtil.getTouchAction(ev.getAction()));</div><div class="line">       return super.onInterceptTouchEvent(ev);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * 事件处理</div><div class="line">    * @param event</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   @Override</div><div class="line">   public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">       Log.d(&quot;vivi&quot;, &quot;  MyRelativeLayout onTouchEvent: &quot;+TouchEventUtil.getTouchAction(event.getAction()));</div><div class="line">       return super.onTouchEvent(event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="View中有2个方法"><a href="#View中有2个方法" class="headerlink" title="View中有2个方法"></a>View中有2个方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean dispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">       Log.d(&quot;vivi&quot;, &quot;    MyView      dispatchTouchEvent: &quot;+TouchEventUtil.getTouchAction(event.getAction()));</div><div class="line">       return super.dispatchTouchEvent(event);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   @Override</div><div class="line">   public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">       Log.d(&quot;vivi&quot;, &quot;    MyView      onTouchEvent: &quot;+ TouchEventUtil.getTouchAction(event.getAction()));</div><div class="line">       return super.onTouchEvent(event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>布局很简单就放了一个自定义的RelativeLayout，重写了，3个方法什么也没有<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.liu.ontouchdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.liu.ontouchdemo.view.MyRelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_dark"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"400dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"400dp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://ln0491.github.io/img/mr.png" alt="mr.png"></p>
<h2 id="dispatchTouchEvent"><a href="#dispatchTouchEvent" class="headerlink" title="dispatchTouchEvent"></a>dispatchTouchEvent</h2><p>在蓝色部分点一下放开，默认情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onInterceptTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>先走了ViewGroup中的dispatchTouchEvent</li>
<li>再走ViewGroup中 onInterceptTouchEvent</li>
<li>再走ViewGroup中 onTouchEvent</li>
<li>回到Activity中 onTouchEvent</li>
</ul>
</blockquote>
<h3 id="dispatchTouchEvent返回false"><a href="#dispatchTouchEvent返回false" class="headerlink" title="dispatchTouchEvent返回false"></a>dispatchTouchEvent返回false</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>ViewGroup中只走了 dispatchTouchEvent方法其它2个方法并没有走说明dispatchTouchEvent返回false，不分发把事件传递上层(这里Activity)去处理</li>
<li>Activty中把事件消费处理掉了</li>
</ul>
</blockquote>
<hr>
<ul>
<li>dispatchTouchEvent返回false,onInterceptTouchEvent/onTouchEvent方法不会执行也就不会向下传递了，直接返回上层的容器处理</li>
</ul>
<h3 id="dispatchTouchEvent返回true"><a href="#dispatchTouchEvent返回true" class="headerlink" title="dispatchTouchEvent返回true"></a>dispatchTouchEvent返回true</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<ul>
<li>只走了dispatchTouchEvent方法,说明dispatchTouchEvent返回true时，自己把事件消费了，也没有走onInterceptTouchEvent/onTouchEvent,同时也没有返回上层</li>
</ul>
</blockquote>
<p>###dispatchTouchEvent小结</p>
<blockquote>
<ul>
<li>true时,dispatchTouchEvent自己消费事件，不走onInterceptTouchEvent/onTouchEvent,同时也没有返回上层</li>
<li>false时,dispatchTouchEvent不分发事件，直接返回上层容器，让上层容器自己处理，同时也不走onInterceptTouchEvent/onTouchEvent</li>
<li>super.dispatchTouchEvent(ev) 才会分发事件,去走onInterceptTouchEvent方法</li>
</ul>
</blockquote>
<h2 id="将dispatchTouchEvent设置为super"><a href="#将dispatchTouchEvent设置为super" class="headerlink" title="将dispatchTouchEvent设置为super"></a>将dispatchTouchEvent设置为super</h2><h2 id="onInterceptTouchEvent"><a href="#onInterceptTouchEvent" class="headerlink" title="onInterceptTouchEvent"></a>onInterceptTouchEvent</h2><p>更改下布局，添加一个自定义View重写2个方法都返回默认<br><img src="https://ln0491.github.io/img/my.png" alt="my.png"></p>
<h3 id="super时"><a href="#super时" class="headerlink" title="super时"></a>super时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  MyView      dispatchTouchEvent: ACTION_DOWN</div><div class="line">  MyView      onTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onInterceptTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
<blockquote>
<p>*都是默认没什么说的，者会走一下，返回到顶级容器去处理</p>
</blockquote>
<h3 id="false"><a href="#false" class="headerlink" title="false"></a>false</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  MyView      dispatchTouchEvent: ACTION_DOWN</div><div class="line">  MyView      onTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onInterceptTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>可以看到和默认的super一样</li>
<li><p>onInterceptTouchEvent，super和false都回调有onTouchEvent</p>
<h3 id="true"><a href="#true" class="headerlink" title="true"></a>true</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  MyView      dispatchTouchEvent: ACTION_DOWN</div><div class="line">  MyView      onTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onInterceptTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
</li>
<li><p>这个和上像一样</p>
</li>
<li>这么看好像没什么区别，主要看true</li>
</ul>
<hr>
<p>前提onInterceptTouchEvent返回true</p>
<h2 id="结合onTouchEvent来看"><a href="#结合onTouchEvent来看" class="headerlink" title="结合onTouchEvent来看"></a>结合onTouchEvent来看</h2></blockquote>
<h3 id="super-和上面一样了"><a href="#super-和上面一样了" class="headerlink" title="super 和上面一样了"></a>super 和上面一样了</h3><h3 id="false也和上面一样了，"><a href="#false也和上面一样了，" class="headerlink" title="false也和上面一样了，"></a>false也和上面一样了，</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onInterceptTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>onTouchEvent的 super和fasle效果是一样的</li>
<li>onInterceptTouchEvent返回true事件就会被截不再像子View去传递，而是走ViewGroup自己的onTouchEvent</li>
</ul>
</blockquote>
<p>主要看true</p>
<h3 id="true-1"><a href="#true-1" class="headerlink" title="true"></a>true</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   MyRelativeLayout dispatchTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onInterceptTouchEvent: ACTION_DOWN</div><div class="line">  MyView      dispatchTouchEvent: ACTION_DOWN</div><div class="line">  MyView      onTouchEvent: ACTION_DOWN</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_DOWN</div><div class="line"> MainActivity  onTouchEvent: ACTION_UP</div><div class="line">MyRelativeLayout dispatchTouchEvent: ACTION_UP</div><div class="line">MyRelativeLayout onTouchEvent: ACTION_UP</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>看到事件没有再向Activity去传递而是在ViewGroup的onTouchEvent中消费完了</li>
</ul>
</blockquote>
<hr>
<h3 id="onTouchEvent-小结"><a href="#onTouchEvent-小结" class="headerlink" title="onTouchEvent 小结"></a>onTouchEvent 小结</h3><blockquote>
<ul>
<li>super和false结果一样都回再向上级去传递</li>
<li>true就在ViewGroup中消费完毕不再传递了</li>
</ul>
</blockquote>
<h3 id="ViweGroup小结"><a href="#ViweGroup小结" class="headerlink" title="ViweGroup小结"></a>ViweGroup小结</h3><p>dispatchTouchEvent</p>
<blockquote>
<ul>
<li>false 事件不分发直接返回上级onTouchEvent去处理，同时也就不会调有onInterceptTouchEvent/onTouchEvent方法</li>
<li><p>true 直接消费这个事件，不会返回上级，同时也不会 调有onInterceptTouchEvent/onTouchEvent方法</p>
</li>
<li><p>super时，再会调用onInterceptTouchEvent方法</p>
</li>
<li><p>这里onInterceptTouchEvent返回 false 和super是不拦截事件，<br>如果这个ViewGroup没有View就调onTouchEvent方法</p>
</li>
<li><p>true:就在自己就消费事件不再向上传递</p>
</li>
<li>false和 super：就向上级容器返回事件，调用上级容器的onTouchEvent</li>
</ul>
</blockquote>
<p> 如果这个ViewGroup有子View就向子View(dispatchTouchEvent)传递事件,<br>子ViewdispatchTouchEvent:</p>
<blockquote>
<ul>
<li>true就自己消费了</li>
<li>false 就返回ViewGroup中调用onTouchEvent（false/super/true）方法</li>
<li>super 就调用子View的onTouchEvent方法</li>
</ul>
</blockquote>
<p>子View的onTouchEvent</p>
<blockquote>
<ul>
<li><p>super/false 都向上调ViewGroup中调用onTouchEvent（false/super/true）方法</p>
</li>
<li><p>就在子View中消费这个事件不再传递</p>
</li>
</ul>
</blockquote>
<p>源码:<br><a href="https://github.com/ln0491/AndroidTouchDemo" target="_blank" rel="external">https://github.com/ln0491/AndroidTouchDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;onTouch事件&quot;&gt;&lt;a href=&quot;#onTouch事件&quot; class=&quot;headerlink&quot; title=&quot;onTouch事件&quot;&gt;&lt;/a&gt;onTouch事件&lt;/h1&gt;&lt;p&gt;##ViegGroup中有3个方法&lt;br&gt;&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://ln0491.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Volley自定义Request</title>
    <link href="https://ln0491.github.io/2016/09/28/Volley%E8%87%AA%E5%AE%9A%E4%B9%89Request/"/>
    <id>https://ln0491.github.io/2016/09/28/Volley自定义Request/</id>
    <published>2016-09-28T06:16:01.000Z</published>
    <updated>2016-09-28T06:16:22.313Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自定义Request"><a href="#自定义Request" class="headerlink" title="自定义Request"></a>自定义Request</h4><pre><code>public class StringRequest extends Request&lt;String&gt; {
        //监听器
    private final Listener&lt;String&gt; mListener;

    //构造方法 这时一定要调用super
    public StringRequest(int method, String url, Listener&lt;String&gt; listener, ErrorListener errorListener) {
        super(method, url, errorListener);
        this.mListener = listener;
    }

    //调用上面的方法
    public StringRequest(String url, Listener&lt;String&gt; listener, ErrorListener errorListener) {
        this(0, url, listener, errorListener);
    }

    //只是deliverResponse()方法中的实现很简单，仅仅是调用了mListener中的onResponse()方法，并将response内容传入即可，这样就可以将服务器响应的数据进行回调了
    protected void deliverResponse(String response) {
        this.mListener.onResponse(response);
    }

    protected Response&lt;String&gt; parseNetworkResponse(NetworkResponse response) {
        String parsed;
        try {
            //parseCharset字符编码
            parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
        } catch (UnsupportedEncodingException var4) {
            parsed = new String(response.data);
        }
        //头信息
        return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));
    }
}
</code></pre><p>由于Request类中的deliverResponse()和parseNetworkResponse()是两个抽象方法，<br>因此StringRequest中需要对这两个方法进行实现。deliverResponse()方法中的实现很简单，仅仅是调用了mListener中的onResponse()方法，并将response内容传入即可，这样就可以将服务器响应的数据进行回调了。<br>parseNetworkResponse()方法中则应该对服务器响应的数据进行解析,其中数据是以字节的形式存放在NetworkResponse的data变量中的，这里将数据取出然后组装成一个String，并传入Response的success()方法中即可。</p>
<p>#####自定义GsonRequest</p>
<pre><code>package com.liu.volleydemo.requestion;

import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.toolbox.HttpHeaderParser;
import com.google.gson.Gson;

import java.io.UnsupportedEncodingException;

/**
 * @Description: 描述
 * @AUTHOR 刘楠  Create By 2016/9/26 0026 18:11
 */
public class GsonRequest&lt;T&gt; extends Request&lt;T&gt; {
    private final Response.Listener&lt;T&gt; mListener;
    private       Gson                 mGson;
    private       Class&lt;T&gt;             mClazz;

    public GsonRequest(int method, String url, Class&lt;T&gt; clazz, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener) {
        super(method, url, errorListener);
        this.mListener = listener;
        mGson= new Gson();
        mClazz = clazz;
    }

    public GsonRequest(String url, Class&lt;T&gt; clazz, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener) {
        this(Method.GET, url, clazz, listener, errorListener);
    }

    @Override
    protected void deliverResponse(T response) {

        mListener.onResponse(response);

    }

    @Override
    protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response) {

        try {
            /**
             * 获取数据
             */
            String jsonString = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
            // 转化反回
            return Response.success(mGson.fromJson(jsonString, mClazz), HttpHeaderParser.parseCacheHeaders(response));

        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return Response.error(new ParseError(e));
        }

    }

}
</code></pre><p>=================BEAN==========</p>
<p>package com.liu.volleydemo.bean;</p>
<p>import java.util.List;</p>
<pre><code>/**
 * @Description: 描述
 * @AUTHOR 刘楠  Create By 2016/9/26 0026 18:36
 */
public class WeixinSelected {




    public String       reason;


    public ResultEntity result;
    public int error_code;

    @Override
    public String toString() {
        return &quot;WeixinSelected{&quot; +
                &quot;reason=&apos;&quot; + reason + &apos;\&apos;&apos; +
                &quot;, result=&quot; + result +
                &quot;, error_code=&quot; + error_code +
                &apos;}&apos;;
    }

    public static class ResultEntity {
        public int totalPage;
        public int ps;
        public int pno;

        @Override
        public String toString() {
            return &quot;ResultEntity{&quot; +
                    &quot;totalPage=&quot; + totalPage +
                    &quot;, ps=&quot; + ps +
                    &quot;, pno=&quot; + pno +
                    &quot;, list=&quot; + list +
                    &apos;}&apos;;
        }



        public List&lt;ListEntity&gt; list;

        public static class ListEntity {
            public String firstImg;
            public String id;
            public String source;
            public String title;
            public String url;
            public String mark;

            @Override
            public String toString() {
                return &quot;ListEntity{&quot; +
                        &quot;firstImg=&apos;&quot; + firstImg + &apos;\&apos;&apos; +
                        &quot;, id=&apos;&quot; + id + &apos;\&apos;&apos; +
                        &quot;, source=&apos;&quot; + source + &apos;\&apos;&apos; +
                        &quot;, title=&apos;&quot; + title + &apos;\&apos;&apos; +
                        &quot;, url=&apos;&quot; + url + &apos;\&apos;&apos; +
                        &quot;, mark=&apos;&quot; + mark + &apos;\&apos;&apos; +
                        &apos;}&apos;;
            }
        }
    }
}
</code></pre><p>请求</p>
<pre><code>final RequestQueue requestQueue = MyVolley.getRequestQueue(this);

   String       url    =&quot;http://v.juhe.cn/weixin/query&quot;;
   final String appkey =&quot;24834287692b8d54cf634668ce5de0b4&quot;;

  GsonRequest&lt;WeixinSelected&gt; gsonRequest = new GsonRequest&lt;WeixinSelected&gt;(Request.Method.POST,url, WeixinSelected.class, new Response.Listener&lt;WeixinSelected&gt;() {
       @Override
       public void onResponse(WeixinSelected weixinSelected) {

           Log.d(&quot;vivi&quot;, &quot;onResponse: &quot;+weixinSelected.toString());

       }
   }, new Response.ErrorListener() {
       @Override
       public void onErrorResponse(VolleyError volleyError) {

           volleyError.printStackTrace();
           Log.d(&quot;vivi&quot;, &quot;onErrorResponse: &quot;+volleyError.getMessage());
       }
   }){
       @Override
       protected Map&lt;String, String&gt; getParams() throws AuthFailureError {

           Map&lt;String,String&gt; params = new HashMap&lt;&gt;();
           params.put(&quot;key&quot;,appkey);
           return params;
       }
   };

   requestQueue.add(gsonRequest);
</code></pre><blockquote>
<p>日志</p>
</blockquote>
<pre><code>WeixinSelected{reason=&apos;success&apos;, result=ResultEntity{totalPage=25, ps=20, pno=1, list=[ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-8255071.jpg/640&apos;, id=&apos;wechat_20160915039850&apos;, source=&apos;功夫体育&apos;, title=&apos;女排冠军们“高”人一等，谁敢娶？&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160915039850&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-8575838.jpg/640&apos;, id=&apos;wechat_20151201058612&apos;, source=&apos;龍神迷失&apos;, title=&apos;中国首辆上牌的布加迪威龙，以为车牌很一般，最后发现车牌很霸气&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20151201058612&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-8206632.jpg/640&apos;, id=&apos;wechat_20160102022165&apos;, source=&apos;篮球频道&apos;, title=&apos;【球迷关注点】书豪:一度想退役不再打球 曾被科比一句蔑视激怒&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160102022165&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-8064767.jpg/640&apos;, id=&apos;wechat_20160908053966&apos;, source=&apos;娱乐圈扒姐&apos;, title=&apos;某知名女星在节目中威胁选手收贿，私下爱搞潜规则&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160908053966&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986866.jpg/640&apos;, id=&apos;wechat_20160906017693&apos;, source=&apos;颜小白的篮球梦&apos;, title=&apos;科比跟乔丹比到底差在哪里？仅仅是身体素质吗&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906017693&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986843.jpg/640&apos;, id=&apos;wechat_20160906017663&apos;, source=&apos;嘻嘻哈哈&apos;, title=&apos;神动图|这手感绝对不差！&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906017663&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986833.jpg/640&apos;, id=&apos;wechat_20160906017658&apos;, source=&apos;嘻嘻哈哈&apos;, title=&apos;江湖流传的这些奇葩书，简直刷新我的三观~&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906017658&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986819.jpg/640&apos;, id=&apos;wechat_20160906017552&apos;, source=&apos;笑你妹&apos;, title=&apos;【搞笑段子】有心无力啊，办起事来几分钟完事~&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906017552&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986802.jpg/640&apos;, id=&apos;wechat_20160906017288&apos;, source=&apos;TechWeb&apos;, title=&apos;在iPhone7发布之前我们先来看看它的跑分吧&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906017288&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986693.jpg/640&apos;, id=&apos;wechat_20160906016354&apos;, source=&apos;陇南生活网&apos;, title=&apos;甘肃：将发生严重腐败问题的地区部门直接评为“一般”&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906016354&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986675.jpg/640&apos;, id=&apos;wechat_20160906016213&apos;, source=&apos;云上的空母&apos;, title=&apos;万吨两栖舰上的袖珍火炮，射速为每分钟200发&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906016213&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986645.jpg/640&apos;, id=&apos;wechat_20160906016204&apos;, source=&apos;云上的空母&apos;, title=&apos;全球最大口径的加特林机关炮，一眨眼打出50发炮弹&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906016204&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986534.jpg/640&apos;, id=&apos;wechat_20160906015882&apos;, source=&apos;钛媒体&apos;, title=&apos;三星耗10亿美元召回Note7，并称损失令人real心痛钛晨报&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20160906015882&apos;, mark=&apos;&apos;}, ListEntity{firstImg=&apos;http://zxpic.gtimg.com/infonew/0/wechat_pics_-7986438.jpg/640&apos;, id=&apos;wechat_20160906015702&apos;, source=&apos;摄影笔记&apos;, title=&apos;一篇文章看懂尼康数码单反&apos;, url=&apos;http://v.juhe.cn/weixin/redirect?wid=wechat_20
</code></pre><p>源码：<br><a href="https://github.com/ln0491/VolleyDemo" target="_blank" rel="external">https://github.com/ln0491/VolleyDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;自定义Request&quot;&gt;&lt;a href=&quot;#自定义Request&quot; class=&quot;headerlink&quot; title=&quot;自定义Request&quot;&gt;&lt;/a&gt;自定义Request&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public class StringRequest ext
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="volley" scheme="https://ln0491.github.io/tags/volley/"/>
    
  </entry>
  
  <entry>
    <title>Volley加载网络图片</title>
    <link href="https://ln0491.github.io/2016/09/28/Volley%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87/"/>
    <id>https://ln0491.github.io/2016/09/28/Volley加载网络图片/</id>
    <published>2016-09-28T06:15:03.000Z</published>
    <updated>2016-09-28T06:15:33.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Volley加载网络图片"><a href="#Volley加载网络图片" class="headerlink" title="Volley加载网络图片"></a>Volley加载网络图片</h2><p>#####ImageRequest用法</p>
<ol>
<li>创建一个RequestQueue对象。</li>
<li>创建一个Request对象。</li>
<li>将Request对象添加到RequestQueue里面。</li>
</ol>
<p>例子</p>
<pre><code>String url =&quot;http://android.tgbus.com/news/UploadFiles_8153/201208/2012081013531630.jpg&quot;;

  RequestQueue requestQueue = Volley.newRequestQueue(this);

  /**
   * ImageRequest的构造函数接收六个参数，
   * 第一个参数就是图片的URL地址，
   * 第二个参数是图片请求成功的回调，这里我们把返回的Bitmap参数设置到ImageView中。
   * 第三第四个参数分别用于指定允许图片最大的宽度和高度，如果指定的网络图片的宽度或高度大于这里的最大值，则会对图片进行压    缩，指定成0的话就表示不管图片有多大，都不会进行压缩。
   * 第五个参数用于指定图片的颜色属性，Bitmap.Config下的几个常量都可以在这里使用，其中ARGB_8888可以展示最好的颜色属性，每个图片像素占据4个字节的大小，而RGB_565则表示每个图片像素占据2个字节大小。
   * 第六个参数是图片请求失败的回调
   */
  ImageRequest imageRequest = new ImageRequest(url, new Response.Listener&lt;Bitmap&gt;() {
      @Override
      public void onResponse(Bitmap bitmap) {

          mIv1.setImageBitmap(bitmap);

      }
  }, 0, 0, ImageView.ScaleType.CENTER_CROP, Bitmap.Config.RGB_565, new Response.ErrorListener() {
      @Override
      public void onErrorResponse(VolleyError error) {
          error.printStackTrace();
          Log.d(&quot;vivi&quot;, &quot;onErrorResponse: &quot;+error.getMessage());
      }
  });

  requestQueue.add(imageRequest);
</code></pre><h5 id="使用ImageLoader加载图片"><a href="#使用ImageLoader加载图片" class="headerlink" title="使用ImageLoader加载图片"></a>使用ImageLoader加载图片</h5><ol>
<li>创建一个RequestQueue对象。</li>
<li>创建一个ImageLoader对象。</li>
<li>获取一个ImageListener对象。</li>
<li><p>调用ImageLoader的get()方法加载网络上的图片。</p>
<pre><code>//创建请求队列
 RequestQueue requestQueue = Volley.newRequestQueue(this);
 //创建ImageLoader
ImageLoader imageLoader = new ImageLoader(requestQueue, new ImageLoader.ImageCache() {
    @Override
    public Bitmap getBitmap(String url) {

        return null;
    }

    @Override
    public void putBitmap(String url, Bitmap bitmap) {

    }
});
</code></pre></li>
</ol>
<p>第一个参数就是RequestQueue对象，第二个参数是一个ImageCache对象，这里是个空对象，没有实现<br>ImageCache对象是一个空的实现，完全没能起到图片缓存的作用。其实写一个ImageCache，但是如果想要写一个性能非常好的ImageCache，最好就要借助Android提供的LruCache功能了见最下面<br><a href="#overview">Overview</a><br>需要获取一个ImageListener对象</p>
<pre><code>  /**
 * 第一个要显示在哪个控件
 * 第二个 默认的资源图片
 * 第三个 错误的资源图片
 */
ImageLoader.ImageListener imageListener = ImageLoader.getImageListener(mIv2,R.mipmap.ic_launcher,R.mipmap.ic_launcher);

//调用ImageLoader的get()方法来加载图片
imageLoader.get(&quot;http://www.people.com.cn/mediafile/pic/20151010/79/16111083488036070527.jpg&quot;,imageListener);
</code></pre><blockquote>
<p>设置宽高</p>
</blockquote>
<pre><code>imageLoader.get(&quot;http://www.people.com.cn/mediafile/pic/20151010/79/16111083488036070527.jpg&quot;,imageListener,300,400);
</code></pre><h5 id="Volley还有一个图片加载的控件"><a href="#Volley还有一个图片加载的控件" class="headerlink" title="Volley还有一个图片加载的控件"></a>Volley还有一个图片加载的控件</h5><p>NetworkImageView使用方法<br>NetworkImageView是一个自定义控制，它是继承自ImageView的，具备ImageView控件的所有功能，并且在原生的基础之上加入了加载网络图片的功能。NetworkImageView控件的用法要比前两种方式更加简单.在布局中使用</p>
<pre><code>&lt;com.android.volley.toolbox.NetworkImageView
    android:id=&quot;@+id/networkIv&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;/&gt;
</code></pre><blockquote>
<p>步骤</p>
</blockquote>
<ol>
<li>创建一个RequestQueue对象。</li>
<li>创建一个ImageLoader对象。</li>
<li>在布局文件中添加一个NetworkImageView控件。</li>
<li>在代码中获取该控件的实例。</li>
<li><p>设置要加载的图片地址。</p>
<pre><code> //创建请求队列
RequestQueue requestQueue = Volley.newRequestQueue(this);
//设置默认资源
mNetworkImageView.setDefaultImageResId(R.mipmap.ic_launcher);
//设置加载失败的资源
mNetworkImageView.setErrorImageResId(R.mipmap.ic_launcher);

//创建ImageLoader
ImageLoader imageLoader = new ImageLoader(requestQueue, new ImageLoader.ImageCache() {
    @Override
    public Bitmap getBitmap(String url) {

        return null;
    }

    @Override
    public void putBitmap(String url, Bitmap bitmap) {

    }
});
//设置资源  setImageUrl()方法接收两个参数，第一个参数用于指定图片的URL地址，第二个参数则是前面创建好的ImageLoader对象。
mNetworkImageView.setImageUrl(&quot;http://img0.imgtn.bdimg.com/it/u=560246235,1189337337&amp;fm=21&amp;gp=0.jpg&quot;,imageLoader);
</code></pre></li>
</ol>
<p>NetworkImageView中则完全没有提供设置最大宽度和高度的方法<br>由于NetworkImageView是一个控件，在加载图片的时候它会自动获取自身的宽高，然后对比网络图片的宽度，再决定是否需要对图片进行压缩。也就是说，压缩过程是在内部完全自动化的，并不需要我们关心，NetworkImageView会始终给我们一张大小刚刚好的网络图片</p>
<p><a name="overview">Overview</a></p>
<h4 id="MyVolley"><a href="#MyVolley" class="headerlink" title="MyVolley"></a>MyVolley</h4><pre><code>    package com.liu.volleydemo.volley;

import android.app.ActivityManager;
import android.content.Context;
import android.util.Log;

import com.android.volley.RequestQueue;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.Volley;

/**
 * @Description: 单例
 * @AUTHOR 刘楠  Create By 2016/9/26 0026 15:39
 */
public class MyVolley {

    private static RequestQueue mRequestQueue;
    private static ImageLoader  mImageLoader;

    private MyVolley() {

    }
    public static RequestQueue getRequestQueue(Context context) {
        if (mRequestQueue == null) {
            init(context);
        }
        return mRequestQueue;
    }

    private static void init(Context context) {

        mRequestQueue = Volley.newRequestQueue(context);

        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        //获取内存大小
        int memoryClass = activityManager.getMemoryClass();
        Log.d(&quot;vivi&quot;, &quot;init: memoryClass&quot;+memoryClass);
        //使用1/8的内存空间来做为缓存
        int maxCacheSize = 1024*1024*memoryClass/8;

        Log.d(&quot;vivi&quot;, &quot;init: maxCacheSize &quot;+maxCacheSize);

        //初始化ImageLoad同时初始化自定义的ImageCache
        mImageLoader = new ImageLoader(mRequestQueue,new BitmapLruCache(maxCacheSize));

    }

    public static ImageLoader getImageLoader() {
        if (mImageLoader != null) {
            return mImageLoader;
        } else {
            throw new IllegalStateException(&quot;ImageLoader not initialized&quot;);
        }
    }
}
</code></pre><h5 id="ImageCache"><a href="#ImageCache" class="headerlink" title="ImageCache"></a>ImageCache</h5><pre><code>package com.liu.volleydemo.volley;

import android.graphics.Bitmap;
import android.support.v4.util.LruCache;

import com.android.volley.toolbox.ImageLoader;

/**
 * @Description: 描述
 * @AUTHOR 刘楠  Create By 2016/9/26 0026 15:34
 */
public class BitmapLruCache extends LruCache&lt;String, Bitmap&gt; implements ImageLoader.ImageCache {


    public BitmapLruCache(int maxSize) {

        super(maxSize);
    }



    @Override
    protected int sizeOf(String key, Bitmap value) {
        //返回宽度与高度字节乖的结果大小
        return value.getRowBytes() * value.getHeight();
    }

    @Override
    public Bitmap getBitmap(String url) {
        //根据KEY 获取BITMAP
        return get(url);
    }

    @Override
    public void putBitmap(String url, Bitmap bitmap) {

        //保存图片key-url,vaule-bitmap
        put(url,bitmap);
    }
}
</code></pre><p>感谢郭霖大大<br><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/17482095</a><br>源码：<br><a href="https://github.com/ln0491/VolleyDemo" target="_blank" rel="external">https://github.com/ln0491/VolleyDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Volley加载网络图片&quot;&gt;&lt;a href=&quot;#Volley加载网络图片&quot; class=&quot;headerlink&quot; title=&quot;Volley加载网络图片&quot;&gt;&lt;/a&gt;Volley加载网络图片&lt;/h2&gt;&lt;p&gt;#####ImageRequest用法&lt;/p&gt;
&lt;ol&gt;
&lt;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="volley" scheme="https://ln0491.github.io/tags/volley/"/>
    
  </entry>
  
  <entry>
    <title>Volley基本用法</title>
    <link href="https://ln0491.github.io/2016/09/28/Volley%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>https://ln0491.github.io/2016/09/28/Volley基本用法/</id>
    <published>2016-09-28T06:13:38.000Z</published>
    <updated>2016-09-28T06:14:12.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Volley基本用法"><a href="#Volley基本用法" class="headerlink" title="Volley基本用法"></a>Volley基本用法</h2><h3 id="什么是volley"><a href="#什么是volley" class="headerlink" title="什么是volley"></a>什么是volley</h3><p>  Volley，是谷歌官方于2013年发布的用于Android平台的网络通信库.</p>
<h3 id="下载Volley"><a href="#下载Volley" class="headerlink" title="下载Volley"></a>下载Volley</h3><pre><code>git clone https://android.googlesource.com/platform/frameworks/volley
</code></pre><p>自备梯子<br>在AndroidStudio中Dependencies中搜索<br>或者访问</p>
<p><a href="https://github.com/mcxiaoke/android-volley" target="_blank" rel="external">https://github.com/mcxiaoke/android-volley</a> 镜像地址</p>
<p>添加依赖</p>
<pre><code>compile &apos;com.android.volley:volley:1.0.0&apos;
</code></pre><h3 id="Volley的基本使用"><a href="#Volley的基本使用" class="headerlink" title="Volley的基本使用"></a>Volley的基本使用</h3><h4 id="创建一个RequestQueue对象。"><a href="#创建一个RequestQueue对象。" class="headerlink" title="创建一个RequestQueue对象。"></a>创建一个RequestQueue对象。</h4><pre><code> //获取请求队列  传入上下文
RequestQueue requestQueue = Volley.newRequestQueue(this/getApplicationContext());
</code></pre><h4 id="创建一个Request对象"><a href="#创建一个Request对象" class="headerlink" title="创建一个Request对象"></a>创建一个Request对象</h4><h4 id="将Request对象添加到RequestQueue里面。"><a href="#将Request对象添加到RequestQueue里面。" class="headerlink" title="将Request对象添加到RequestQueue里面。"></a>将Request对象添加到RequestQueue里面。</h4><h5 id="StringRequest"><a href="#StringRequest" class="headerlink" title="StringRequest"></a>StringRequest</h5><pre><code> /**
 *
 * @param method 请求方法 get post   Request.Method.GET,Request.Method.POST
 * @param url   请求的URL
 * @param listener    请求成功的回调接口
 * @param errorListener  请求失败的回调接口
 */
public StringRequest(int method, String url, Response.Listener&lt;String&gt; listener,
                     Response.ErrorListener errorListener) {
    super(method, url, errorListener);
    mListener = listener;
}

//get请求可以不写请求方法
public StringRequest(String url, Listener&lt;String&gt; listener, ErrorListener errorListener) {
    this(Method.GET, url, listener, errorListener);
}
</code></pre><p>######GET请求</p>
<p>例子: <a href="https://www.juhe.cn/" target="_blank" rel="external">https://www.juhe.cn/</a> 免费的接口可以申请</p>
<pre><code> String url    = &quot;http://op.juhe.cn/onebox/weather/query&quot;;
String appKey = &quot;9275deacf73ae4316f48caa251ec501e&quot;;

url += &quot;?cityname=&quot; + &quot;深圳&amp;key=&quot; + appKey;

//获取请求队列
RequestQueue requestQueue = Volley.newRequestQueue(this);

/**
 * 第一个参数 Request.Method.GET
 * 第二个url 请求URL
 * 第三个  new Response.Listener&lt;String&gt; 请求成功回调接口
 * 第四个请求失败回调接口
 */
//构建请求
StringRequest stringRequest = new StringRequest(Request.Method.GET, url, new Response.Listener&lt;String&gt;() {
    @Override
    public void onResponse(String response) {

        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot;+response.toString());

        mTvResult.setText(response);

    }
}, new Response.ErrorListener() {
    @Override
    public void onErrorResponse(VolleyError error) {
        error.printStackTrace();
        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot;+error.getMessage());

        mTvResult.setText(error.getMessage());
    }
});

//加入请求队列
requestQueue.add(stringRequest);
</code></pre><blockquote>
<p>结果：</p>
</blockquote>
<pre><code>onResponse: {&quot;reason&quot;:&quot;successed!&quot;,&quot;result&quot;:{&quot;data&quot;:{&quot;realtime&quot;:{&quot;city_code&quot;:&quot;101280601&quot;,&quot;city_name&quot;:&quot;深圳&quot;,&quot;date&quot;:&quot;2016-09-26&quot;,&quot;time&quot;:&quot;12:00:00&quot;,&quot;week&quot;:1,&quot;moon&quot;:&quot;八月廿六&quot;,&quot;dataUptime&quot;:1474864566,&quot;weather&quot;:{&quot;temperature&quot;:&quot;30&quot;,&quot;humidity&quot;:&quot;76&quot;,&quot;info&quot;:&quot;多云&quot;,&quot;img&quot;:&quot;1&quot;},&quot;wind&quot;:{&quot;direct&quot;:&quot;西北风&quot;,&quot;power&quot;:&quot;1级&quot;,&quot;offset&quot;:null,&quot;windspeed&quot;:null}},&quot;life&quot;:{&quot;date&quot;:&quot;2016-9-26&quot;,&quot;info&quot;:{&quot;chuanyi&quot;:[&quot;炎热&quot;,&quot;天气炎热，建议着短衫、短裙、短裤、薄型T恤衫等清凉夏季服装。&quot;],&quot;ganmao&quot;:[&quot;少发&quot;,&quot;各项气象条件适宜，发生感冒机率较低。但请避免长期处于空调房间中，以防感冒。&quot;],&quot;kongtiao&quot;:[&quot;部分时间开启&quot;,&quot;天气热，到中午的时候您将会感到有点热，因此建议在午后较热时开启制冷空调。&quot;],&quot;wuran&quot;:[&quot;中&quot;,&quot;气象条件对空气污染物稀释、扩散和清除无明显影响，易感人群应适当减少室外活动时间。&quot;],&quot;xiche&quot;:[&quot;较适宜&quot;,&quot;较适宜洗车，未来一天无雨，风力较小，擦洗一新的汽车至少能保持一天。&quot;],&quot;yundong&quot;:[&quot;较适宜&quot;,&quot;天气较好，户外运动请注意防晒。推荐您进行室内运动。&quot;],&quot;ziwaixian&quot;:[&quot;中等&quot;,&quot;属中等强度紫外线辐射天气，外出时建议涂擦SPF高于15、PA+的防晒护肤品，戴帽子、太阳镜。&quot;]}},&quot;weather&quot;:[{&quot;date&quot;:&quot;2016-09-26&quot;,&quot;info&quot;:{&quot;day&quot;:[&quot;1&quot;,&quot;多云&quot;,&quot;33&quot;,&quot;&quot;,&quot;微风&quot;,&quot;06:13&quot;],&quot;night&quot;:[&quot;1&quot;,&quot;多云&quot;,&quot;27&quot;,&quot;&quot;,&quot;微风&quot;,&quot;18:16&quot;]},&quot;week&quot;:&quot;一&quot;,&quot;nongli&quot;:&quot;八月廿六&quot;},{&quot;date&quot;:&quot;2016-09-27&quot;,&quot;info&quot;:{&quot;dawn&quot;:[&quot;1&quot;,&quot;多云&quot;,&quot;27&quot;,&quot;无持续风向&quot;,&quot;微风&quot;,&quot;18:16&quot;],&quot;day&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;33&quot;,&quot;&quot;,&quot;微风&quot;,&quot;06:13&quot;],&quot;night&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;27&quot;,&quot;&quot;,&quot;微风&quot;,&quot;18:15&quot;]},&quot;week&quot;:&quot;二&quot;,&quot;nongli&quot;:&quot;八月廿七&quot;},{&quot;date&quot;:&quot;2016-09-28&quot;,&quot;info&quot;:{&quot;dawn&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;27&quot;,&quot;无持续风向&quot;,&quot;微风&quot;,&quot;18:15&quot;],&quot;day&quot;:[&quot;10&quot;,&quot;暴雨&quot;,&quot;29&quot;,&quot;西南风&quot;,&quot;5-6 级&quot;,&quot;06:14&quot;],&quot;night&quot;:[&quot;10&quot;,&quot;暴雨&quot;,&quot;26&quot;,&quot;西南风&quot;,&quot;5-6 级&quot;,&quot;18:14&quot;]},&quot;week&quot;:&quot;三&quot;,&quot;nongli&quot;:&quot;八月廿八&quot;},{&quot;date&quot;:&quot;2016-09-29&quot;,&quot;info&quot;:{&quot;dawn&quot;:[&quot;10&quot;,&quot;暴雨&quot;,&quot;26&quot;,&quot;西南风&quot;,&quot;5-6 级&quot;,&quot;18:14&quot;],&quot;day&quot;:[&quot;9&quot;,&quot;大雨&quot;,&quot;29&quot;,&quot;&quot;,&quot;微风&quot;,&quot;06:14&quot;],&quot;night&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;24&quot;,&quot;&quot;,&quot;微风&quot;,&quot;18:13&quot;]},&quot;week&quot;:&quot;四&quot;,&quot;nongli&quot;:&quot;八月廿九&quot;},{&quot;date&quot;:&quot;2016-09-30&quot;,&quot;info&quot;:{&quot;dawn&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;24&quot;,&quot;无持续风向&quot;,&quot;微风&quot;,&quot;18:13&quot;],&quot;day&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;29&quot;,&quot;&quot;,&quot;微风&quot;,&quot;06:14&quot;],&quot;night&quot;:[&quot;3&quot;,&quot;阵雨&quot;,&quot;25&quot;,&quot;&quot;,&quot;微风&quot;,&quot;18:12&quot;]},&quot;week&quot;:&quot;五&quot;,&quot;nongli&quot;:&quot;八月三十&quot;}],&quot;pm25&quot;:{&quot;key&quot;:&quot;Shenzhen&quot;,&quot;show_desc&quot;:0,&quot;pm25&quot;:{&quot;curPm&quot;:&quot;98&quot;,&quot;pm25&quot;:&quot;72&quot;,&quot;pm10&quot;:&quot;102&quot;,&quot;level&quot;:2,&quot;quality&quot;:&quot;良&quot;,&quot;des&quot;:&quot;可以接受的，除极少数对某种污染物特别敏感的人以外，对公众健康没有危害。&quot;},&quot;dateTime&quot;:&quot;2016年09月26日12时&quot;,&quot;cityName&quot;:&quot;深圳&quot;},&quot;jingqu&quot;:&quot;&quot;,&quot;date&quot;:&quot;&quot;,&quot;isForeign&quot;:&quot;0&quot;}},&quot;error_code&quot;:0}
</code></pre><h6 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h6><pre><code>StringRequest stringRequest = new StringRequest(Method.POST, url,  listener, errorListener); 
</code></pre><p>StringRequest中并没有提供设置POST参数的方法，但是当发出POST请求的时候，Volley会尝试调用StringRequest的父类——Request中的getParams()方法来获取POST参数,只需要在StringRequest的匿名类中重写getParams()方法</p>
<pre><code>String       url    = &quot;http://op.juhe.cn/onebox/weather/query&quot;;
final String appKey = &quot;9275deacf73ae4316f48caa251ec501e&quot;;

//建立请求队列
RequestQueue requestQueue = Volley.newRequestQueue(this);

StringRequest stringRequest = new StringRequest(Request.Method.POST, url, new Response.Listener&lt;String&gt;() {
    @Override
    public void onResponse(String response) {

        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + response.toString());

        mTvResult.setText(response);

    }
}, new Response.ErrorListener() {
    @Override
    public void onErrorResponse(VolleyError volleyError) {
        volleyError.printStackTrace();
        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + volleyError.getMessage());

        mTvResult.setText(volleyError.getMessage());
    }

}){
    @Override
    protected Map&lt;String, String&gt; getParams() throws AuthFailureError {

        Map&lt;String,String&gt; params = new HashMap&lt;&gt;();
        params.put(&quot;cityname&quot;,&quot;深圳&quot;);
        params.put(&quot;key&quot;,appKey);

        return params;
    }
};

//添加到队列
requestQueue.add(stringRequest);
</code></pre><h3 id="JsonRequest的用法"><a href="#JsonRequest的用法" class="headerlink" title="JsonRequest的用法"></a>JsonRequest的用法</h3><p>JsonRequest是一个抽象类,JsonRequest有两个直接的子类，JsonObjectRequest和JsonArrayRequest，一个是用于请求一段JSON数据的，一个是用于请求一段JSON数组的。</p>
<h4 id="JsonObjectRequest"><a href="#JsonObjectRequest" class="headerlink" title="JsonObjectRequest"></a>JsonObjectRequest</h4><pre><code> /**
 * 
 * @param url 请求URL
 * @param jsonRequest  JSON对象
 * @param listener 成功回调
 * @param errorListener  失败回调
 */
public JsonObjectRequest(String url, JSONObject jsonRequest, Response.Listener&lt;JSONObject&gt; listener,
                         Response.ErrorListener errorListener) {
    this(jsonRequest == null ? Request.Method.GET : Request.Method.POST, url, jsonRequest,
            listener, errorListener);
}

/**
 *  上面的会调下面的方法
 * @param method  
 * @param url
 * @param jsonRequest
 * @param listener
 * @param errorListener
 */
public JsonObjectRequest(int method, String url, JSONObject jsonRequest,
                         Response.Listener&lt;JSONObject&gt; listener, Response.ErrorListener errorListener) {
    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,
            errorListener);
}
</code></pre><h5 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h5><pre><code>String url =&quot;http://v.juhe.cn/weixin/query&quot;;
   String appKey =&quot;24834287692b8d54cf634668ce5de0b4&quot;;
   url += &quot;?key=&quot; + appKey;

   RequestQueue requestQueue = Volley.newRequestQueue(this);

   JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url, null, new Response.Listener&lt;JSONObject&gt;() {
       @Override
       public void onResponse(JSONObject response) {
           Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + response.toString());

           mTvResult.setText(response.toString());
       }
   }, new Response.ErrorListener() {
       @Override
       public void onErrorResponse(VolleyError error) {
           error.printStackTrace();
           Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + error.getMessage());

           mTvResult.setText(error.getMessage());
       }
   });
   //添加队列
   requestQueue.add(jsonObjectRequest);
</code></pre><blockquote>
<p>日志</p>
</blockquote>
<pre><code>onResponse: {&quot;reason&quot;:&quot;success&quot;,&quot;result&quot;:{&quot;list&quot;:[{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-8255071.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160915039850&quot;,&quot;source&quot;:&quot;功夫体育&quot;,&quot;title&quot;:&quot;女排冠军们“高”人一等，谁敢娶？&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160915039850&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-8575838.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20151201058612&quot;,&quot;source&quot;:&quot;龍神迷失&quot;,&quot;title&quot;:&quot;中国首辆上牌的布加迪威龙，以为车牌很一般，最后发现车牌很霸气&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20151201058612&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-8206632.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160102022165&quot;,&quot;source&quot;:&quot;篮球频道&quot;,&quot;title&quot;:&quot;【球迷关注点】书豪:一度想退役不再打球 曾被科比一句蔑视激怒&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160102022165&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-8064767.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160908053966&quot;,&quot;source&quot;:&quot;娱乐圈扒姐&quot;,&quot;title&quot;:&quot;某知名女星在节目中威胁选手收贿，私下爱搞潜规则&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160908053966&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986866.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906017693&quot;,&quot;source&quot;:&quot;颜小白的篮球梦&quot;,&quot;title&quot;:&quot;科比跟乔丹比到底差在哪里？仅仅是身体素质吗&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906017693&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986843.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906017663&quot;,&quot;source&quot;:&quot;嘻嘻哈哈&quot;,&quot;title&quot;:&quot;神动图|这手感绝对不差！&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906017663&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986833.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906017658&quot;,&quot;source&quot;:&quot;嘻嘻哈哈&quot;,&quot;title&quot;:&quot;江湖流传的这些奇葩书，简直刷新我的三观~&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906017658&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986819.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906017552&quot;,&quot;source&quot;:&quot;笑你妹&quot;,&quot;title&quot;:&quot;【搞笑段子】有心无力啊，办起事来几分钟完事~&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906017552&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986802.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906017288&quot;,&quot;source&quot;:&quot;TechWeb&quot;,&quot;title&quot;:&quot;在iPhone7发布之前我们先来看看它的跑分吧&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906017288&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986693.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906016354&quot;,&quot;source&quot;:&quot;陇南生活网&quot;,&quot;title&quot;:&quot;甘肃：将发生严重腐败问题的地区部门直接评为“一般”&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906016354&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986675.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906016213&quot;,&quot;source&quot;:&quot;云上的空母&quot;,&quot;title&quot;:&quot;万吨两栖舰上的袖珍火炮，射速为每分钟200发&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906016213&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986645.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906016204&quot;,&quot;source&quot;:&quot;云上的空母&quot;,&quot;title&quot;:&quot;全球最大口径的加特林机关炮，一眨眼打出50发炮弹&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906016204&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986534.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906015882&quot;,&quot;source&quot;:&quot;钛媒体&quot;,&quot;title&quot;:&quot;三星耗10亿美元召回Note7，并称损失令人real心痛钛晨报&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20160906015882&quot;,&quot;mark&quot;:&quot;&quot;},{&quot;firstImg&quot;:&quot;http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-7986438.jpg\/640&quot;,&quot;id&quot;:&quot;wechat_20160906015702&quot;,&quot;source&quot;:&quot;摄影笔记&quot;,&quot;title&quot;:&quot;一篇文章看懂尼康数码单反&quot;,&quot;url&quot;:&quot;http:\/\/v.juhe
</code></pre><h5 id="POST请求-1"><a href="#POST请求-1" class="headerlink" title="POST请求"></a>POST请求</h5><pre><code>  String       url    =&quot;http://v.juhe.cn/weixin/query&quot;;
final String appKey =&quot;24834287692b8d54cf634668ce5de0b4&quot;;

RequestQueue requestQueue = Volley.newRequestQueue(this);
JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST, url, null, new Response.Listener&lt;JSONObject&gt;() {
    @Override
    public void onResponse(JSONObject response) {
        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + response.toString());

        mTvResult.setText(response.toString());
    }
}, new Response.ErrorListener() {
    @Override
    public void onErrorResponse(VolleyError error) {
        error.printStackTrace();
        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + error.getMessage());

        mTvResult.setText(error.getMessage());
    }
}){

    /**
     * 重写这个方法添加POST请求的参数
     * @return
     * @throws AuthFailureError
     */
    @Override
    protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
        Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
        params.put(&quot;key&quot;, appKey);

        return params;
    }
};

//添加队列
requestQueue.add(jsonObjectRequest);
</code></pre><p>可能会提示KEY错误</p>
<h4 id="JsonArrayRequest"><a href="#JsonArrayRequest" class="headerlink" title="JsonArrayRequest"></a>JsonArrayRequest</h4><pre><code>public JsonArrayRequest(int method, String url, JSONArray jsonRequest,
                        Listener&lt;JSONArray&gt; listener, ErrorListener errorListener) {
    super(method, url, (jsonRequest == null) ? null : jsonRequest.toString(), listener,
            errorListener);
}

 public JsonArrayRequest(String url, Listener&lt;JSONArray&gt; listener, ErrorListener errorListener) {
    super(Method.GET, url, null, listener, errorListener);
}
</code></pre><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><pre><code>String url =&quot;http://v.juhe.cn/toutiao/index&quot;;
String appKey =&quot;97a25ce56b4d4563c86884738eed8502&quot;;

RequestQueue requestQueue = Volley.newRequestQueue(this);

url+=&quot;?key=&quot;+appKey;

JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(url, new Response.Listener&lt;JSONArray&gt;() {
    @Override
    public void onResponse(JSONArray response) {
        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + response.toString());

        mTvResult.setText(&quot;=====\n&quot;+response.toString());
    }
}, new Response.ErrorListener() {
    @Override
    public void onErrorResponse(VolleyError error) {
        error.printStackTrace();
        Log.d(&quot;vivi&quot;, &quot;onResponse: &quot; + error.getMessage());

        mTvResult.setText(error.getMessage());
    }
});

requestQueue.add(jsonArrayRequest);
</code></pre><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><pre><code>String       url    =&quot;http://v.juhe.cn/toutiao/index&quot;;
   final String appKey =&quot;97a25ce56b4d4563c86884738eed8502&quot;;

   RequestQueue requestQueue = Volley.newRequestQueue(this);
   JsonArrayRequest jsonArrayRequest = new JsonArrayRequest(Request.Method.POST, url, null, new Response.Listener&lt;JSONArray&gt;() {
       @Override
       public void onResponse(JSONArray response) {

       }
   }, new Response.ErrorListener() {
       @Override
       public void onErrorResponse(VolleyError error) {

       }
   }){
       @Override
       protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
           Map&lt;String, String&gt; params = new HashMap&lt;&gt;();
           params.put(&quot;key&quot;, appKey);

           return params;
       }
   };

   requestQueue.add(jsonArrayRequest);
</code></pre><p>可能会提示KEY错误</p>
<h4 id="取消Request"><a href="#取消Request" class="headerlink" title="取消Request"></a>取消Request</h4><blockquote>
<p>可以针对某些个request做取消操作</p>
</blockquote>
<pre><code>@Override
protected void onStop() {
    super.onStop();
    for (Request &lt;?&gt; req : mRequestQueue) {          
        req.cancel();         }     


}
</code></pre><blockquote>
<p>取消这个队列里的所有请求：</p>
</blockquote>
<pre><code>mRequestQueue.cancelAll(this);
</code></pre><blockquote>
<p>可以根据RequestFilter或者Tag来终止某些请求</p>
</blockquote>
<pre><code>mRequestQueue.cancelAll( new RequestQueue.RequestFilter() {
        @Override
        public boolean apply(Request&lt;?&gt; request) {
            return false;
        }
    });         
    mRequestQueue.cancelAll(new Object());
</code></pre><p>或者<br>通过使用tag来做到，在构造GET请求的时候，添加一个tag给它。<br>    request.setTag(“GET”);<br>    mRequestQueue.add(request);</p>
<p>如果要取消GET请求，只需简单的添加下面的一行代码：    </p>
<pre><code>mRequestQueue.cancelAll(&quot;GET&quot;);
</code></pre><p>感谢郭霖大大<br><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/17482095</a><br>源码：<br><a href="https://github.com/ln0491/VolleyDemo" target="_blank" rel="external">https://github.com/ln0491/VolleyDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Volley基本用法&quot;&gt;&lt;a href=&quot;#Volley基本用法&quot; class=&quot;headerlink&quot; title=&quot;Volley基本用法&quot;&gt;&lt;/a&gt;Volley基本用法&lt;/h2&gt;&lt;h3 id=&quot;什么是volley&quot;&gt;&lt;a href=&quot;#什么是volley&quot; c
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="volley" scheme="https://ln0491.github.io/tags/volley/"/>
    
  </entry>
  
  <entry>
    <title>Android 环境变量</title>
    <link href="https://ln0491.github.io/2016/09/28/Android-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://ln0491.github.io/2016/09/28/Android-环境变量/</id>
    <published>2016-09-28T05:57:33.000Z</published>
    <updated>2016-09-28T05:58:21.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDK环境变量配置"><a href="#JDK环境变量配置" class="headerlink" title="JDK环境变量配置"></a>JDK环境变量配置</h2><ul>
<li><p>JAVA_HOME</p>
<pre><code>JDK的安装路径C:\Program Files (x86)\Java\jdk1.8.0_25 
</code></pre></li>
<li><p>CLASSPATH</p>
<pre><code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar
</code></pre></li>
<li><p>PATH</p>
<pre><code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin
</code></pre></li>
</ul>
<h2 id="Android-SDK环境变量"><a href="#Android-SDK环境变量" class="headerlink" title="Android SDK环境变量"></a>Android SDK环境变量</h2><ul>
<li><p>ANDROID_HOME</p>
<pre><code>D:\Android\sdk
</code></pre></li>
<li><p>PATH</p>
<pre><code>%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;
</code></pre></li>
</ul>
<h2 id="MAVEN-环境变量"><a href="#MAVEN-环境变量" class="headerlink" title="MAVEN 环境变量"></a>MAVEN 环境变量</h2><ul>
<li><p>MAVEN_HOME</p>
<pre><code>D:\JAVA\apache-maven-3.3.9
</code></pre></li>
<li><p>PATH</p>
</li>
<li><pre><code>%MAVEN_HOME%\bin;
</code></pre></li>
</ul>
<p>MAVEN_OPTS</p>
<pre><code>-Xms128m -Xmx512m
</code></pre><ul>
<li><p>查看是否配置成功</p>
<blockquote>
<p>mvn -v</p>
</blockquote>
</li>
<li><p>默认本地仓库</p>
<blockquote>
<p>系统当前用户目录下.m2下,Maven缺省的本地仓库路径为${user.home}/.m2/repository。 </p>
</blockquote>
</li>
<li><p>修改本地创库</p>
</li>
</ul>
<blockquote>
<p>在D盘下新m2\repository文件夹    可以通过修改${user.home}/.m2/settings.xml配置本地仓库路径     修改Maven安装目录下的 conf/文件夹内的setting.xml文件，新增一行：</p>
</blockquote>
<pre><code>&lt;localRepository&gt;D:/JAVA/m2/repository&lt;/localRepository&gt;
</code></pre><blockquote>
<p>（表示本地仓库的地址为：D:/JAVA/m2/repository）</p>
</blockquote>
<p>将setting.xml复制一份到D:/JAVA/m2/repository</p>
<pre><code>注意ManvenConfig下有此文件，便不要修改，复制出来修改
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JDK环境变量配置&quot;&gt;&lt;a href=&quot;#JDK环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;JDK环境变量配置&quot;&gt;&lt;/a&gt;JDK环境变量配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JAVA_HOME&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JDK的安装路径
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://ln0491.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>MAVEN常用命令学习</title>
    <link href="https://ln0491.github.io/2016/09/28/MAVEN%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ln0491.github.io/2016/09/28/MAVEN常用命令学习/</id>
    <published>2016-09-28T05:49:57.000Z</published>
    <updated>2016-09-28T05:52:45.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MAVEN学习"><a href="#MAVEN学习" class="headerlink" title="MAVEN学习"></a>MAVEN学习</h2><h2 id="清理target目录下的所有文件"><a href="#清理target目录下的所有文件" class="headerlink" title="清理target目录下的所有文件"></a>清理target目录下的所有文件</h2><pre><code>mvn clean
</code></pre><h2 id="项目构建与编译"><a href="#项目构建与编译" class="headerlink" title="项目构建与编译"></a>项目构建与编译</h2><pre><code>mvn clean compile
</code></pre><blockquote>
<p>在targe目录下生成文件</p>
</blockquote>
<h2 id="构建测试"><a href="#构建测试" class="headerlink" title="构建测试"></a>构建测试</h2><pre><code>mvn clean test
</code></pre><blockquote>
<p>在targe目录下生成文件,在执行test之前会先执行compile</p>
</blockquote>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><pre><code>mvn clean package
</code></pre><blockquote>
<p>在targe目录下生成jar,执行package之前会先执行test</p>
</blockquote>
<h2 id="安装jar包到本地仓库"><a href="#安装jar包到本地仓库" class="headerlink" title="安装jar包到本地仓库"></a>安装jar包到本地仓库</h2><pre><code>mvn clean install
</code></pre><blockquote>
<p>执行install之前会先执行，package</p>
</blockquote>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><pre><code>mvn dependency:sources
</code></pre><h2 id="关联源码"><a href="#关联源码" class="headerlink" title="关联源码"></a>关联源码</h2><pre><code>mvn eclipse:eclipse 
</code></pre><h2 id="在Eclipce中配置"><a href="#在Eclipce中配置" class="headerlink" title="在Eclipce中配置"></a>在Eclipce中配置</h2><p><img src="https://ln0491.github.io/img/maven.png" alt="mavensource.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MAVEN学习&quot;&gt;&lt;a href=&quot;#MAVEN学习&quot; class=&quot;headerlink&quot; title=&quot;MAVEN学习&quot;&gt;&lt;/a&gt;MAVEN学习&lt;/h2&gt;&lt;h2 id=&quot;清理target目录下的所有文件&quot;&gt;&lt;a href=&quot;#清理target目录下的所有文件&quot;
    
    </summary>
    
      <category term="java" scheme="https://ln0491.github.io/categories/java/"/>
    
    
      <category term="maven" scheme="https://ln0491.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>My Test</title>
    <link href="https://ln0491.github.io/2016/09/28/My-Test/"/>
    <id>https://ln0491.github.io/2016/09/28/My-Test/</id>
    <published>2016-09-28T02:11:58.000Z</published>
    <updated>2016-09-28T02:12:19.148Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="test" scheme="https://ln0491.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://ln0491.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>my new post</title>
    <link href="https://ln0491.github.io/2016/09/28/my-new-post/"/>
    <id>https://ln0491.github.io/2016/09/28/my-new-post/</id>
    <published>2016-09-28T01:35:12.000Z</published>
    <updated>2016-09-28T01:46:47.386Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Volley自定义Reques
&lt;!--more--&gt;
</code></pre><h3 id="Volley自定义Reques"><a href="#Volley自定义Reques" class="headerlink" title="Volley自定义Reques"></a>Volley自定义Reques</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public class GsonRequest&lt;T&gt; extends Request&lt;T&gt; &#123;</div><div class="line"></div><div class="line">	private final Listener&lt;T&gt; mListener;</div><div class="line">	private Gson mGson;</div><div class="line">	private Class&lt;T&gt; mClazz;</div><div class="line"></div><div class="line">	public GsonRequest(int method, String url, Class&lt;T&gt; clazz, Listener&lt;T&gt; listener, ErrorListener errorListener) &#123;</div><div class="line">		super(method, url, errorListener);</div><div class="line">		this.mListener = listener;</div><div class="line">		mClazz = clazz;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public GsonRequest(String url, Class&lt;T&gt; clazz, Listener&lt;T&gt; listener, ErrorListener errorListener) &#123;</div><div class="line">		this(Method.GET, url, clazz, listener, errorListener);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	protected void deliverResponse(T response) &#123;</div><div class="line"></div><div class="line">		mListener.onResponse(response);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response) &#123;</div><div class="line"></div><div class="line">		try &#123;</div><div class="line">			/**</div><div class="line">			 * 获取数据</div><div class="line">			 */</div><div class="line">			String jsonString = new String(response.data, HttpHeaderParser.parseCharset(response.headers));</div><div class="line">			// 转化反回</div><div class="line">			return Response.success(mGson.fromJson(jsonString, mClazz), HttpHeaderParser.parseCacheHeaders(response));</div><div class="line"></div><div class="line">		&#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">			return Response.error(new ParseError(e));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Volley自定义Reques
&amp;lt;!--more--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Volley自定义Reques&quot;&gt;&lt;a href=&quot;#Volley自定义Reques&quot; class=&quot;headerlink&quot; title=&quot;Voll
    
    </summary>
    
    
      <category term="test" scheme="https://ln0491.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ln0491.github.io/2016/09/28/hello-world/"/>
    <id>https://ln0491.github.io/2016/09/28/hello-world/</id>
    <published>2016-09-28T01:15:01.829Z</published>
    <updated>2016-09-28T01:15:01.829Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
