<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘楠的博客</title>
  <subtitle>热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ln0491.github.io/"/>
  <updated>2016-10-19T06:20:24.752Z</updated>
  <id>https://ln0491.github.io/</id>
  
  <author>
    <name>Liu Nan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Glide — 用Modules定制Glide</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide-%E2%80%94-%E7%94%A8Modules%E5%AE%9A%E5%88%B6Glide/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide-—-用Modules定制Glide/</id>
    <published>2016-10-19T06:19:56.000Z</published>
    <updated>2016-10-19T06:20:24.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide-—-用Modules定制Glide"><a href="#Glide-—-用Modules定制Glide" class="headerlink" title="Glide — 用Modules定制Glide"></a>Glide — 用Modules定制Glide</h2><h3 id="Glide-Modules"><a href="#Glide-Modules" class="headerlink" title="Glide Modules"></a>Glide Modules</h3><p>Glide modules是一个全局改变Glide行为的抽象的方式。你需要创建Glide的实例，来访问GlideBuilder。可以通过创建一个公共的类，实现GlideModule的接口来定制Glide<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class SimpleGlideModule implements GlideModule &#123;</div><div class="line">    @Override public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">        // todo</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override public void registerComponents(Context context, Glide glide) &#123;</div><div class="line">        // todo</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口提供了两个方法去调节Glide的不同部分，大部分内容只研究第一个方法：applyOptions(Context context, GlideBuilder builder)</p>
<p>需要创建一个额外的类去自定义Glide。下一步是要在全局中声明这个类，这样Glide知道它应该加载并使用它。Glide会扫描AndroidManifest.xml的Glide modules的meta定义。这样，你必须在AndroidManifest.xml里的<application>标签下声明刚创建的Glide module。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;manifest</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    &lt;application&gt;</div><div class="line"></div><div class="line">        &lt;meta-data</div><div class="line">            android:name=&quot;io.futurestud.tutorials.glide.glidemodule.SimpleGlideModule&quot;</div><div class="line">            android:value=&quot;GlideModule&quot; /&gt;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">    &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></application></p>
<p>确保你设置android:name为你自己的包名+类名，这样才能正确引用。你不需要添加其他的代码到其中。如果你想要禁止Glide Module，只要从AndroidManifest.xml里移除它。Java类里的代码可以留着供以后使用。当在AndroidManifest.xml里没有引用的时候，它永远不会被加载。</p>
<p>Glide推荐实现自定义module的方式有一个好处：你可以一次同时声明多个Glide Module。Glide会（没有特殊的顺序）都遍历所有声明的module。由于你当前未定义顺序，确保你的定制不会造成冲突！</p>
<h3 id="GlideBuilder"><a href="#GlideBuilder" class="headerlink" title="GlideBuilder"></a>GlideBuilder</h3><p>接口的第一个方法：applyOptions(Context context, GlideBuilder builder)。这个方法将GlideBuilder的对象当作参数，并且是void返回类型，所以你在这个方法里能调用GlideBuilder可以用的方法。</p>
<ul>
<li>.setMemoryCache(MemoryCache memoryCache)</li>
<li>.setBitmapPool(BitmapPool bitmapPool)</li>
<li>.setDiskCache(DiskCache.Factory diskCacheFactory)</li>
<li>.setDiskCacheService(ExecutorService service)</li>
<li>.setResizeService(ExecutorService service)</li>
<li>.setDecodeFormat(DecodeFormat decodeFormat)</li>
</ul>
<p>Android里有两个方法去解析图片：ARGB8888和RGB565。第一个为每个像素采用4 byte表示，后面一个则用2 byte表示。ARG8888有更高的图片质量，并且能够存储一个alpha通道。当Picasso使用ARGB888时，Glide默认使用低质量的RGB565。Glide用户的好消息：你可以通过使用Glide module方法改变解析格式。</p>
<p>你只要简单地实现一个GlideModule，像之前提到的一样，然后调用builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888)，并传入正确的枚举型参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class SimpleGlideModule implements GlideModule &#123;</div><div class="line">    @Override public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">        builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override public void registerComponents(Context context, Glide glide) &#123;</div><div class="line">        // nothing to do here</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide-—-用Modules定制Glide&quot;&gt;&lt;a href=&quot;#Glide-—-用Modules定制Glide&quot; class=&quot;headerlink&quot; title=&quot;Glide — 用Modules定制Glide&quot;&gt;&lt;/a&gt;Glide — 用Modules定
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程十一变换</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%80%E5%8F%98%E6%8D%A2/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide入门教程十一变换/</id>
    <published>2016-10-19T06:09:18.000Z</published>
    <updated>2016-10-19T06:09:51.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程十一变换"><a href="#Glide入门教程十一变换" class="headerlink" title="Glide入门教程十一变换"></a>Glide入门教程十一变换</h2><p>在图片显示出之前可以对图片进行变换处理。例如，如果你的app需要显示一张灰度图，但只能获取到一个原始全色彩的版本，你可以使用一个变换去将图片从有明艳色彩的版本转换成惨淡的黑白版</p>
<p>推荐一个库Glide变换<br><a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="external">https://github.com/wasabeef/glide-transformations</a><br>里面有很实现的效果</p>
<ul>
<li>引入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//glide 变换</div><div class="line">    compile &apos;jp.wasabeef:glide-transformations:2.0.1&apos;</div><div class="line">    // If you want to use the GPU Filters   -glide 变换使用GPU</div><div class="line">    compile &apos;jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0&apos;</div></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String trUrl = &quot;http://pic.58pic.com/58pic/16/83/91/40558PICYDj_1024.jpg&quot;;</div><div class="line"></div><div class="line"></div><div class="line">      Glide.with(this)</div><div class="line">              .load(trUrl)</div><div class="line">              .bitmapTransform(new CropCircleTransformation(this))</div><div class="line">              .into(mIvEc2);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      Glide.with(this)</div><div class="line">              .load(trUrl)</div><div class="line">              .bitmapTransform(new BlurTransformation(this))</div><div class="line">              .into(mIvEc3);</div></pre></td></tr></table></figure>
<p>提示：当你使用变换的时候，你不能使用.centerCrop()或者.fitCenter()</p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程十一变换&quot;&gt;&lt;a href=&quot;#Glide入门教程十一变换&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程十一变换&quot;&gt;&lt;/a&gt;Glide入门教程十一变换&lt;/h2&gt;&lt;p&gt;在图片显示出之前可以对图片进行变换处理。例如，如果你
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程十-异常: 调试和报错处理</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8D%81-%E5%BC%82%E5%B8%B8-%E8%B0%83%E8%AF%95%E5%92%8C%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide入门教程十-异常-调试和报错处理/</id>
    <published>2016-10-19T06:08:12.000Z</published>
    <updated>2016-10-19T06:08:54.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程十-异常-调试和报错处理"><a href="#Glide入门教程十-异常-调试和报错处理" class="headerlink" title="Glide入门教程十-异常: 调试和报错处理"></a>Glide入门教程十-异常: 调试和报错处理</h2><ul>
<li>本地调试</li>
</ul>
<p>Glide的常规请求里提供了一个方法设置Log的层级。不幸地是，你没法轻易在产品使用中轻易获取。但，也有一个很简单的方法获得Glide的调试log。你只要通过adb shell，打开terminal，然后使用下面的命令行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell setprop log.tag.GenericRequest DEBUG</div></pre></td></tr></table></figure>
<p>最后一部分DEBUG来自标准Android的log常量。因此，作为参数的递增优先级的选项如下：</p>
<pre><code>* VERBOSE
* DEBUG
* INFO
* WARN
* ERROR
</code></pre><p>当图片不存在时，会输出下面的日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">io.futurestud.tutorials.glide D/GenericRequest: load failed</div><div class="line">io.futurestud.tutorials.glide D/GenericRequest: java.io.IOException: Request failed 404: Not Found</div><div class="line">...</div></pre></td></tr></table></figure></p>
<ul>
<li>基本的异常日志</li>
</ul>
<p>Glide不提供直接获取常规请求的日志，但是你可以在请求出错时抓取异常的日志。例如，如果图片不存在，Glide会（静静地）抛出一个异常，并显示出你.erroer()里指定的图片。如果你明确想要知道异常，创建一个listener,然后传递给Glide的.listener()方法。</p>
<ul>
<li><p>监听器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">String testUrl =&quot;http://photo.enterdesk.com/2009-4-21/2009012416095313783333.png&quot;;</div><div class="line"></div><div class="line">       RequestListener&lt;String,GlideDrawable&gt; listener = new RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</div><div class="line"></div><div class="line"></div><div class="line">               e.printStackTrace();</div><div class="line">               Log.d(&quot;vivi&quot;, &quot;onException: &quot;+e.getMessage());</div><div class="line"></div><div class="line"></div><div class="line">               /**</div><div class="line">                * false 时error中的才会显示</div><div class="line">                * true 时error中的就不显示</div><div class="line">                */</div><div class="line">               return false;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</div><div class="line">               return false;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>加载<br>你可以在Glide中的构造方法里设置listener:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">              .load(testUrl)</div><div class="line">              .listener(listener)</div><div class="line">              .error(R.mipmap.pictures_no)</div><div class="line">              .into(mIvEc1);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在onException方法中，你可以抓取问题，并决定你需要做什么，比如记录日志。如果Glide应当处理这个后果，比如显示一个出错占位图，在onException方法中返回false是很重要的。</p>
<p>.error()是否设置不影响日志正常工作。但只有在listener的onException方法里返回false，R.mipmap.pictures_no才会显示出来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程十-异常-调试和报错处理&quot;&gt;&lt;a href=&quot;#Glide入门教程十-异常-调试和报错处理&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程十-异常: 调试和报错处理&quot;&gt;&lt;/a&gt;Glide入门教程十-异常: 调试和报错处理
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程九-通知栏图片加载</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%B9%9D-%E9%80%9A%E7%9F%A5%E6%A0%8F%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide入门教程九-通知栏图片加载/</id>
    <published>2016-10-19T03:25:31.000Z</published>
    <updated>2016-10-19T06:08:36.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程九-通知栏图片加载"><a href="#Glide入门教程九-通知栏图片加载" class="headerlink" title="Glide入门教程九-通知栏图片加载"></a>Glide入门教程九-通知栏图片加载</h2><p>系统通知的图标为用户传递了重要的内容。用NotificationCompat.Builder为通知图片传递一个图片是最直接方式，但是这个图片必须是<b>Bitmap</b>格式的。如果这个图片已经在手机上，那没问题。但，如果这个图片还不在手机上，需要从网络下载，想要用这个标准的工具是不现实的。</p>
<ul>
<li>自定义的通知布局</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:background=&quot;@android:color/white&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:padding=&quot;2dp&quot;&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/remoteview_notification_icon&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_marginRight=&quot;2dp&quot;</div><div class="line">            android:layout_weight=&quot;0&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id=&quot;@+id/remoteview_notification_headline&quot;</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;wrap_content&quot;</div><div class="line">                android:ellipsize=&quot;end&quot;</div><div class="line">                android:singleLine=&quot;true&quot;</div><div class="line">                android:textSize=&quot;12sp&quot;/&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id=&quot;@+id/remoteview_notification_short_message&quot;</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;wrap_content&quot;</div><div class="line">                android:ellipsize=&quot;end&quot;</div><div class="line">                android:paddingBottom=&quot;2dp&quot;</div><div class="line">                android:singleLine=&quot;true&quot;</div><div class="line">                android:textSize=&quot;14sp&quot;</div><div class="line">                android:textStyle=&quot;bold&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">//创建通知布局</div><div class="line">       RemoteViews remoteViews = new RemoteViews(getPackageName(),R.layout.remoteview_notification);</div><div class="line"></div><div class="line"></div><div class="line">       remoteViews.setImageViewResource(R.id.remoteview_notification_icon,R.mipmap.ic_launcher);</div><div class="line"></div><div class="line">       remoteViews.setTextViewText(R.id.remoteview_notification_headline,&quot;头部分标题&quot;);</div><div class="line">       remoteViews.setTextViewText(R.id.remoteview_notification_short_message,&quot;二级标题内容&quot;);</div><div class="line"></div><div class="line"></div><div class="line">       NotificationCompat.Builder builder =</div><div class="line">               new NotificationCompat.Builder(getApplicationContext())</div><div class="line">                                  .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">                                   .setTicker(&quot;ticker&quot;)</div><div class="line">                                   .setContentText(&quot;contenttext&quot;)</div><div class="line">                                   .setContentTitle(&quot;contenttitle&quot;)</div><div class="line">                                   .setContent(remoteViews)</div><div class="line">                                   .setPriority(NotificationCompat.PRIORITY_HIGH);</div><div class="line"></div><div class="line">       Notification notification = builder.build();</div><div class="line"></div><div class="line">       if(Build.VERSION.SDK_INT&gt;16)&#123;</div><div class="line">           notification.bigContentView = remoteViews;</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">       NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line">       notificationManager.notify(NOTIFICATION_ID,notification);</div><div class="line">       //这个类是Glide自带的</div><div class="line">       NotificationTarget notificationTarget =</div><div class="line">               new NotificationTarget(getApplicationContext(),remoteViews,R.id.remoteview_notification_icon,notification,NOTIFICATION_ID);</div><div class="line"></div><div class="line"></div><div class="line">       String notUrl = &quot;http://photo.enterdesk.com/2009-4-21/200901241609531378.png&quot;;</div><div class="line">       Glide.with(getApplicationContext())</div><div class="line">               .load(notUrl)</div><div class="line">               .asBitmap()</div><div class="line">               .into(notificationTarget);</div></pre></td></tr></table></figure>
<p>只要图片被加载了，我们定制的通知栏就会显示</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程九-通知栏图片加载&quot;&gt;&lt;a href=&quot;#Glide入门教程九-通知栏图片加载&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程九-通知栏图片加载&quot;&gt;&lt;/a&gt;Glide入门教程九-通知栏图片加载&lt;/h2&gt;&lt;p&gt;系统通知的图
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget</title>
    <link href="https://ln0491.github.io/2016/10/18/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%85%AB-%E5%9B%9E%E8%B0%83%EF%BC%9A%E5%AE%9A%E5%88%B6view%E4%B8%AD%E4%BD%BF%E7%94%A8SimpleTarget%E5%92%8CViewTarget/"/>
    <id>https://ln0491.github.io/2016/10/18/Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget/</id>
    <published>2016-10-18T11:33:22.000Z</published>
    <updated>2016-10-18T11:39:23.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget"><a href="#Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget" class="headerlink" title="Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget"></a>Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget</h2><ul>
<li>Glide中的回调：Target</li>
</ul>
<p>假设我们并没有ImageView作为图片加载的目标。我们只需要Bitmap本身。Glide提供了一个用Target获取Bitmap资源的方法。Target只是用来回调，它会在所有的加载和处理完毕时返回想要的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String url1 = &quot;http://img4.imgtn.bdimg.com/it/u=21385237,1665284751&amp;fm=21&amp;gp=0.jpg&quot;;</div><div class="line"></div><div class="line">     /**</div><div class="line">      * 代码的第一部分，创建一个target字段对象，里面定义了个方法，</div><div class="line">      * 这个方法一旦Glide加载和处理完图片将会被调用。</div><div class="line">      * 回调方法传回Bitmap作为参数，你可以在你所需要用的地方随意使用这个Bitmap对象。</div><div class="line">      */</div><div class="line">     SimpleTarget&lt;Bitmap&gt; target = new SimpleTarget&lt;Bitmap&gt;() &#123;</div><div class="line">         @Override</div><div class="line">         public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;</div><div class="line"></div><div class="line">             //设置图片显示</div><div class="line">             mIvt1.setImageBitmap(resource);</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"></div><div class="line">     Glide.with(this).load(url1)</div><div class="line">             .asBitmap() //作为bitmap显示</div><div class="line">             .into(target); //显示在这个对象</div></pre></td></tr></table></figure>
<p>代码的第二部分，表明了Glide里如何使用Target，明显跟ImageView一样！<br>你可以传递一个Target或者ImageView作为参数到.into()方法里。<br>Glide会神奇地将结果返回。这里有个不同点，我们添加了.asBitmap()，<br>这会强制返回一个Bitmap对象。<br>记住，Glide也可以加载Gif或视频。为了防止在从网络URL（可能是GIF）获取Bitmap时，<br>出现未知格式图片冲突（期望是Bitmap），<br>我们设置.asBitmap()去告诉Glide只有在资源是一个图片是才算成功，其他的都算解析失败。</p>
<ul>
<li>特定大小的Target</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">       *  通过构造方法设置图片大小</div><div class="line">       */</div><div class="line">      SimpleTarget&lt;Bitmap&gt; target2 = new SimpleTarget&lt;Bitmap&gt;(300,300) &#123;</div><div class="line">          @Override</div><div class="line">          public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;</div><div class="line">              //设置图片显示</div><div class="line">              mIvt2.setImageBitmap(resource);</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      Glide.with(this).load(url2)</div><div class="line">              .asBitmap() //作为bitmap显示</div><div class="line">              .into(target2); //显示在这个对象</div></pre></td></tr></table></figure>
<p>和“普通”target唯一不同的是这个以像素为单位的图片大小声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new SimpleTarget&lt;Bitmap&gt;(300,300)</div></pre></td></tr></table></figure></p>
<ul>
<li>ViewTarget</li>
</ul>
<p>有很多原因导致我们不能直接使用ImageView,由于没有已知的方法在哪里设置图片，Glide并不支持加载图片到定制的View内。然而用ViewTarget会让这个更简单。<br>假设你有个自定义的View<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class FutureStudioView extends FrameLayout &#123;</div><div class="line">    ImageView iv;</div><div class="line">    TextView tv;</div><div class="line"></div><div class="line">    public void initialize(Context context) &#123;</div><div class="line">        inflate( context, R.layout.custom_view_futurestudio, this );</div><div class="line"></div><div class="line">        iv = (ImageView) findViewById( R.id.custom_view_image );</div><div class="line">        tv = (TextView) findViewById( R.id.custom_view_text );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public FutureStudioView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super( context, attrs );</div><div class="line">        initialize( context );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public FutureStudioView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super( context, attrs, defStyleAttr );</div><div class="line">        initialize( context );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setImage(Drawable drawable) &#123;</div><div class="line">        iv = (ImageView) findViewById( R.id.custom_view_image );</div><div class="line"></div><div class="line">        iv.setImageDrawable( drawable );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于我们定制的view并不是继承自ImageView，这里不能使用常规的.into()方法。因此，我们只能创建一个ViewTarget，用来传递给.into()方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void loadImageViewTarget() &#123;</div><div class="line"> String targetUrl = &quot;http://photo.enterdesk.com/2009-4-21/200901241609531378.png&quot;;</div><div class="line">    FutureStudioView customView = (FutureStudioView) findViewById( R.id.custom_view );</div><div class="line"></div><div class="line">    viewTarget = new ViewTarget&lt;FutureStudioView, GlideDrawable&gt;( customView ) &#123;</div><div class="line">        @Override</div><div class="line">        public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) &#123;</div><div class="line">            this.view.setImage( resource.getCurrent() );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Glide.with(this)</div><div class="line">                   .load(targetUrl)</div><div class="line">                   .centerCrop()</div><div class="line">                   .override(300,300)</div><div class="line">                   //显示自定义控件中</div><div class="line">                   .into(viewTarget);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在target的回调方法中，我们在定制view上使用我们创建的setImage(Drawable drawable)方法设置图片。同时，确保你注意到我们已经在ViewTarget的构造方法里传递了我们的定制view:new ViewTarget<futurestudioview, glidedrawable="">( customView )。</futurestudioview,></p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget&quot;&gt;&lt;a href=&quot;#Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程七-图片请求优先级</title>
    <link href="https://ln0491.github.io/2016/10/17/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%B8%83-%E5%9B%BE%E7%89%87%E8%AF%B7%E6%B1%82%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://ln0491.github.io/2016/10/17/Glide入门教程七-图片请求优先级/</id>
    <published>2016-10-17T08:16:33.000Z</published>
    <updated>2016-10-18T11:39:16.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程七-图片请求优先级"><a href="#Glide入门教程七-图片请求优先级" class="headerlink" title="Glide入门教程七-图片请求优先级"></a>Glide入门教程七-图片请求优先级</h2><p>.priority()方法参数的Priority的枚举变量<br>一共有四个不同的枚举变量。下面以递增方式列出：</p>
<pre><code>* Priority.LOW
* Priority.NORMAL
* Priority.HIGH
* Priority.IMMEDIATE
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">               .load(url10)</div><div class="line">               .placeholder(R.mipmap.pictures_no)</div><div class="line">               .override(300,300)</div><div class="line">               .skipMemoryCache(true)   //跳过内存缓存，不在内存中保存图片</div><div class="line">               .diskCacheStrategy(DiskCacheStrategy.ALL)</div><div class="line">               .priority(Priority.HIGH)   //添加高优先级</div><div class="line">               .into(mIv10);</div></pre></td></tr></table></figure>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程七-图片请求优先级&quot;&gt;&lt;a href=&quot;#Glide入门教程七-图片请求优先级&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程七-图片请求优先级&quot;&gt;&lt;/a&gt;Glide入门教程七-图片请求优先级&lt;/h2&gt;&lt;p&gt;.prior
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程六-缓存基础</title>
    <link href="https://ln0491.github.io/2016/10/17/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%85%AD-%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80/"/>
    <id>https://ln0491.github.io/2016/10/17/Glide入门教程六-缓存基础/</id>
    <published>2016-10-17T08:15:44.000Z</published>
    <updated>2016-10-18T11:39:12.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程六-缓存基础"><a href="#Glide入门教程六-缓存基础" class="headerlink" title="Glide入门教程六-缓存基础"></a>Glide入门教程六-缓存基础</h2><p>Glide默认使用内存和磁盘缓存来避免不必要的网络请求,所有的图片请求都会被缓存在内存和磁盘上.</p>
<ul>
<li>内存缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">               .load(url10)</div><div class="line">               .placeholder(R.mipmap.pictures_no)</div><div class="line">               .skipMemoryCache(true)   //跳过内存缓存，不在内存中保存图片</div><div class="line">               .into(mIv10);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>调用了.skipMemoryCache( true )去特意告诉Glide跳过内存缓存。这意味着Glide不会把这个图片缓存到内存里。重要是，这个只影响内存缓存！Glide为了避免以后的网络请求，仍然会缓存到磁盘。<br>由于Glide默认会将所有的图片资源缓存到内存中，因此，没有必要手动调用.skipMemoryCache( false )了</p>
<ul>
<li>跳过磁盘缓存</li>
</ul>
<p>即使你关闭了内存缓存，所请求的图片仍然会被保存在设备的磁盘存储上。如果你有一张不段变化的图片，但是都是用的同一个URL，你可能需要禁止磁盘缓存了。<br>可以用.diskCacheStrategy()方法改变Glide的行为。不同于.skipMemoryCache()方法，它将需要从枚举型变量中选择一个，而不是一个简单的boolean。如果你想要禁止请求的磁盘缓存，使用枚举型变量DiskCacheStrategy.NONE作为参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">               .load(url10)</div><div class="line">               .placeholder(R.mipmap.pictures_no)</div><div class="line"></div><div class="line">               .skipMemoryCache(true)   //跳过内存缓存，不在内存中保存图片</div><div class="line">               .diskCacheStrategy(DiskCacheStrategy.NONE)  //跳这磁盘缓存</div><div class="line">               .into(mIv10);</div></pre></td></tr></table></figure>
<ul>
<li><p>DiskCacheStrategy</p>
<ul>
<li>DiskCacheStrategy.NONE 不在磁盘下保存图片没有磁盘缓存</li>
<li>DiskCacheStrategy.SOURCE 只缓存全尺寸图，原图是多大就保存多大</li>
<li>DiskCacheStrategy.RESULT 只缓存最终降低分辨后用到的图片   例:  .override(300,300),300*300像素</li>
<li>DiskCacheStrategy.ALL 缓存所有类型的图片 (默认行为)</li>
</ul>
</li>
</ul>
<p>官方wiki<a href="https://github.com/bumptech/glide/wiki/Caching-and-Cache-Invalidation" target="_blank" rel="external">https://github.com/bumptech/glide/wiki/Caching-and-Cache-Invalidation</a></p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程六-缓存基础&quot;&gt;&lt;a href=&quot;#Glide入门教程六-缓存基础&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程六-缓存基础&quot;&gt;&lt;/a&gt;Glide入门教程六-缓存基础&lt;/h2&gt;&lt;p&gt;Glide默认使用内存和磁盘缓存来避
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程五-加载gif-视频快照-缩略图</title>
    <link href="https://ln0491.github.io/2016/10/14/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%BA%94-%E5%8A%A0%E8%BD%BDgif-%E8%A7%86%E9%A2%91%E5%BF%AB%E7%85%A7-%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    <id>https://ln0491.github.io/2016/10/14/Glide入门教程五-加载gif-视频快照-缩略图/</id>
    <published>2016-10-14T09:11:40.000Z</published>
    <updated>2016-10-18T11:39:06.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程五-加载gif-视频快照-缩略图"><a href="#Glide入门教程五-加载gif-视频快照-缩略图" class="headerlink" title="Glide入门教程五-加载gif-视频快照-缩略图"></a>Glide入门教程五-加载gif-视频快照-缩略图</h2><h3 id="播放-网络Gif动画"><a href="#播放-网络Gif动画" class="headerlink" title="播放 网络Gif动画"></a>播放 网络Gif动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//加载网络gif</div><div class="line">       String gifUrl = &quot;http://b.hiphotos.baidu.com/zhidao/pic/item/faedab64034f78f066abccc57b310a55b3191c67.jpg&quot;;</div><div class="line">       Glide.with(this).load(gifUrl).placeholder(R.mipmap.pictures_no).into(mIv4);</div></pre></td></tr></table></figure>
<h3 id="本地资源gif"><a href="#本地资源gif" class="headerlink" title="本地资源gif"></a>本地资源gif</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//加载资源gif</div><div class="line">       Glide.with(this).load(R.mipmap.loading).asGif().placeholder(R.mipmap.pictures_no).into(mIv5);</div></pre></td></tr></table></figure>
<h3 id="加载本地gif文件"><a href="#加载本地gif文件" class="headerlink" title="加载本地gif文件"></a>加载本地gif文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//加载本地gif文件</div><div class="line">String gifPath = Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/Movies/test.gif&quot;;</div><div class="line">//test.gif  animate.gif Starry_Night.mp4 test.mp4</div><div class="line"></div><div class="line">File gifFile = new File(gifPath);</div><div class="line"></div><div class="line">Glide.with(this).load(gifFile).placeholder(R.mipmap.ic_launcher).into(mIv6);</div></pre></td></tr></table></figure>
<h3 id="加载本地视频快照"><a href="#加载本地视频快照" class="headerlink" title="加载本地视频快照"></a>加载本地视频快照</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//加载本地小视频 快照，只是快照 并不能播放</div><div class="line">       String videoPath =Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/Movies/test.mp4&quot;;;</div><div class="line"></div><div class="line">       File videoFile = new File(videoPath);</div><div class="line"></div><div class="line">       Glide.with(this).load(Uri.fromFile(videoFile)).placeholder(R.mipmap.ic_launcher).into(mIv7);</div></pre></td></tr></table></figure>
<h3 id="加载缩略图一"><a href="#加载缩略图一" class="headerlink" title="加载缩略图一"></a>加载缩略图一</h3><p>如果你传递一个0.1f作为参数，Glide会加载原始图片大小的10%的图片。如果原始图片有1000x1000像素，缩略图的分辨率为100x100像素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String urlPath=&quot;/storage/emulated/0/MagazineUnlock/magazine-unlock-03-2.3.311-bigpicture_03_20.jpg&quot;;</div><div class="line">        //第一种 设置缩略图比例</div><div class="line">        Glide.with(this).load(new File(urlPath)).thumbnail(0.1f).centerCrop().placeholder(R.mipmap.pictures_no).into(mIv8);</div></pre></td></tr></table></figure>
<h3 id="加载缩略图二-高级缩略图请求：原图与缩略图完全不同"><a href="#加载缩略图二-高级缩略图请求：原图与缩略图完全不同" class="headerlink" title="加载缩略图二 高级缩略图请求：原图与缩略图完全不同"></a>加载缩略图二 高级缩略图请求：原图与缩略图完全不同</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//先建立一个缩略图对象 先加载缩略图，再加载原图</div><div class="line">       DrawableRequestBuilder thumbnailRequest=  Glide.with(this).load(&quot;http://img1.imgtn.bdimg.com/it/u=2615772929,948758168&amp;fm=21&amp;gp=0.jpg&quot;);</div><div class="line"></div><div class="line">       Glide.with(this).load(Uri.fromFile(videoFile)).thumbnail(thumbnailRequest).centerCrop().placeholder(R.mipmap.pictures_no).into(mIv9);</div></pre></td></tr></table></figure>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程五-加载gif-视频快照-缩略图&quot;&gt;&lt;a href=&quot;#Glide入门教程五-加载gif-视频快照-缩略图&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程五-加载gif-视频快照-缩略图&quot;&gt;&lt;/a&gt;Glide入门教程五-
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程四-调整图片大小</title>
    <link href="https://ln0491.github.io/2016/10/14/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%9B%9B-%E8%B0%83%E6%95%B4%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/"/>
    <id>https://ln0491.github.io/2016/10/14/Glide入门教程四-调整图片大小/</id>
    <published>2016-10-14T06:26:07.000Z</published>
    <updated>2016-10-14T06:41:54.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程四-调整图片大小"><a href="#Glide入门教程四-调整图片大小" class="headerlink" title="Glide入门教程四-调整图片大小"></a>Glide入门教程四-调整图片大小</h2><h3 id="调整图片大小-override"><a href="#调整图片大小-override" class="headerlink" title="调整图片大小 override()"></a>调整图片大小 override()</h3><p>Picasso也有同样的能力,resize(x, y)但需要调用fit()方法</p>
<p>用Glide时，如果图片不需要自动适配ImageView，调用override(horizontalSize, verticalSize)，它会在将图片显示在ImageView之前调整图片的大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int width = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 200, mContext.getResources().getDisplayMetrics());</div><div class="line">     int height   = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 200f, mContext.getResources().getDisplayMetrics());</div><div class="line">     Glide.with(mContext) //上下文</div><div class="line">             .load(url) //图片地址</div><div class="line">             .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">             .error(R.mipmap.ic_launcher)  //出错的占位图</div><div class="line">             .override(width,height) //图片显示的分辨率 ，像素值 可以转化为DP再设置</div><div class="line">             .animate(R.anim.my_alpha)</div><div class="line"></div><div class="line">              .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure>
<h3 id="缩放图片-centerCrop"><a href="#缩放图片-centerCrop" class="headerlink" title="缩放图片-centerCrop"></a>缩放图片-centerCrop</h3><p>Glide提供了变换去处理图片显示，通过设置centerCrop 和 fitCenter，可以得到两个不同的效果。</p>
<p>CenterCrop()会缩放图片让图片充满整个ImageView的边框，然后裁掉超出的部分。ImageVIew会被完全填充满，但是图片可能不能完全显示出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String url = mDatas[position];</div><div class="line"></div><div class="line"></div><div class="line">      int width = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 200, mContext.getResources().getDisplayMetrics());</div><div class="line">      int height   = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 200f, mContext.getResources().getDisplayMetrics());</div><div class="line">      Glide.with(mContext) //上下文</div><div class="line">              .load(url) //图片地址</div><div class="line">              .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">              .error(R.mipmap.ic_launcher)  //出错的占位图</div><div class="line">              .override(width,height) //图片显示的分辨率 ，像素值 可以转化为DP再设置</div><div class="line">              .animate(R.anim.my_alpha)</div><div class="line">              .centerCrop()</div><div class="line">               .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure></p>
<p><img src="https://ln0491.github.io/img/animate.gif" alt="animate.gif"></p>
<h3 id="缩放图片-fitCenter"><a href="#缩放图片-fitCenter" class="headerlink" title="缩放图片-fitCenter"></a>缩放图片-fitCenter</h3><p>为ImageView加个背景色<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#ff0000"</span></div><div class="line">           <span class="attr">android:layout_margin</span>=<span class="string">"2dp"</span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/iv"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>fitCenter()会缩放图片让两边都相等或小于ImageView的所需求的边框。图片会被完整显示，可能不能完全填充整个ImageView。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext) //上下文</div><div class="line">                .load(url) //图片地址</div><div class="line">                .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">                .error(R.mipmap.ic_launcher)  //出错的占位图</div><div class="line">                .override(width,height) //图片显示的分辨率 ，像素值 可以转化为DP再设置</div><div class="line">                .animate(R.anim.my_alpha)</div><div class="line">                .centerCrop()</div><div class="line">                .fitCenter()</div><div class="line">                 .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure>
<p><img src="https://ln0491.github.io/img/fitcenter.gif" alt="fitcenter.gif"></p>
<p><img src="https://ln0491.github.io/img/fitcenter1.png" alt="fitcenter1.png"></p>
<p>centerCrop-fitCenter会相互覆盖，后面调用的后覆盖前面调用的效果</p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程四-调整图片大小&quot;&gt;&lt;a href=&quot;#Glide入门教程四-调整图片大小&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程四-调整图片大小&quot;&gt;&lt;/a&gt;Glide入门教程四-调整图片大小&lt;/h2&gt;&lt;h3 id=&quot;调整图片大
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程三 占位图-淡入淡出效果-添加动画.</title>
    <link href="https://ln0491.github.io/2016/10/14/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%B8%89-%E5%8D%A0%E4%BD%8D%E5%9B%BE-%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA%E6%95%88%E6%9E%9C-%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/"/>
    <id>https://ln0491.github.io/2016/10/14/Glide入门教程三-占位图-淡入淡出效果-添加动画/</id>
    <published>2016-10-14T05:51:42.000Z</published>
    <updated>2016-10-14T06:35:54.863Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>占位图<br>网络的环境不好，加载过程可能需要花费大量的时间。这时候就需要一个占位图先显示出来，直到实际的图片加载并处理完毕。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext) //上下文</div><div class="line">                .load(url) //图片地址</div><div class="line">                .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">                .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure>
<ul>
<li>出错的占位图 .error()<br>假设我们的app尝试从网页加载一张图片，但网页不可访问,Glide会给我们选项去进行出错的回调，并采取合适的行动</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext) //上下文</div><div class="line">              .load(url) //图片地址</div><div class="line">              .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">              .error(R.mipmap.ic_launcher)  //出错的占位图</div><div class="line">               .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure>
<p>加载前显示placeholder中的图片资源，加载失败就显示error中的图片资源<br>error()可以接受的只能是已经被初始化的图片资源或者指向图片资源的id</p>
<h3 id="渐变动画-crossFade"><a href="#渐变动画-crossFade" class="headerlink" title="渐变动画 .crossFade()"></a>渐变动画 .crossFade()</h3><p>crossFade()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Glide.with(mContext) //上下文</div><div class="line">        .load(url) //图片地址</div><div class="line">        .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">        .error(R.mipmap.ic_launcher)  //出错的占位图</div><div class="line">        .crossFade(5000)                 //淡入淡出 可以不写默认300</div><div class="line">         .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure></p>
<p>淡入淡出 -不写默认也会有值是300毫秒<br>crossFade()方法有另外一个特征：.crossFade(int duration),如果你想要减慢（或加快）动画，随便传入一个毫秒级的时间进去感受一下。<br><img src="https://ln0491.github.io/img/crossfade.gif" alt="crossfade.gif"></p>
<h4 id="dontAnimate-的使用"><a href="#dontAnimate-的使用" class="headerlink" title="dontAnimate()的使用"></a>dontAnimate()的使用</h4><p>如果你只是直接显示图片，而不需要crossfade效果，那就在Glide的请求构造里调用.dontAnimate()</p>
<h3 id="animate-添加自定义的动画"><a href="#animate-添加自定义的动画" class="headerlink" title="animate 添加自定义的动画"></a>animate 添加自定义的动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line"></div><div class="line">    &lt;alpha android:fromAlpha=&quot;0&quot;</div><div class="line">           android:duration=&quot;3000&quot;</div><div class="line">            android:toAlpha=&quot;1&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;scale android:fromXScale=&quot;0&quot;</div><div class="line">           android:fromYScale=&quot;0&quot;</div><div class="line">           android:pivotX=&quot;50%&quot;</div><div class="line">           android:pivotY=&quot;50%&quot;</div><div class="line">           android:toXScale=&quot;100%&quot;</div><div class="line">           android:toYScale=&quot;100%&quot;</div><div class="line">           android:duration=&quot;3000&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;rotate android:pivotY=&quot;50%&quot;</div><div class="line">            android:pivotX=&quot;50%&quot;</div><div class="line">            android:fromDegrees=&quot;30&quot;</div><div class="line">            android:toDegrees=&quot;360&quot;</div><div class="line">            android:duration=&quot;3000&quot;</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<ul>
<li>添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Glide.with(mContext) //上下文</div><div class="line">        .load(url) //图片地址</div><div class="line">        .placeholder(R.mipmap.pictures_no) //占位图</div><div class="line">        .error(R.mipmap.ic_launcher)  //出错的占位图</div><div class="line"></div><div class="line">        .animate(R.anim.my_alpha)</div><div class="line">         .into(holder.mIv); //显示在哪个控件中</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://ln0491.github.io/img/animate.gif" alt="animate.gif"></p>
<p>这些参数都是独立的，并且设置不依赖彼此。例如，你可以只设置.error()，而不用调用.placeholder()。你可以设置crossFade()动画，而不用设置占位图。参数的任意结合都是可行的</p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;占位图&lt;br&gt;网络的环境不好，加载过程可能需要花费大量的时间。这时候就需要一个占位图先显示出来，直到实际的图片加载并处理完毕。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程二ListView使用</title>
    <link href="https://ln0491.github.io/2016/10/14/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%BA%8CListView%E4%BD%BF%E7%94%A8/"/>
    <id>https://ln0491.github.io/2016/10/14/Glide入门教程二ListView使用/</id>
    <published>2016-10-14T02:51:20.000Z</published>
    <updated>2016-10-14T06:35:46.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程二ListView使用"><a href="#Glide入门教程二ListView使用" class="headerlink" title="Glide入门教程二ListView使用"></a>Glide入门教程二ListView使用</h2><h2 id="Glide入门教程二ListView中使用"><a href="#Glide入门教程二ListView中使用" class="headerlink" title="Glide入门教程二ListView中使用"></a>Glide入门教程二ListView中使用</h2><h3 id="添加RecyclerView"><a href="#添加RecyclerView" class="headerlink" title="添加RecyclerView"></a>添加RecyclerView</h3><ul>
<li>准备数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 准备数据</div><div class="line"> */</div><div class="line">String [] mDatas = new String[]&#123;</div><div class="line"></div><div class="line">        &quot;http://b337.photo.store.qq.com/psb?/V10FcMmY1Ttz2o/7.fo01qLQ*SI59*E2Wq.j82HuPfes*efgiyEi7mrJdk!/b/dLHI5cioAQAA&amp;bo=VQOAAgAAAAABB*Q!&amp;rf=viewer_4&quot;,</div><div class="line">        &quot;http://b118.photo.store.qq.com/psb?/V10FcMmY2gHuOI/8*6eK6PHCNTx1utXooId*KAWgwPTllj.b6uBg4McCwM!/b/dAt8W0YJJAAA&amp;bo=VQOAAgAAAAABB*Q!&amp;rf=viewer_4&quot;,</div><div class="line">        &quot;http://img1.imgtn.bdimg.com/it/u=488611129,2377736106&amp;fm=11&amp;gp=0.jpg&quot;,</div><div class="line">        &quot;http://img2.imgtn.bdimg.com/it/u=3398443685,2594061265&amp;fm=11&amp;gp=0.jpg&quot;,</div><div class="line">        &quot;http://img3.imgtn.bdimg.com/it/u=2271902832,1324672617&amp;fm=21&amp;gp=0.jpg&quot;,</div><div class="line">        &quot;http://a.hiphotos.baidu.com/image/h%3D200/sign=d20242020e24ab18ff16e63705fae69a/267f9e2f070828389f547b30bf99a9014c08f1bd.jpg&quot;,</div><div class="line">        &quot;http://img5.duitang.com/uploads/item/201406/28/20140628132554_UNE4n.thumb.700_0.jpeg&quot;,</div><div class="line">        &quot;http://cdn.duitang.com/uploads/item/201309/22/20130922202150_ntvAB.thumb.600_0.jpeg&quot;,</div><div class="line">        &quot;http://cdn.duitang.com/uploads/item/201208/04/20120804013554_yRGfe.jpeg&quot;,</div><div class="line">        &quot;http://img5.imgtn.bdimg.com/it/u=2050390856,2980742959&amp;fm=21&amp;gp=0.jpg&quot;,</div><div class="line">        &quot;http://img3.duitang.com/uploads/item/201501/23/20150123204322_N8nw5.jpeg&quot;,</div><div class="line">        &quot;http://img4q.duitang.com/uploads/item/201505/09/20150509204813_nEwxF.jpeg&quot;,</div><div class="line">        &quot;http://img1.imgtn.bdimg.com/it/u=2432702027,3704029716&amp;fm=21&amp;gp=0.jpg&quot;,</div><div class="line">        &quot;http://i.imgur.com/syELajx.jpg&quot;,</div><div class="line">        &quot;http://i.imgur.com/COzBnru.jpg&quot;,</div><div class="line">        &quot;http://i.imgur.com/Z3QjilA.jpg&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Activity</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private void initData() &#123;</div><div class="line"></div><div class="line"></div><div class="line">       mGlideListUseAdapter = new GlideListUseAdapter(this,mDatas);</div><div class="line"></div><div class="line">       LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false);</div><div class="line"></div><div class="line">       mRecyclerView.setLayoutManager(linearLayoutManager);</div><div class="line"></div><div class="line"></div><div class="line">       mRecyclerView.setAdapter(mGlideListUseAdapter);</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>adapter</li>
</ul>
<blockquote>
<p>布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">&lt;ImageView</div><div class="line">           android:layout_margin=&quot;2dp&quot;</div><div class="line">           android:id=&quot;@+id/iv&quot;</div><div class="line">           android:layout_width=&quot;200dp&quot;</div><div class="line">           android:layout_height=&quot;200dp&quot;&gt;</div><div class="line"></div><div class="line">&lt;/ImageView&gt;</div></pre></td></tr></table></figure></p>
<p>adapter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class GlideListUseAdapter extends RecyclerView.Adapter&lt;GlideListUseAdapter.ViewHolder&gt; &#123;</div><div class="line"></div><div class="line"></div><div class="line">    Context      mContext;</div><div class="line">    String [] mDatas;</div><div class="line"></div><div class="line">    LayoutInflater mInflater;</div><div class="line"></div><div class="line">    public GlideListUseAdapter(Context context, String [] datas) &#123;</div><div class="line">        this.mContext = context;</div><div class="line">        this.mDatas = datas;</div><div class="line">        mInflater= LayoutInflater.from(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line"></div><div class="line">        View itemView = mInflater.inflate(R.layout.item_glide_list_use,parent,false);</div><div class="line"></div><div class="line">        return new ViewHolder(itemView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(ViewHolder holder, int position) &#123;</div><div class="line"></div><div class="line">        String url = mDatas[position];</div><div class="line"></div><div class="line"></div><div class="line">        Glide.with(mContext).load(url).into(holder.mIv);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        if(mDatas!=null)&#123;</div><div class="line"></div><div class="line">           return mDatas.length;</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class  ViewHolder extends RecyclerView.ViewHolder &#123;</div><div class="line">        ImageView mIv;</div><div class="line">        public ViewHolder(View itemView) &#123;</div><div class="line"></div><div class="line">            super(itemView);</div><div class="line"></div><div class="line">            mIv = (ImageView) itemView.findViewById(R.id.iv);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样图片就显示出来了</p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程二ListView使用&quot;&gt;&lt;a href=&quot;#Glide入门教程二ListView使用&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程二ListView使用&quot;&gt;&lt;/a&gt;Glide入门教程二ListView使用&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程一（基本使用)</title>
    <link href="https://ln0491.github.io/2016/10/14/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%B8%80%EF%BC%88%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://ln0491.github.io/2016/10/14/Glide入门教程一（基本使用/</id>
    <published>2016-10-14T02:43:20.000Z</published>
    <updated>2016-10-14T06:35:34.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程一（基本使用）"><a href="#Glide入门教程一（基本使用）" class="headerlink" title="Glide入门教程一（基本使用）"></a>Glide入门教程一（基本使用）</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.github.bumptech.glide:glide:3.7.0&apos;</div></pre></td></tr></table></figure>
<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><ul>
<li>with(Context context)- Context是许多Android API需要调用的， Glide也不例外。这里Glide非常方便，你可以任意传递一个Activity或者Fragment对象，它都可以自动提取出上下文。</li>
<li>load(String imageUrl) - 这里传入的是你要加载的图片的URL，大多数情况下这个String类型的变量会链接到一个网络图片。</li>
<li>into(ImageView targetImageView) - 将你所希望解析的图片传递给所要显示的ImageView</li>
</ul>
<h3 id="加载url网络图片"><a href="#加载url网络图片" class="headerlink" title="加载url网络图片"></a>加载url网络图片</h3><ul>
<li><p>权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>加载图片</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(this).load(&quot;http://img1.imgtn.bdimg.com/it/u=2615772929,948758168&amp;fm=21&amp;gp=0.jpg&quot;).into(mIv1);</div></pre></td></tr></table></figure>
<p>这几行！如果这个URL链接的图片的确存在，并且你的ImageView可见，你将会在1~2秒见到这张图片被加载。假如这张图片不存在，Glide会回调相应的出错接口下面说</p>
<h3 id="加载本地图片"><a href="#加载本地图片" class="headerlink" title="加载本地图片"></a>加载本地图片</h3><ul>
<li><p>File 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//本地图片路径 /storage/emulated/0/1470634823290.jpg</div><div class="line">       String path =&quot;/storage/emulated/0/1470634823290.jpg&quot;;</div><div class="line"></div><div class="line">       File file = new File(path);</div><div class="line"></div><div class="line">       Glide.with(this).load(file).into(mIv3);</div></pre></td></tr></table></figure>
</li>
<li><p>转换的URI</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//本地图片路径 /storage/emulated/0/1470634823290.jpg</div><div class="line">       String path =&quot;/storage/emulated/0/1470634823290.jpg&quot;;</div><div class="line"></div><div class="line">       File file = new File(path);</div><div class="line"></div><div class="line">      // Glide.with(this).load(file).into(mIv3);</div><div class="line">       Uri uri = Uri.fromFile(file);</div><div class="line"></div><div class="line"></div><div class="line">      Glide.with(this).load(uri).into(mIv3);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果图片不显示建议设置要控件的宽与高，后面再说怎么解决</p>
<h3 id="加载资源图片"><a href="#加载资源图片" class="headerlink" title="加载资源图片"></a>加载资源图片</h3><p>这里是一个Int型的的资源id。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(this).load(R.mipmap.test).into(mIv2);</div></pre></td></tr></table></figure></p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程一（基本使用）&quot;&gt;&lt;a href=&quot;#Glide入门教程一（基本使用）&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程一（基本使用）&quot;&gt;&lt;/a&gt;Glide入门教程一（基本使用）&lt;/h2&gt;&lt;h3 id=&quot;添加依赖&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义属性-format</title>
    <link href="https://ln0491.github.io/2016/10/12/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7-format/"/>
    <id>https://ln0491.github.io/2016/10/12/Android自定义属性-format/</id>
    <published>2016-10-12T08:57:39.000Z</published>
    <updated>2016-10-12T09:18:25.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android自定义属性-format"><a href="#Android自定义属性-format" class="headerlink" title="Android自定义属性-format"></a>Android自定义属性-format</h2><h4 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyTextView"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--字符串--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textname"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyTextView);</div><div class="line"></div><div class="line"></div><div class="line">        //获取文字</div><div class="line">        String textName = typedArray.getString(R.styleable.MyTextView_my_textname);</div><div class="line"></div><div class="line">        this.setText(textName);</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;com.liu.myviewformatdemo.view.MyTextView</div><div class="line">           android:layout_width=&quot;match_parent&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           app:my_textname=&quot;无可奈何花落去枯萎地&quot;</div><div class="line">           /&gt;</div></pre></td></tr></table></figure>
<h4 id="dimension-尺寸值"><a href="#dimension-尺寸值" class="headerlink" title="dimension 尺寸值"></a>dimension 尺寸值</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyTextView"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--字符串--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textname"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--        尺寸值        --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textsize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyTextView);</div><div class="line"></div><div class="line"></div><div class="line">        //获取文字</div><div class="line">        String textName = typedArray.getString(R.styleable.MyTextView_my_textname);</div><div class="line"></div><div class="line">        this.setText(textName);</div><div class="line"></div><div class="line">        //获取文字大小</div><div class="line">        float textsize = typedArray.getDimensionPixelSize(R.styleable.MyTextView_my_textsize, 14);</div><div class="line"></div><div class="line">        this.setTextSize(textsize);</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;com.liu.myviewformatdemo.view.MyTextView</div><div class="line">           android:layout_width=&quot;match_parent&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           app:my_textname=&quot;无可奈何花落去枯萎地&quot;</div><div class="line">           app:my_textsize=&quot;10sp&quot;</div><div class="line">           /&gt;</div></pre></td></tr></table></figure>
<h4 id="color：颜色值"><a href="#color：颜色值" class="headerlink" title="color：颜色值"></a>color：颜色值</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyTextView"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--字符串--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textname"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--        尺寸值        --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textsize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--颜色--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textcolor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyTextView);</div><div class="line"></div><div class="line"></div><div class="line">        //获取文字</div><div class="line">        String textName = typedArray.getString(R.styleable.MyTextView_my_textname);</div><div class="line"></div><div class="line">        this.setText(textName);</div><div class="line"></div><div class="line">        //获取文字大小</div><div class="line">        float textsize = typedArray.getDimensionPixelSize(R.styleable.MyTextView_my_textsize, 14);</div><div class="line"></div><div class="line">        this.setTextSize(textsize);</div><div class="line"></div><div class="line"></div><div class="line">        //获取文字颜色</div><div class="line">        int color = typedArray.getColor(R.styleable.MyTextView_my_textcolor, 0xff00ff00);</div><div class="line">        this.setTextColor(color);</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;com.liu.myviewformatdemo.view.MyTextView</div><div class="line">           android:layout_width=&quot;match_parent&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           app:my_textname=&quot;无可奈何花落去枯萎地&quot;</div><div class="line">           app:my_textsize=&quot;10sp&quot;</div><div class="line">           app:my_textcolor=&quot;#f00&quot;</div><div class="line">           /&gt;</div></pre></td></tr></table></figure>
<h4 id="reference：参考某一资源ID。"><a href="#reference：参考某一资源ID。" class="headerlink" title="reference：参考某一资源ID。"></a>reference：参考某一资源ID。</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"MyTextView"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--字符串--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textname"</span> <span class="attr">format</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--        尺寸值        --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textsize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--颜色--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_textcolor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--引用某个资源的ID--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"my_background"</span> <span class="attr">format</span>=<span class="string">"reference"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyTextView);</div><div class="line"></div><div class="line"></div><div class="line">        //获取文字</div><div class="line">        String textName = typedArray.getString(R.styleable.MyTextView_my_textname);</div><div class="line"></div><div class="line">        this.setText(textName);</div><div class="line"></div><div class="line">        //获取文字大小</div><div class="line">        float textsize = typedArray.getDimensionPixelSize(R.styleable.MyTextView_my_textsize, 14);</div><div class="line"></div><div class="line">        this.setTextSize(textsize);</div><div class="line"></div><div class="line"></div><div class="line">        //获取文字颜色</div><div class="line">        int color = typedArray.getColor(R.styleable.MyTextView_my_textcolor, 0xff00ff00);</div><div class="line">        this.setTextColor(color);</div><div class="line"></div><div class="line"></div><div class="line">        //获取背景</div><div class="line">        int resourceId = typedArray.getResourceId(R.styleable.MyTextView_my_background, R.mipmap.ic_launcher);</div><div class="line"></div><div class="line">        this.setBackgroundResource(resourceId);</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;com.liu.myviewformatdemo.view.MyTextView</div><div class="line">           android:layout_width=&quot;match_parent&quot;</div><div class="line">           android:layout_height=&quot;wrap_content&quot;</div><div class="line">           app:my_textname=&quot;无可奈何花落去枯萎地&quot;</div><div class="line">           app:my_textsize=&quot;10sp&quot;</div><div class="line">           app:my_textcolor=&quot;#f00&quot;</div><div class="line">           app:my_background=&quot;@drawable/bg_shap&quot;</div><div class="line">           /&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161012171531531" alt="这里写图片描述"></p>
<h4 id="boolean：布尔值"><a href="#boolean：布尔值" class="headerlink" title="boolean：布尔值."></a>boolean：布尔值.</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;MyImageView&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--Boolean 是否显示--&gt;</div><div class="line">    &lt;attr name=&quot;my_display&quot; format=&quot;boolean&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>获取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//获取是还是显示boolean值boolean isDisplay = typedArray.getBoolean(R.styleable.MyImageView_my_display, true);</div></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;com.liu.myviewformatdemo.view.MyImageView    android:layout_marginTop=&quot;5dp&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;50dp&quot;    android:scaleType=&quot;centerCrop&quot;    android:src=&quot;@mipmap/img_home_banner1&quot;    app:my_display=&quot;true&quot;    /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="integer：整型值"><a href="#integer：整型值" class="headerlink" title="integer：整型值"></a>integer：整型值</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name = &quot;AnimatedRotateDrawable&quot;&gt;</div><div class="line"></div><div class="line">    &lt;attr name = &quot;visible&quot; /&gt;</div><div class="line">    &lt;attr name = &quot;frameDuration&quot; format=&quot;integer&quot; /&gt;</div><div class="line">    &lt;attr name = &quot;framesCount&quot; format=&quot;integer&quot; /&gt;</div><div class="line">    &lt;attr name = &quot;pivotX&quot; /&gt;</div><div class="line">    &lt;attr name = &quot;pivotY&quot; /&gt;</div><div class="line">    &lt;attr name = &quot;drawable&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedArray.getInteger(R.styleable.名称,默认值)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;animated-rotate</div><div class="line">    xmlns:android =&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:drawable = &quot;@drawable/图片ID&quot;</div><div class="line">    android:pivotX = &quot;50%&quot;</div><div class="line">    android:pivotY = &quot;50%&quot;</div><div class="line">    android:framesCount = &quot;12&quot;</div><div class="line">    android:frameDuration = &quot;100&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="float：浮点值"><a href="#float：浮点值" class="headerlink" title="float：浮点值"></a>float：浮点值</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name = &quot;AlphaAnimation&quot;&gt;</div><div class="line"></div><div class="line">    &lt;attr name = &quot;fromAlpha&quot; format = &quot;float&quot; /&gt;</div><div class="line">    &lt;attr name = &quot;toAlpha&quot; format = &quot;float&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>获取</li>
</ul>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedArray.getFloat(R.styleable.名称,默认值)</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;alpha</div><div class="line">    android:fromAlpha = &quot;1.0&quot;</div><div class="line">    android:toAlpha = &quot;0.7&quot;/&gt;</div></pre></td></tr></table></figure>
<h4 id="fraction：百分数"><a href="#fraction：百分数" class="headerlink" title="fraction：百分数"></a>fraction：百分数</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;RotateDrawable&quot;&gt;</div><div class="line">  &lt;attr name = &quot;visible&quot; /&gt;</div><div class="line">  &lt;attr name = &quot;fromDegrees&quot; format = &quot;float&quot; /&gt;</div><div class="line">  &lt;attr name = &quot;toDegrees&quot; format = &quot;float&quot; /&gt;</div><div class="line">  &lt;attr name = &quot;pivotX&quot; format = &quot;fraction&quot; /&gt;</div><div class="line">  &lt;attr name = &quot;pivotY&quot; format = &quot;fraction&quot; /&gt;</div><div class="line">  &lt;attr name = &quot;drawable&quot; /&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;rotate</div><div class="line">    xmlns:android =&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:interpolator = &quot;@anim/动画ID&quot;</div><div class="line">    android:fromDegrees = &quot;0&quot;</div><div class="line">    android:toDegrees = &quot;360&quot;</div><div class="line">    android:pivotX = &quot;200%&quot;</div><div class="line">    android:pivotY = &quot;300%&quot;</div><div class="line">    android:duration = &quot;5000&quot;</div><div class="line">    android:repeatMode = &quot;restart&quot;</div><div class="line">    android:repeatCount = &quot;infinite&quot;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h4 id="enum：枚举值"><a href="#enum：枚举值" class="headerlink" title="enum：枚举值"></a>enum：枚举值</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;orientation&quot;&gt;</div><div class="line">    &lt;enum name=&quot;horizontal&quot; value=&quot;0&quot; /&gt;</div><div class="line">    &lt;enum name=&quot;vertical&quot; value=&quot;1&quot; /&gt;</div><div class="line">    &lt;/attr&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android = &quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation = &quot;vertical&quot;</div><div class="line">    android:layout_width = &quot;fill_parent&quot;</div><div class="line">    android:layout_height = &quot;fill_parent&quot; &gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="flag：位或运算"><a href="#flag：位或运算" class="headerlink" title="flag：位或运算"></a>flag：位或运算</h4><blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">&lt;attr name=&quot;windowSoftInputMode&quot;&gt;</div><div class="line">&lt;flag name = &quot;stateUnspecified&quot; value = &quot;0&quot; /&gt;</div><div class="line">&lt;flag name = &quot;stateUnchanged&quot; value = &quot;1&quot; /&gt;</div><div class="line">&lt;flag name = &quot;stateHidden&quot; value = &quot;2&quot; /&gt;</div><div class="line">&lt;flag name = &quot;stateAlwaysHidden&quot; value = &quot;3&quot; /&gt;</div><div class="line">&lt;flag name = &quot;stateVisible&quot; value = &quot;4&quot; /&gt;</div><div class="line">&lt;flag name = &quot;stateAlwaysVisible&quot; value = &quot;5&quot; /&gt;</div><div class="line">&lt;flag name = &quot;adjustUnspecified&quot; value = &quot;0x00&quot; /&gt;</div><div class="line">&lt;flag name = &quot;adjustResize&quot; value = &quot;0x10&quot; /&gt;</div><div class="line">&lt;flag name = &quot;adjustPan&quot; value = &quot;0x20&quot; /&gt;</div><div class="line">&lt;flag name = &quot;adjustNothing&quot; value = &quot;0x30&quot; /&gt;</div><div class="line">&lt;/attr&gt;</div><div class="line"></div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name = &quot;.StyleAndThemeActivity&quot;</div><div class="line">    android:label = &quot;@string/app_name&quot;</div><div class="line">    android:windowSoftInputMode = &quot;stateUnspecified | stateUnchanged　|　stateHidden&quot;&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name = &quot;android.intent.action.MAIN&quot; /&gt;</div><div class="line">        &lt;category android:name = &quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="属性定义时可以指定多种类型值"><a href="#属性定义时可以指定多种类型值" class="headerlink" title="属性定义时可以指定多种类型值"></a>属性定义时可以指定多种类型值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name = &quot;名称&quot;&gt;</div><div class="line"></div><div class="line">&lt;attr name = &quot;background&quot; format = &quot;reference|color&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<p>个人主页：</p>
<p><a href="https://ln0491.github.io/">https://ln0491.github.io/</a><br><a href="http://ln0491.coding.me/" target="_blank" rel="external">http://ln0491.coding.me/</a><br>博客:<br><a href="http://blog.csdn.net/ko0491" target="_blank" rel="external">http://blog.csdn.net/ko0491</a><br><a href="http://www.cnblogs.com/liunanjava/" target="_blank" rel="external">http://www.cnblogs.com/liunanjava/</a><br>源码： <a href="https://github.com/ln0491/MyViewFormatDemo" target="_blank" rel="external">https://github.com/ln0491/MyViewFormatDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android自定义属性-format&quot;&gt;&lt;a href=&quot;#Android自定义属性-format&quot; class=&quot;headerlink&quot; title=&quot;Android自定义属性-format&quot;&gt;&lt;/a&gt;Android自定义属性-format&lt;/h2&gt;&lt;h4 i
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="自定义View" scheme="https://ln0491.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>Android-按二次返回键退出.</title>
    <link href="https://ln0491.github.io/2016/10/11/Android-%E6%8C%89%E4%BA%8C%E6%AC%A1%E8%BF%94%E5%9B%9E%E9%94%AE%E9%80%80%E5%87%BA/"/>
    <id>https://ln0491.github.io/2016/10/11/Android-按二次返回键退出/</id>
    <published>2016-10-11T06:39:56.000Z</published>
    <updated>2016-10-11T06:40:15.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按二次返回键退出的功能"><a href="#按二次返回键退出的功能" class="headerlink" title="按二次返回键退出的功能"></a>按二次返回键退出的功能</h2><h4 id="在onBackPressed-方法中做下时间判断"><a href="#在onBackPressed-方法中做下时间判断" class="headerlink" title="在onBackPressed 方法中做下时间判断"></a>在onBackPressed 方法中做下时间判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * 最后按下的时间</div><div class="line">  */</div><div class="line"> private  long lastTime ;</div><div class="line"></div><div class="line"> /**</div><div class="line">  * 按二次返回键退出应用</div><div class="line">  */</div><div class="line"> @Override</div><div class="line"> public void onBackPressed() &#123;</div><div class="line">     long currentTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">     if(currentTime-lastTime&lt;2*1000)&#123;</div><div class="line">         super.onBackPressed();</div><div class="line">     &#125;else &#123;</div><div class="line">         Toast.makeText(this, &quot;再按一次退出应用&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">         lastTime=currentTime;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="第二种在onKeyDown-方法中做下判断"><a href="#第二种在onKeyDown-方法中做下判断" class="headerlink" title="第二种在onKeyDown 方法中做下判断"></a>第二种在onKeyDown 方法中做下判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean onKeyDown(int keyCode, KeyEvent event) &#123;</div><div class="line"></div><div class="line">       if(keyCode==KeyEvent.KEYCODE_BACK)&#123;</div><div class="line">           //禁用返回键</div><div class="line">           exit();</div><div class="line">           return false;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       return super.onKeyDown(keyCode, event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>exit方法就是第一种的写法</p>
<h4 id="有些页面不让用返回键可以禁用"><a href="#有些页面不让用返回键可以禁用" class="headerlink" title="有些页面不让用返回键可以禁用"></a>有些页面不让用返回键可以禁用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public boolean onKeyDown(int keyCode, KeyEvent event) &#123;</div><div class="line"></div><div class="line">        if(keyCode==KeyEvent.KEYCODE_BACK)&#123;</div><div class="line">            //禁用返回键</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return super.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;按二次返回键退出的功能&quot;&gt;&lt;a href=&quot;#按二次返回键退出的功能&quot; class=&quot;headerlink&quot; title=&quot;按二次返回键退出的功能&quot;&gt;&lt;/a&gt;按二次返回键退出的功能&lt;/h2&gt;&lt;h4 id=&quot;在onBackPressed-方法中做下时间判断&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://ln0491.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager填充Fragment和懒加载</title>
    <link href="https://ln0491.github.io/2016/10/11/ViewPager%E5%A1%AB%E5%85%85Fragment%E5%92%8C%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://ln0491.github.io/2016/10/11/ViewPager填充Fragment和懒加载/</id>
    <published>2016-10-11T05:27:56.000Z</published>
    <updated>2016-10-11T05:54:32.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tablayout-ViewPager填充Fragment和懒加载"><a href="#Tablayout-ViewPager填充Fragment和懒加载" class="headerlink" title="Tablayout+ViewPager填充Fragment和懒加载"></a>Tablayout+ViewPager填充Fragment和懒加载</h2><p><img src="http://img.blog.csdn.net/20161011133031109" alt="这里写图片描述"></p>
<h3 id="使用Fragment来填充ViewPager"><a href="#使用Fragment来填充ViewPager" class="headerlink" title="使用Fragment来填充ViewPager"></a>使用Fragment来填充ViewPager</h3><p>TabLayout+ViewPager+Fragmenet是使用非常多的控件组合。</p>
<h3 id="TabLayout组件的简单介绍"><a href="#TabLayout组件的简单介绍" class="headerlink" title="TabLayout组件的简单介绍"></a>TabLayout组件的简单介绍</h3><ul>
<li>TabLayout是Material Design组件开发中的一种，使用时需要先导入design库的依赖。</li>
<li>TabLayout做出的效果是一排可以滑动的Tab，相当于一排指示器。</li>
<li><p>在布局中申明控件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tablayout"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:tabBackground</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">        <span class="attr">app:tabIndicatorColor</span>=<span class="string">"#ff0000"</span></div><div class="line">        <span class="attr">app:tabIndicatorHeight</span>=<span class="string">"2dp"</span></div><div class="line">        <span class="attr">app:tabTextColor</span>=<span class="string">"@color/colorAccent"</span></div><div class="line">        <span class="attr">app:tabSelectedTextColor</span>=<span class="string">"#FFFFFF"</span></div><div class="line">        <span class="attr">app:tabMode</span>=<span class="string">"scrollable"</span></div><div class="line">        <span class="attr">app:tabPadding</span>=<span class="string">"5dp"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.TabLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>基本属性介绍，布局和代码都可以使用</p>
</li>
<li><p>列表内容</p>
<ul>
<li>tabBackground 背景色</li>
<li>tabIndicatorColor：指示器颜色，横线</li>
<li>tabIndicatorHeight 指示器高度</li>
<li>tabTextColor 指示器，文字 没有选择时正常的颜色</li>
<li>tabSelectedTextColor  指示器，文字 选择时颜色</li>
<li>tabPadding  指示器 内边距</li>
<li>app:tabMode=”scrollable” 模式，有scrollable和fixed两种，分别表示可以滑动和固定的意思</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>代码中绑定ViewPager<ul>
<li>在ViewPager设置Adapter之后，调用tabLayout的setupWithViewPager方法绑定ViewPager</li>
<li>设置显示的内容</li>
<li>可以调用tabLayout的addTab方法添加<br>-也可以重写ViewPager适配器的getPagerTitle方法返回显示的内容</li>
</ul>
</li>
</ul>
<h3 id="FragmentPagerAdapter与FragmentStatePagerAdapter的区别"><a href="#FragmentPagerAdapter与FragmentStatePagerAdapter的区别" class="headerlink" title="FragmentPagerAdapter与FragmentStatePagerAdapter的区别"></a>FragmentPagerAdapter与FragmentStatePagerAdapter的区别</h3><h4 id="FragmentPagerAdapter"><a href="#FragmentPagerAdapter" class="headerlink" title="FragmentPagerAdapter"></a>FragmentPagerAdapter</h4><ul>
<li><p>FragmentPagerAdapter类默认会对getItem()方法返回的Fragment做缓存处理，只有当第一次打开ViewPager的页面才会去创建Fragment的对象，后面再打开页面时就会直接从缓存中获取Fragment对象的引用，这样getItem方法就不会调用了。</p>
</li>
<li><p>因为FragmentPagerAdapter做了缓存处理，所有当创建很多的Fragment时内存就会吃不消，应用程序有可能会崩掉，所以呢，FragmentPagerAdapter不适合做大量数据的Fragment显示，比较适合数据不变的静态Fragment显示。</p>
</li>
</ul>
<h4 id="FragmentStatePagerAdapter"><a href="#FragmentStatePagerAdapter" class="headerlink" title="FragmentStatePagerAdapter"></a>FragmentStatePagerAdapter</h4><ul>
<li><p>FragmentStatePagerAdapter正好与之相反，每次进入页面时都会创建Fragment对象，每次滑出时都会销毁对应的Fragment对象，没有做一点的缓存，这样内存就完全的解放出来了。</p>
</li>
<li><p>FragmentStatePagerAdapter在销毁Fragment时会调用onSaveInstanceState方法保存一些数据信息，然后下一次创建Fragment时会将这些数据读取出来</p>
</li>
</ul>
<h3 id="ViewPager的预加载"><a href="#ViewPager的预加载" class="headerlink" title="ViewPager的预加载"></a>ViewPager的预加载</h3><p>ViewPager天生会加载左右两侧的页面，这是通过一个叫做DEFAULT_OFFSCREEN_PAGES的属性指定的，通过setOffscreenPageLimit(int)可以指定这个属性的值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> private static final int DEFAULT_OFFSCREEN_PAGES = 1;</div><div class="line"></div><div class="line">public void setOffscreenPageLimit(int limit) &#123;</div><div class="line">        if (limit &lt; DEFAULT_OFFSCREEN_PAGES) &#123;</div><div class="line">            Log.w(TAG, &quot;Requested offscreen page limit &quot; + limit + &quot; too small; defaulting to &quot;</div><div class="line">                    + DEFAULT_OFFSCREEN_PAGES);</div><div class="line">            limit = DEFAULT_OFFSCREEN_PAGES;</div><div class="line">        &#125;</div><div class="line">        if (limit != mOffscreenPageLimit) &#123;</div><div class="line">            mOffscreenPageLimit = limit;</div><div class="line">            populate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>发现要是给的值小于1，那还是默认为1，也就是说这个方法只能指定加载更多的页面。并不能解决问题,设置为0，还是不设置都一样默认为1，只有大于1时才有作用</p>
<h3 id="Fragment实现懒加载"><a href="#Fragment实现懒加载" class="headerlink" title="Fragment实现懒加载"></a>Fragment实现懒加载</h3><p>Fragment的生命周期中，我们一般在onCreateView方法初始化视图，onActivityCreated方法初始化数据</p>
<ul>
<li>通过setUserVisibleHint和getUserVisibleHint方法来设置和获取Fragment的显示状态，当显示了才去加载数据。因为每一个Fragment都是这样，所以在BaseFragment中完成操作。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * setUserVisibleHint是在onCreateView之前调用的</div><div class="line">    *</div><div class="line">    * @param isVisibleToUser</div><div class="line">    */</div><div class="line">   @Override</div><div class="line">   public void setUserVisibleHint(boolean isVisibleToUser) &#123;</div><div class="line"></div><div class="line">       super.setUserVisibleHint(isVisibleToUser);</div><div class="line"></div><div class="line">       /**</div><div class="line">        * 判断是否可见</div><div class="line">        */</div><div class="line">       if(getUserVisibleHint()) &#123;</div><div class="line"></div><div class="line">           isVisible = true;</div><div class="line">           //执行可见方法-初始化数据之类</div><div class="line">           onVisible();</div><div class="line"></div><div class="line">       &#125; else &#123;</div><div class="line"></div><div class="line">           isVisible = false;</div><div class="line">           //不可见</div><div class="line">           onInvisible();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>onActivityCreated中也做判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void onActivityCreated(@Nullable Bundle savedInstanceState) &#123;</div><div class="line"></div><div class="line">       super.onActivityCreated(savedInstanceState);</div><div class="line">       //这里 初始化view的各控件 数据</div><div class="line">       isPrepared = true;</div><div class="line">       lazyLoad();</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>lazyLoad</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 可见做懒加载</div><div class="line">     */</div><div class="line">    private void onVisible() &#123;</div><div class="line">        lazyLoad();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 懒加载</div><div class="line">     */</div><div class="line">    private void lazyLoad() &#123;</div><div class="line">        /**</div><div class="line">         * 判断是否可见，或者 初始化view的各控件</div><div class="line">         */</div><div class="line">        if(!isVisible || !isPrepared) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        //可见 或者 控件初始化完成 就 加载数据</div><div class="line">        initData();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="第二种-将lazyLoad抽象方法-在子类在实现"><a href="#第二种-将lazyLoad抽象方法-在子类在实现" class="headerlink" title="第二种 将lazyLoad抽象方法 在子类在实现"></a>第二种 将lazyLoad抽象方法 在子类在实现</h4><p>子Fragment继承BaseFramentTabLayout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 标志位，标志已经初始化完成。</div><div class="line">    private boolean isPrepared;</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">        Log.d(LOG_TAG, &quot;onCreateView&quot;);</div><div class="line">        View view = inflater.inflate(R.layout.fragment_open_result, container, false);</div><div class="line">        //XXX初始化view的各控件</div><div class="line">    isPrepared = true;</div><div class="line">        lazyLoad();</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void lazyLoad() &#123;</div><div class="line">        if(!isPrepared || !isVisible) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        //填充各控件的数据</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>个人主页<br><a href="https://ln0491.github.io/">https://ln0491.github.io/</a><br><a href="http://ln0491.coding.me/" target="_blank" rel="external">http://ln0491.coding.me/</a><br>源码：<br><a href="https://github.com/ln0491/ViewPagerDemo" target="_blank" rel="external">https://github.com/ln0491/ViewPagerDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tablayout-ViewPager填充Fragment和懒加载&quot;&gt;&lt;a href=&quot;#Tablayout-ViewPager填充Fragment和懒加载&quot; class=&quot;headerlink&quot; title=&quot;Tablayout+ViewPager填充Fragm
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="viewpager" scheme="https://ln0491.github.io/tags/viewpager/"/>
    
  </entry>
  
  <entry>
    <title>Android-三级联动更改样式</title>
    <link href="https://ln0491.github.io/2016/10/10/Android-%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E6%9B%B4%E6%94%B9%E6%A0%B7%E5%BC%8F/"/>
    <id>https://ln0491.github.io/2016/10/10/Android-三级联动更改样式/</id>
    <published>2016-10-10T06:19:53.000Z</published>
    <updated>2016-10-10T06:20:15.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h3><p><a href="http://blog.csdn.net/ko0491/article/details/52769418" target="_blank" rel="external">http://blog.csdn.net/ko0491/article/details/52769418</a></p>
<p>原来的样式好难看，发现没有设置样式的地方，只有更改源码一途了</p>
<h3 id="Drawable资源"><a href="#Drawable资源" class="headerlink" title="Drawable资源"></a>Drawable资源</h3><ul>
<li><p>wheel_bg.xml 将面的内容注释<br>这个用来设置背景色的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--	&lt;item&gt;</span></div><div class="line">		&lt;shape android:shape="rectangle"&gt;</div><div class="line">			&lt;gradient</div><div class="line">				android:startColor="#333"</div><div class="line">				android:centerColor="#DDD"</div><div class="line">				android:endColor="#333"</div><div class="line">				android:angle="90" /&gt;</div><div class="line">				</div><div class="line">				&lt;stroke android:width="1dp" android:color="#FF333333" /&gt;</div><div class="line">		&lt;/shape&gt;</div><div class="line">	&lt;/item&gt;</div><div class="line">	&lt;item android:left="4dp" android:right="4dp" android:top="1dp" android:bottom="1dp"&gt;</div><div class="line">		&lt;shape android:shape="rectangle"&gt;</div><div class="line">			&lt;gradient</div><div class="line">				android:startColor="#AAA"</div><div class="line">				android:centerColor="#FFF"</div><div class="line">				android:endColor="#AAA"</div><div class="line">				android:angle="90" /&gt;</div><div class="line">		&lt;/shape&gt;</div><div class="line">	&lt;/item&gt;--&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>wheel_val.xml<br>控件中间选择中部分</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--&lt;gradient</span></div><div class="line">		android:startColor="#70222222"</div><div class="line">		android:centerColor="#70222222"</div><div class="line">		android:endColor="#70EEEEEE"</div><div class="line">		android:angle="90" /&gt;</div><div class="line"></div><div class="line">	&lt;stroke android:width="1dp" android:color="#70333333" /&gt; --&gt;</div><div class="line"></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">	渐变</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">		<span class="attr">android:startColor</span>=<span class="string">"#22ffffff"</span></div><div class="line">		<span class="attr">android:centerColor</span>=<span class="string">"#00ffffff"</span></div><div class="line">		<span class="attr">android:endColor</span>=<span class="string">"#22ffffff"</span></div><div class="line">		<span class="attr">android:angle</span>=<span class="string">"90"</span> /&gt;</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="WheelView类更改阴影色"><a href="#WheelView类更改阴影色" class="headerlink" title="WheelView类更改阴影色"></a>WheelView类更改阴影色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line">     * Top and bottom shadows colors</div><div class="line">     */</div><div class="line"><span class="comment">//    private static final int[] SHADOWS_COLORS = new int[]&#123;0xeeFF0000, 0xee00FF00, 0xee0000FF&#125;;</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更改阴影色</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] SHADOWS_COLORS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">0xeeffffff</span>, <span class="number">0xeaffffff</span>, <span class="number">0x33ffffff</span> &#125;;</div></pre></td></tr></table></figure>
<p>这样就有渐变的效果了<br><img src="http://img.blog.csdn.net/20161010105800649" alt="这里写图片描述"></p>
<h3 id="中间选择部分加2条线"><a href="#中间选择部分加2条线" class="headerlink" title="中间选择部分加2条线"></a>中间选择部分加2条线</h3><ul>
<li>在drawCenterRect方法 中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void drawCenterRect(Canvas canvas) &#123;</div><div class="line">        int center = getHeight() / 2;</div><div class="line">        //条止的偏移量</div><div class="line">        int offset = (int) (getItemHeight() / 2 * 1.2);</div><div class="line">        centerDrawable.setBounds(0, center - offset, getWidth(), center + offset);</div><div class="line">        centerDrawable.draw(canvas);</div><div class="line">        /**</div><div class="line">         * 中间选中的画2条线</div><div class="line">         *</div><div class="line">         */</div><div class="line">        //上方的线</div><div class="line">        canvas.drawLine(0,center-offset,getWidth(),center-offset,mPaint);</div><div class="line">        //下方的线</div><div class="line">        canvas.drawLine(0,center+offset,getWidth(),center+offset,mPaint);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>前面要初始化画笔<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化画笔</div><div class="line">     */</div><div class="line">    private void initPaint() &#123;</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        //锯齿</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        //画笔颜色</div><div class="line">//        mPaint.setColor(0xffebebeb);</div><div class="line">        //为了看出效果</div><div class="line">        mPaint.setColor(0xffEA2000);</div><div class="line">        //宽度</div><div class="line">        mPaint.setStrokeWidth(1f);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20161010110452470" alt="这里写图片描述"></p>
<h3 id="选择中字体变大，不选择时变小"><a href="#选择中字体变大，不选择时变小" class="headerlink" title="选择中字体变大，不选择时变小"></a>选择中字体变大，不选择时变小</h3><p>字体更改要更改Adapter中的设置–AbstractWheelTextAdapter</p>
<ul>
<li><p>设置属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    *  当前的索引</div><div class="line">    */</div><div class="line">   private int currentIndex = 0;</div><div class="line">   /**</div><div class="line">    * 最大字体</div><div class="line">    */</div><div class="line">   private static int maxsize = 24;</div><div class="line">   /**</div><div class="line">    *   最小字体</div><div class="line">    */</div><div class="line">   private static int minsize = 14;</div></pre></td></tr></table></figure>
</li>
<li><p>更改构造方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">protected AbstractWheelTextAdapter(Context context) &#123;</div><div class="line">       this(context, TEXT_VIEW_ITEM_RESOURCE);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * Constructor</div><div class="line">    * @param context the current context</div><div class="line">    * @param itemResource the resource ID for a layout file containing a TextView to use when instantiating items views</div><div class="line">    */</div><div class="line">   protected AbstractWheelTextAdapter(Context context, int itemResource) &#123;</div><div class="line">       this(context, itemResource, NO_RESOURCE,0,maxsize,minsize);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   /**</div><div class="line">    * Constructor</div><div class="line">    * @param context the current context</div><div class="line">    * @param itemResource the resource ID for a layout file containing a TextView to use when instantiating items views</div><div class="line">    * @param itemTextResource the resource ID for a text view in the item layout</div><div class="line">    */</div><div class="line">   protected AbstractWheelTextAdapter(Context context, int itemResource, int itemTextResource,int currentIndex,int maxsize,int minsize) &#123;</div><div class="line">       this.context = context;</div><div class="line">       itemResourceId = itemResource;</div><div class="line">       itemTextResourceId = itemTextResource;</div><div class="line">       /**</div><div class="line">        *  为属性赋值</div><div class="line">        */</div><div class="line">       this.currentIndex=currentIndex;</div><div class="line">       this.maxsize = maxsize;</div><div class="line">       this.minsize = minsize;</div><div class="line">       </div><div class="line">       inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这样还是没有效果的<br>更改AbstractWheelTextAdapter 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public View getItem(int index, View convertView, ViewGroup parent) &#123;</div></pre></td></tr></table></figure></p>
<p>方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public View getItem(int index, View convertView, ViewGroup parent) &#123;</div><div class="line">       if (index &gt;= 0 &amp;&amp; index &lt; getItemsCount()) &#123;</div><div class="line">           if (convertView == null) &#123;</div><div class="line">               convertView = getView(itemResourceId, parent);</div><div class="line">           &#125;</div><div class="line">           TextView textView = getTextView(convertView, itemTextResourceId);</div><div class="line">           if (textView != null) &#123;</div><div class="line">               CharSequence text = getItemText(index);</div><div class="line">               if (text == null) &#123;</div><div class="line">                   text = &quot;&quot;;</div><div class="line">               &#125;</div><div class="line">               textView.setText(text);</div><div class="line">               /**</div><div class="line">                * 设置字体设置</div><div class="line">                *</div><div class="line">                */</div><div class="line"></div><div class="line">           if(index==currentIndex)&#123;</div><div class="line">               textView.setTextSize(maxsize);</div><div class="line">           &#125;else &#123;</div><div class="line">               textView.setTextSize(minsize);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">   </div><div class="line">               if (itemResourceId == TEXT_VIEW_ITEM_RESOURCE) &#123;</div><div class="line">                   configureTextView(textView);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           return convertView;</div><div class="line">       &#125;</div><div class="line">   	return null;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>  貌似只有第一个会变<br>  <img src="http://img.blog.csdn.net/20161010111411657" alt="这里写图片描述"></p>
<ul>
<li>Adapter中把所有Item都存放起来</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 存放Item容器</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;View&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;View&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * getter 方法对外使用</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;View&gt; <span class="title">getTextViews</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> arrayList;</div><div class="line">    &#125;</div><div class="line"> ```  </div><div class="line">* 在getItem方法中添加</div></pre></td></tr></table></figure>
<p> @Override<br>    public View getItem(int index, View convertView, ViewGroup parent) {<br>        if (index &gt;= 0 &amp;&amp; index &lt; getItemsCount()) {<br>            if (convertView == null) {<br>                convertView = getView(itemResourceId, parent);<br>            }<br>            TextView textView = getTextView(convertView, itemTextResourceId);</p>
<pre><code>        /**
         * 添加到容器中
         */
        if (!arrayList.contains(textView)) {
            arrayList.add(textView);
        }

        if (textView != null) {
            CharSequence text = getItemText(index);
            if (text == null) {
                text = &quot;&quot;;
            }
            textView.setText(text);
            /**
             * 设置字体设置
             *
             */

        if(index==currentIndex){
            textView.setTextSize(maxsize);
        }else {
            textView.setTextSize(minsize);
        }


            if (itemResourceId == TEXT_VIEW_ITEM_RESOURCE) {
                configureTextView(textView);
            }
        }
        return convertView;
    }
    return null;
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这样貌似还是不行</div><div class="line"></div><div class="line">*  对控件添加监听并设置字体</div><div class="line">```java</div><div class="line"> private void initListener() &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 滚动中改变</div><div class="line">         */</div><div class="line">        mWheelView.addChangingListener(new OnWheelChangedListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onChanged(WheelView wheel, int oldValue, int newValue) &#123;</div><div class="line">                //获取当前的索引</div><div class="line">                int currentItem = wheel.getCurrentItem();</div><div class="line">                /**</div><div class="line">                 * 获取内容</div><div class="line">                 */</div><div class="line">                String text = (String) mBirthYearAdapter.getItemText(currentItem);</div><div class="line">                /**</div><div class="line">                 * 设置字体</div><div class="line">                 *</div><div class="line">                 */</div><div class="line"></div><div class="line">                setItemTextSize(text,mBirthYearAdapter);</div><div class="line">               // Toast.makeText(MainActivity.this, text, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * 滚动完成改变</div><div class="line">         */</div><div class="line">        mWheelView.addScrollingListener(new OnWheelScrollListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onScrollingStarted(WheelView wheel) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onScrollingFinished(WheelView wheel) &#123;</div><div class="line">                //获取当前的索引</div><div class="line">                int currentItem = wheel.getCurrentItem();</div><div class="line">                /**</div><div class="line">                 * 获取内容</div><div class="line">                 */</div><div class="line">                String text = (String) mBirthYearAdapter.getItemText(currentItem);</div><div class="line">                /**</div><div class="line">                 * 设置字体</div><div class="line">                 *</div><div class="line">                 */</div><div class="line"></div><div class="line"></div><div class="line">                setItemTextSize(text,mBirthYearAdapter);</div><div class="line">                Toast.makeText(MainActivity.this, text, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<ul>
<li>设置字体大小方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 设置字体大小</div><div class="line">    * @param currentItemText</div><div class="line">    * @param birthYearAdapter</div><div class="line">    */</div><div class="line">   private  void setItemTextSize(String currentItemText,BirthYearAdapter birthYearAdapter)&#123;</div><div class="line">           //获取所有的View</div><div class="line">       ArrayList&lt;View&gt;  arrayLists = birthYearAdapter.getTextViews();</div><div class="line"></div><div class="line">       int size = arrayLists.size();</div><div class="line">       //当前条目的内容</div><div class="line">       String currentText;</div><div class="line">       for(int i = 0; i &lt; size; i++) &#123;</div><div class="line">           TextView textview = (TextView) arrayLists.get(i);</div><div class="line">           currentText = textview.getText().toString().trim();</div><div class="line"></div><div class="line">           if (currentItemText.equals(currentText)) &#123;</div><div class="line">               textview.setTextSize(maxsize);</div><div class="line">           &#125; else &#123;</div><div class="line">               textview.setTextSize(minsize);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p> 效果<br><img src="http://img.blog.csdn.net/20161010141532894" alt="这里写图片描述"></p>
<h3 id="三级联动一样一做法"><a href="#三级联动一样一做法" class="headerlink" title="三级联动一样一做法"></a>三级联动一样一做法</h3><p><img src="http://img.blog.csdn.net/20161010141556852" alt="这里写图片描述"></p>
<p>源码:<br><a href="https://github.com/ln0491/WheelDemo2" target="_blank" rel="external">https://github.com/ln0491/WheelDemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三级联动&quot;&gt;&lt;a href=&quot;#三级联动&quot; class=&quot;headerlink&quot; title=&quot;三级联动&quot;&gt;&lt;/a&gt;三级联动&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/ko0491/article/details/52769418&quot;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://ln0491.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android-省市区三级联动</title>
    <link href="https://ln0491.github.io/2016/10/09/Android-%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8/"/>
    <id>https://ln0491.github.io/2016/10/09/Android-省市区三级联动/</id>
    <published>2016-10-09T10:59:41.000Z</published>
    <updated>2016-10-09T11:00:19.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="省市区三级联动"><a href="#省市区三级联动" class="headerlink" title="省市区三级联动"></a>省市区三级联动</h2><p>下载地址：<a href="https://code.google.com/p/android-wheel/" target="_blank" rel="external">https://code.google.com/p/android-wheel/</a>自备梯子</p>
<blockquote>
<ul>
<li>效果图<br><img src="http://img.blog.csdn.net/20161009183700341" alt="三级联动"></li>
</ul>
</blockquote>
<p>如果想更改样式需要更改源码</p>
<h2 id="单级滚动"><a href="#单级滚动" class="headerlink" title="单级滚动"></a>单级滚动</h2><p>把下载好的做为module导入项目，并添加依赖</p>
<p><img src="http://img.blog.csdn.net/20161009184021852" alt="这里写图片描述"><br>这样就可以像使用普通控件一样使用了</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">kankan.wheel.widget.WheelView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/wheelviewTimer"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<h3 id="Activty"><a href="#Activty" class="headerlink" title="Activty"></a>Activty</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mWheelViewTimer = (WheelView) findViewById(R.id.wheelviewTimer);</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">24</span> ; i++) &#123;</div><div class="line">          mDatas.add(i+<span class="string">""</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">//设置可以见的条目数量， 上中下</span></div><div class="line">      mWheelViewTimer.setVisibleItems(<span class="number">5</span>);</div><div class="line"></div><div class="line"></div><div class="line">      <span class="comment">//设置适配器</span></div><div class="line">      mTimerAdapter = <span class="keyword">new</span> TimerAdapter(<span class="keyword">this</span>,mDatas);</div><div class="line"></div><div class="line">      mWheelViewTimer.setViewAdapter(mTimerAdapter);</div><div class="line"></div><div class="line">      <span class="comment">//放在最后面 设置当前显示的</span></div><div class="line">      mWheelViewTimer.setCurrentItem(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p>感觉和ListView有没有一点像呢,都是要设置适配器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class TimerAdapter extends AbstractWheelTextAdapter &#123;</div><div class="line"></div><div class="line"></div><div class="line">    List&lt;String&gt; mDatas;</div><div class="line">    Context      mContext;</div><div class="line"> </div><div class="line"></div><div class="line">    public TimerAdapter(Context context, List&lt;String&gt; datas) &#123;</div><div class="line"></div><div class="line">        super(context, R.layout.item_time, NO_RESOURCE);</div><div class="line"></div><div class="line">        mContext = context;</div><div class="line">        mDatas = datas;</div><div class="line">        setItemTextResource(R.id.time);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected CharSequence getItemText(int index) &#123;</div><div class="line">        return mDatas.get(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemsCount() &#123;</div><div class="line">        return mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getItem(int index, View convertView, ViewGroup parent) &#123;</div><div class="line"></div><div class="line">        View view = super.getItem(index, convertView, parent);</div><div class="line"></div><div class="line">        return view;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这样就完成了，一个滚动<br><img src="http://img.blog.csdn.net/20161009184515111" alt="这里写图片描述"></p>
<h2 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h2><p>看了一级的，三级的说白了就是3个这个控件</p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;LinearLayout</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="wrap_content"</div><div class="line"></div><div class="line">    android:orientation="horizontal"&gt;</div><div class="line"></div><div class="line">    &lt;kankan.wheel.widget.WheelView</div><div class="line">        android:id="@+id/province"</div><div class="line">        android:layout_width="0dp"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_weight="1"</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;kankan.wheel.widget.WheelView</div><div class="line">        android:id="@+id/city"</div><div class="line">        android:layout_width="0dp"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_weight="1"</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    &lt;kankan.wheel.widget.WheelView</div><div class="line">        android:id="@+id/area"</div><div class="line">        android:layout_width="0dp"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_weight="1"</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="适配器和上面一样"><a href="#适配器和上面一样" class="headerlink" title="适配器和上面一样"></a>适配器和上面一样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class AddressTextAdapter extends AbstractWheelTextAdapter &#123;</div><div class="line">    List&lt;String&gt; mDatas;</div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    public AddressTextAdapter(Context context, List&lt;String&gt; datas) &#123;</div><div class="line">        super(context, R.layout.item_address,NO_RESOURCE);</div><div class="line">        mContext = context;</div><div class="line">        mDatas=datas;</div><div class="line">        //设置资源要显示在那个控件上</div><div class="line">        setItemTextResource(R.id.tempValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected CharSequence getItemText(int index) &#123;</div><div class="line">        return mDatas.get(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemsCount() &#123;</div><div class="line">        return mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getItem(int index, View convertView, ViewGroup parent) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        View view = super.getItem(index,convertView,parent);</div><div class="line"></div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName(int index)&#123;</div><div class="line">        return mDatas.get(index);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="Activity初始化数据"><a href="#Activity初始化数据" class="headerlink" title="Activity初始化数据"></a>Activity初始化数据</h3><ul>
<li><p>找到3个控件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mProvince = (WheelView) findViewById(R.id.province);</div><div class="line">       mCity = (WheelView) findViewById(city);</div><div class="line">       mArea = (WheelView) findViewById(R.id.area);</div></pre></td></tr></table></figure>
</li>
<li><p>初始化数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//读取文件</div><div class="line">       String str = FileUtils.readAssetsFile(this, &quot;china-city-area-zip.min.json&quot;);</div><div class="line"></div><div class="line">       Log.d(&quot;vivi&quot;, &quot;initData:  &quot; + str);</div><div class="line"></div><div class="line">       //转化为对象集合</div><div class="line">       List&lt;RegionJson&gt; datas = JSON.parseArray(str, RegionJson.class);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里的数据放在Assets目录下的json文件，读取文件，解析就OK，数据在最下面可以找到</p>
<ul>
<li><p>分类数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(RegionJson data : datas) &#123;</div><div class="line"></div><div class="line"></div><div class="line">           <span class="comment">//省</span></div><div class="line">           mProvinceList.add(data.name);</div><div class="line"></div><div class="line">           List&lt;String&gt; mCitysList    = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">           <span class="keyword">for</span>(RegionJson.ChildEntity city : data.child) &#123;</div><div class="line"></div><div class="line">               <span class="comment">//市</span></div><div class="line"></div><div class="line">               mCitysList.add(city.name);</div><div class="line">               List&lt;String&gt; mAreaList     = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">               <span class="keyword">for</span>(RegionJson.ChildEntity.ChildEntity2 area : city.child) &#123;</div><div class="line">                   <span class="comment">//区</span></div><div class="line"></div><div class="line">                   mAreaList.add(area.name);</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="comment">//市-区对该 </span></div><div class="line">               mAreaDatasMap.put(city.name,mAreaList);</div><div class="line"></div><div class="line"></div><div class="line">           &#125;</div><div class="line">           <span class="comment">//省支市对应</span></div><div class="line">           mCitisDatasMap.put(data.name,mCitysList);</div><div class="line"></div><div class="line"></div><div class="line">       &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>为三个控件设置适配器</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">        *  省</div><div class="line">        */</div><div class="line"></div><div class="line">       mProvince.setVisibleItems(<span class="number">5</span>);</div><div class="line"></div><div class="line">       mProviceAdapter = <span class="keyword">new</span> AddressTextAdapter(<span class="keyword">this</span>, mProvinceList);</div><div class="line">       mProvince.setViewAdapter(mProviceAdapter);</div><div class="line">       mProvince.setCurrentItem(<span class="number">0</span>);</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 市</div><div class="line">        */</div><div class="line">       mCity.setVisibleItems(<span class="number">5</span>);</div><div class="line"></div><div class="line">       mCityAdapter = <span class="keyword">new</span> AddressTextAdapter(<span class="keyword">this</span>, mCitisDatasMap.get(mProvinceList.get(<span class="number">0</span>)));</div><div class="line">       mCity.setViewAdapter(mCityAdapter);</div><div class="line">       mCity.setCurrentItem(<span class="number">0</span>);</div><div class="line"></div><div class="line">       <span class="comment">/**</span></div><div class="line">        * 地区</div><div class="line">        */</div><div class="line"></div><div class="line">       mArea.setVisibleItems(<span class="number">5</span>);</div><div class="line"></div><div class="line">       mAreaAdapter = <span class="keyword">new</span> AddressTextAdapter(<span class="keyword">this</span>, mAreaDatasMap.get(mCitisDatasMap.get(mProvinceList.get(<span class="number">0</span>)).get(<span class="number">0</span>)));</div><div class="line">       mArea.setViewAdapter(mAreaAdapter);</div><div class="line">       mArea.setCurrentItem(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h3 id="设置监听滚动完成里切换"><a href="#设置监听滚动完成里切换" class="headerlink" title="设置监听滚动完成里切换"></a>设置监听滚动完成里切换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initScrllListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 省滚动完成时切换 城市与地区</div><div class="line">         */</div><div class="line">        mProvince.addScrollingListener(<span class="keyword">new</span> OnWheelScrollListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollingStarted</span><span class="params">(WheelView wheel)</span> </span>&#123;</div><div class="line">                <span class="comment">//标记位-开始滚动</span></div><div class="line">                proviceScrolling =<span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollingFinished</span><span class="params">(WheelView wheel)</span> </span>&#123;</div><div class="line"></div><div class="line">                proviceScrolling =<span class="keyword">false</span>;</div><div class="line">                <span class="comment">//省滚动完成后切换市</span></div><div class="line">                updateCities(mCity,mCitisDatasMap.get(mProviceAdapter.getName(mProvince.getCurrentItem())));</div><div class="line">                <span class="comment">//更新地区</span></div><div class="line">                updateArea(mArea,mAreaDatasMap.get(mCityAdapter.getName(mCity.getCurrentItem())));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 市滚动 完成时切换地区</div><div class="line">         */</div><div class="line">        mCity.addScrollingListener(<span class="keyword">new</span> OnWheelScrollListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollingStarted</span><span class="params">(WheelView wheel)</span> </span>&#123;</div><div class="line">                <span class="comment">//标记位-开始滚动</span></div><div class="line">                cityScrolling=<span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollingFinished</span><span class="params">(WheelView wheel)</span> </span>&#123;</div><div class="line">                cityScrolling =<span class="keyword">false</span>;</div><div class="line"></div><div class="line"></div><div class="line">                <span class="comment">//市滚动完成后切换</span></div><div class="line">               updateArea(mArea,mAreaDatasMap.get(mCityAdapter.getName(mCity.getCurrentItem())));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样就基本完成了</p>
<h3 id="完善滚动中时也可以切换"><a href="#完善滚动中时也可以切换" class="headerlink" title="完善滚动中时也可以切换"></a>完善滚动中时也可以切换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">      * 省滚动中切换市</div><div class="line">      */</div><div class="line">     mProvince.addChangingListener(<span class="keyword">new</span> OnWheelChangedListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(WheelView wheel, <span class="keyword">int</span> oldValue, <span class="keyword">int</span> newValue)</span> </span>&#123;</div><div class="line"></div><div class="line">             <span class="comment">//省在滚动</span></div><div class="line">             <span class="keyword">if</span>(proviceScrolling)&#123;</div><div class="line">                 <span class="comment">//更新城市</span></div><div class="line">                 updateCities(mCity,mCitisDatasMap.get(mProviceAdapter.getName(newValue)));</div><div class="line"></div><div class="line">                     <span class="comment">//更新地区</span></div><div class="line">                     updateArea(mArea,mAreaDatasMap.get(mCityAdapter.getName(mCity.getCurrentItem())));</div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">     &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mCity.addChangingListener(new OnWheelChangedListener() &#123;</div><div class="line">          @Override</div><div class="line">          public void onChanged(WheelView wheel, int oldValue, int newValue) &#123;</div><div class="line"></div><div class="line">              if(cityScrolling)&#123;</div><div class="line">                  updateArea(mArea,mAreaDatasMap.get(mCityAdapter.getName(newValue)));</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h3 id="更新数据的2个方法"><a href="#更新数据的2个方法" class="headerlink" title="更新数据的2个方法"></a>更新数据的2个方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    /**</div><div class="line">     * 切换城市</div><div class="line">     */</div><div class="line">    private void updateCities(WheelView city, List&lt;String&gt; cities) &#123;</div><div class="line"></div><div class="line">        mCityAdapter = new AddressTextAdapter(this,cities);</div><div class="line"></div><div class="line">        city.setViewAdapter(mCityAdapter);</div><div class="line">        city.setCurrentItem(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">----------</div><div class="line"> private void updateArea(WheelView area,List&lt;String&gt; areas)&#123;</div><div class="line">       mAreaAdapter= new AddressTextAdapter(this,areas);</div><div class="line"></div><div class="line">        area.setViewAdapter(mAreaAdapter);</div><div class="line">        area.setCurrentItem(0);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>源码：<a href="https://github.com/ln0491/WheelDemo" target="_blank" rel="external">https://github.com/ln0491/WheelDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;省市区三级联动&quot;&gt;&lt;a href=&quot;#省市区三级联动&quot; class=&quot;headerlink&quot; title=&quot;省市区三级联动&quot;&gt;&lt;/a&gt;省市区三级联动&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;https://code.google.com/p/android-wh
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://ln0491.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>viewpager自动滚动</title>
    <link href="https://ln0491.github.io/2016/10/08/viewpager%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8/"/>
    <id>https://ln0491.github.io/2016/10/08/viewpager自动滚动/</id>
    <published>2016-10-08T05:15:53.000Z</published>
    <updated>2016-10-08T07:10:54.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="viewpager自动滚动"><a href="#viewpager自动滚动" class="headerlink" title="viewpager自动滚动"></a>viewpager自动滚动</h1><h3 id="先写一个普通的Viewpager"><a href="#先写一个普通的Viewpager" class="headerlink" title="先写一个普通的Viewpager"></a>先写一个普通的Viewpager</h3><p>参考<br>基本使用<a href="https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/">https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</a></p>
<p>添加指示器<br><a href="https://ln0491.github.io/2016/10/08/ViewPager%E6%B7%BB%E5%8A%A0%E6%8C%87%E7%A4%BA%E5%99%A8/">https://ln0491.github.io/2016/10/08/ViewPager%E6%B7%BB%E5%8A%A0%E6%8C%87%E7%A4%BA%E5%99%A8/</a></p>
<p>布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:id=&quot;@+id/activity_main&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;@android:color/holo_blue_dark&quot;</div><div class="line">    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;</div><div class="line">    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;</div><div class="line">    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;</div><div class="line">    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;</div><div class="line">    tools:context=&quot;com.liu.viewpagerdemo.ui.MainActivity&quot;&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;200dp&quot;</div><div class="line">        android:layout_marginTop=&quot;20dp&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v4.view.ViewPager</div><div class="line">            android:id=&quot;@+id/viewPagerAuto&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;200dp&quot;&gt;</div><div class="line"></div><div class="line">        &lt;/android.support.v4.view.ViewPager&gt;</div><div class="line">        &lt;!-- 指示点 --&gt;</div><div class="line">        &lt;LinearLayout</div><div class="line">            android:id=&quot;@+id/dotsLayout&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:layout_alignParentBottom=&quot;true&quot;</div><div class="line">            android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">            android:layout_marginBottom=&quot;10dp&quot;</div><div class="line">            android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">       </div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="适合器与Activity代码"><a href="#适合器与Activity代码" class="headerlink" title="适合器与Activity代码"></a>适合器与Activity代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * @Description: 广告viewpager适配器</div><div class="line"> * @AUTHOR 刘楠  Create By 2016/10/8 0008 11:18</div><div class="line"> */</div><div class="line">public class MainAutoViewpagerAdapter extends PagerAdapter &#123;</div><div class="line"></div><div class="line">    private Context mContext;</div><div class="line">    private List&lt;Integer&gt; mDatas;</div><div class="line"></div><div class="line">    public MainAutoViewpagerAdapter(Context context, List&lt;Integer&gt; datas) &#123;</div><div class="line">        mContext = context;</div><div class="line">        mDatas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isViewFromObject(View view, Object object) &#123;</div><div class="line">        return view==object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object instantiateItem(ViewGroup container, int position) &#123;</div><div class="line"></div><div class="line">        ImageView imageView = new ImageView(mContext);</div><div class="line"></div><div class="line">        imageView.setImageResource(mDatas.get(position));</div><div class="line"></div><div class="line">        imageView.setScaleType(ImageView.ScaleType.FIT_XY);</div><div class="line"></div><div class="line"></div><div class="line">        container.addView(imageView);</div><div class="line"></div><div class="line"></div><div class="line">        return imageView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void destroyItem(ViewGroup container, int position, Object object) &#123;</div><div class="line">        container.removeView((View) object);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Activity</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">private void initView() &#123;</div><div class="line"></div><div class="line">       mAutoViewPager = (ViewPager) findViewById(R.id.viewPagerAuto);</div><div class="line">       mDotsLayout = (LinearLayout) findViewById(R.id.dotsLayout);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private void initData() &#123;</div><div class="line">       //添加图片资源</div><div class="line">       mDatas.add(R.mipmap.img_home_banner1);</div><div class="line">       mDatas.add(R.mipmap.img_home_banner2);</div><div class="line">       mDatas.add(R.mipmap.img_home_banner3);</div><div class="line">       mDatas.add(R.mipmap.img_home_banner4);</div><div class="line">       //初始化ViewPager</div><div class="line">       initViewPager();</div><div class="line">       initDots();</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   private void initViewPager() &#123;</div><div class="line">       mMainAutoViewpagerAdapter = new MainAutoViewpagerAdapter(this,mDatas);</div><div class="line"></div><div class="line">       mAutoViewPager.setAdapter(mMainAutoViewpagerAdapter);</div><div class="line">       mAutoViewPager.setPageTransformer(true,new DepthPageTransformer());</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private void initDots() &#123;</div><div class="line">       mDotParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line"></div><div class="line">       mDotParams.rightMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics());</div><div class="line"></div><div class="line"></div><div class="line">       for(int i = 0; i &lt; mDatas.size(); i++) &#123;</div><div class="line"></div><div class="line">           ImageView imageView = new ImageView(this);</div><div class="line">           imageView.setImageResource(R.drawable.dot_selector);</div><div class="line"></div><div class="line">           imageView.setSelected(false);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">           //添加到容器</div><div class="line">           mDotsLayout.addView(imageView,mDotParams);</div><div class="line"></div><div class="line">           dots.add(imageView);</div><div class="line"></div><div class="line">       &#125;</div><div class="line">       dots.get(0).setSelected(true);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private void initListener() &#123;</div><div class="line"></div><div class="line">       initViewPagerListener();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private void initViewPagerListener() &#123;</div><div class="line"></div><div class="line">       mAutoViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</div><div class="line">           @Override</div><div class="line">           public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onPageSelected(int position) &#123;</div><div class="line"></div><div class="line">               dots.get(mCurrPageIndex %mDatas.size()).setSelected(false);</div><div class="line">               mCurrPageIndex =position;</div><div class="line">               dots.get(mCurrPageIndex %mDatas.size()).setSelected(true);</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onPageScrollStateChanged(int state) &#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这样可以基本的Viewpager+指示器的使用</p>
<h3 id="左右无限滑动"><a href="#左右无限滑动" class="headerlink" title="左右无限滑动"></a>左右无限滑动</h3><p>目前还不能无限滑动，适配器中返回的大不是数据的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Override</div><div class="line">public int getCount() &#123;</div><div class="line">    return mDatas.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更改为无限大<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Override</div><div class="line">public int getCount() &#123;</div><div class="line">   // return mDatas.size();</div><div class="line">    return Integer.MAX_VALUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改变初始化设置</p>
<p>//最余不然会下越界<br><strong>imageView.setImageResource(mDatas.get(position%mDatas.size()));</strong></p>
<p>这样貌似可以无限向左滑动，但向右滑动还不行,设置返因的数据量为一半<br>改变Activiy中初始化的值</p>
<pre><code>//当前的位置放大1000倍，
mCurrPageIndex = mDatas.size()*1000;
</code></pre><p>这样就可以左右无限滑动</p>
<p><img src="https://ln0491.github.io/img/vpmax.gif" alt="vpmax.gif"></p>
<h3 id="无限滚动"><a href="#无限滚动" class="headerlink" title="无限滚动"></a>无限滚动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 自动滚动任务</div><div class="line">    */</div><div class="line">   private class AutoScrollTask implements Runnable&#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">       //开始任务</div><div class="line">       public void start()&#123;</div><div class="line"></div><div class="line">           //先移除</div><div class="line">        stop();</div><div class="line">           //再开始</div><div class="line">           mHandler.postDelayed(this,5000);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       @Override</div><div class="line">       public void run() &#123;</div><div class="line"></div><div class="line">           // 完成viewpager的切换</div><div class="line">           int currentItem = mAutoViewPager.getCurrentItem();</div><div class="line">           //判断是不是最后一个</div><div class="line">           if(currentItem==mAutoViewPager.getAdapter().getCount()-1)&#123;</div><div class="line">               currentItem=0;</div><div class="line">           &#125;else &#123;</div><div class="line">               currentItem++;</div><div class="line">           &#125;</div><div class="line">           //设置当前要显示的</div><div class="line">           //mAutoViewPager.setCurrentItem(currentItem,true);</div><div class="line">           mAutoViewPager.setCurrentItem(currentItem);</div><div class="line"></div><div class="line">           start();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       /**</div><div class="line">        * 停止任务</div><div class="line">        */</div><div class="line">       public void stop()&#123;</div><div class="line">          </div><div class="line">           //停止任务 不滚动</div><div class="line">           mHandler.removeCallbacks(this);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>开启任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void initTask() &#123;</div><div class="line"></div><div class="line">       mAutoScrollTask = new AutoScrollTask();</div><div class="line">       mAutoScrollTask.start();</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="按下时，停止，抬起时继续"><a href="#按下时，停止，抬起时继续" class="headerlink" title="按下时，停止，抬起时继续"></a>按下时，停止，抬起时继续</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">private void initViewPagerTouchEvent() &#123;</div><div class="line"></div><div class="line">       mAutoViewPager.setOnTouchListener(new View.OnTouchListener() &#123;</div><div class="line">           @Override</div><div class="line">           public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line"></div><div class="line"></div><div class="line">               switch(event.getAction())&#123;</div><div class="line">                   case MotionEvent.ACTION_DOWN:</div><div class="line">                       //按下时--停止</div><div class="line">                       mAutoScrollTask.stop();</div><div class="line"></div><div class="line">                       break;</div><div class="line"></div><div class="line">                   case MotionEvent.ACTION_MOVE:</div><div class="line">                       //移动时</div><div class="line">                       break;</div><div class="line">                   case MotionEvent.ACTION_UP:</div><div class="line">                       //抬起时-开始</div><div class="line">                       mAutoScrollTask.start();</div><div class="line">                       break;</div><div class="line">                   case MotionEvent.ACTION_CANCEL:</div><div class="line">                       mAutoScrollTask.stop();</div><div class="line">                       break;</div><div class="line">                   default:</div><div class="line">                       break;</div><div class="line">               &#125;</div><div class="line"></div><div class="line"></div><div class="line">               return false;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><img src="https://ln0491.github.io/img/vpauto.gif" alt="vpauto.gif"></p>
<h3 id="第二种实现自动滚动方式-使用Handler发送消息"><a href="#第二种实现自动滚动方式-使用Handler发送消息" class="headerlink" title="第二种实现自动滚动方式 使用Handler发送消息"></a>第二种实现自动滚动方式 使用Handler发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态内部类</div><div class="line"> * 防止内在泄漏</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    WeakReference&lt;MainActivity2&gt; mWeakReference;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(MainActivity2 activity2)</span> </span>&#123;</div><div class="line">        mWeakReference = <span class="keyword">new</span> WeakReference&lt;MainActivity2&gt;(activity2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="comment">//super.handleMessage(msg);</span></div><div class="line">        <span class="keyword">if</span>(msg.what != <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        MainActivity2 mainActivity2 = mWeakReference.get();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">int</span> currentItem = mainActivity2.mAutoViewPager.getCurrentItem();</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(currentItem == mainActivity2.mAutoViewPager.getAdapter().getCount() - <span class="number">1</span>) &#123;</div><div class="line">            currentItem = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            currentItem++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mainActivity2.mAutoViewPager.setCurrentItem(currentItem);</div><div class="line"></div><div class="line">        <span class="comment">//循环发送</span></div><div class="line">        Message msg2 = Message.obtain();</div><div class="line">        msg2.what = <span class="number">1</span>;</div><div class="line">        sendMessageDelayed(msg2, <span class="number">5000</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 开始播放</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAutoScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">    Message msg = Message.obtain();</div><div class="line">    msg.what = <span class="number">1</span>;</div><div class="line">    mHandler.sendMessageDelayed(msg, <span class="number">5000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 停止播放</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 清除所有消息 handleMessage就不能执行</span></div><div class="line">    mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);<span class="comment">//</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">    <span class="comment">//可见时就循环播放</span></div><div class="line">    startAutoScroll();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">    <span class="comment">//不可见时就停止播放</span></div><div class="line">    stopScroll();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码<br><a href="https://github.com/ln0491/ViewPagerDemo" target="_blank" rel="external">https://github.com/ln0491/ViewPagerDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;viewpager自动滚动&quot;&gt;&lt;a href=&quot;#viewpager自动滚动&quot; class=&quot;headerlink&quot; title=&quot;viewpager自动滚动&quot;&gt;&lt;/a&gt;viewpager自动滚动&lt;/h1&gt;&lt;h3 id=&quot;先写一个普通的Viewpager&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="viewpager" scheme="https://ln0491.github.io/tags/viewpager/"/>
    
  </entry>
  
  <entry>
    <title>viewpager在最后一页滑动之后跳转到主页面.</title>
    <link href="https://ln0491.github.io/2016/10/08/viewpager%E5%9C%A8%E6%9C%80%E5%90%8E%E4%B8%80%E9%A1%B5%E6%BB%91%E5%8A%A8%E4%B9%8B%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%BB%E9%A1%B5%E9%9D%A2/"/>
    <id>https://ln0491.github.io/2016/10/08/viewpager在最后一页滑动之后跳转到主页面/</id>
    <published>2016-10-08T03:03:59.000Z</published>
    <updated>2016-10-08T05:20:05.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="viewpager在最后一页滑动之后跳转到主页面"><a href="#viewpager在最后一页滑动之后跳转到主页面" class="headerlink" title="viewpager在最后一页滑动之后跳转到主页面"></a>viewpager在最后一页滑动之后跳转到主页面</h2><h3 id="添加切换监听器"><a href="#添加切换监听器" class="headerlink" title="添加切换监听器"></a>添加切换监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</div><div class="line">			//判断是不是要跳转下页一个标记位</div><div class="line">            private boolean flag;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</div><div class="line">             </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageSelected(int position) &#123;</div><div class="line">            </div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageScrollStateChanged(int state) &#123;</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="在onPageScrollStateChanged方法中判断是不是最后一个，同是是不是拖放状态"><a href="#在onPageScrollStateChanged方法中判断是不是最后一个，同是是不是拖放状态" class="headerlink" title="在onPageScrollStateChanged方法中判断是不是最后一个，同是是不是拖放状态"></a>在onPageScrollStateChanged方法中判断是不是最后一个，同是是不是拖放状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">         public void onPageScrollStateChanged(int state) &#123;</div><div class="line"></div><div class="line">             Log.d(&quot;vivi&quot;, &quot;onPageScrollStateChanged: &quot; + state);</div><div class="line">             switch(state) &#123;</div><div class="line">                 case ViewPager.SCROLL_STATE_DRAGGING:</div><div class="line">                     //拖的时候才进入下一页</div><div class="line">                     flag = false;</div><div class="line">                     Log.d(&quot;vivi&quot;, &quot;SCROLL_STATE_DRAGGING: &quot; + ViewPager.SCROLL_STATE_DRAGGING);</div><div class="line"></div><div class="line">                     break;</div><div class="line">                 case ViewPager.SCROLL_STATE_SETTLING:</div><div class="line">                     flag = true;</div><div class="line">                     Log.d(&quot;vivi&quot;, &quot;SCROLL_STATE_SETTLING: &quot; + ViewPager.SCROLL_STATE_SETTLING);</div><div class="line">                     break;</div><div class="line"></div><div class="line"></div><div class="line">                 case ViewPager.SCROLL_STATE_IDLE:</div><div class="line">                     Log.d(&quot;vivi&quot;, &quot;SCROLL_STATE_IDLE: &quot; + ViewPager.SCROLL_STATE_IDLE+&quot;  mViewPager.getCurrentItem() &quot;+mViewPager.getCurrentItem());</div><div class="line">                     /**</div><div class="line">                      * 判断是不是最后一页，同是是不是拖的状态</div><div class="line">                      */</div><div class="line">                     if(mViewPager.getCurrentItem() == mWelcomeViewpagerAdapter.getCount() - 1 &amp;&amp; !flag) &#123;</div><div class="line">                         Intent localIntent = new Intent();</div><div class="line"></div><div class="line">                         localIntent.setClass(WelcomeActivity.this, MainActivity.class);</div><div class="line">                         startActivity(localIntent);</div><div class="line">                         // overridePendingTransition(0, 0);</div><div class="line">                         finish();</div><div class="line">                     &#125;</div><div class="line">                     flag = true;</div><div class="line"></div><div class="line">                     break;</div><div class="line">             &#125;</div></pre></td></tr></table></figure>
<p>源码<br><a href="https://github.com/ln0491/ViewPagerDemo" target="_blank" rel="external">https://github.com/ln0491/ViewPagerDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;viewpager在最后一页滑动之后跳转到主页面&quot;&gt;&lt;a href=&quot;#viewpager在最后一页滑动之后跳转到主页面&quot; class=&quot;headerlink&quot; title=&quot;viewpager在最后一页滑动之后跳转到主页面&quot;&gt;&lt;/a&gt;viewpager在最后一页
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="viewpager" scheme="https://ln0491.github.io/tags/viewpager/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager添加指示器</title>
    <link href="https://ln0491.github.io/2016/10/08/ViewPager%E6%B7%BB%E5%8A%A0%E6%8C%87%E7%A4%BA%E5%99%A8/"/>
    <id>https://ln0491.github.io/2016/10/08/ViewPager添加指示器/</id>
    <published>2016-10-08T02:08:50.000Z</published>
    <updated>2016-10-08T05:19:54.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewPager添加指示器"><a href="#ViewPager添加指示器" class="headerlink" title="ViewPager添加指示器"></a>ViewPager添加指示器</h2><p>接着基本使用的例子<br>基本使用<a href="https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/">https://ln0491.github.io/2016/09/29/ViewPager%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</a></p>
<h3 id="布局中添加存放揭示器的容器"><a href="#布局中添加存放揭示器的容器" class="headerlink" title="布局中添加存放揭示器的容器"></a>布局中添加存放揭示器的容器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">   存放指示器的容器</div><div class="line">   --&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/llLayoutDots"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">       <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">       <span class="attr">android:layout_marginBottom</span>=<span class="string">"20dp"</span></div><div class="line">       <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Activity中"><a href="#Activity中" class="headerlink" title="Activity中"></a>Activity中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//dots容器</div><div class="line">   private LinearLayout mLlLayoutDots;</div><div class="line">//指示器布局参数</div><div class="line">   private LinearLayout.LayoutParams mDotParams;</div><div class="line"></div><div class="line">   //指示器容器列表</div><div class="line">   private List&lt;ImageView&gt; dots = new ArrayList&lt;ImageView&gt;();</div><div class="line">   //当前索引</div><div class="line">   private int currPageIndex;</div></pre></td></tr></table></figure>
<h3 id="初始化指示器"><a href="#初始化指示器" class="headerlink" title="初始化指示器"></a>初始化指示器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">private void initDots() &#123;</div><div class="line">       mDotParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line"></div><div class="line">       mDotParams.rightMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 10, getResources().getDisplayMetrics());</div><div class="line"></div><div class="line">       //根据viewpager 的数据去添加指示器</div><div class="line">       for(int i = 0; i &lt; mDatas.size(); i++) &#123;</div><div class="line"></div><div class="line">           ImageView imageView = new ImageView(getApplicationContext());</div><div class="line"></div><div class="line">           //添加背景 选择器</div><div class="line">           //imageView.setBackgroundResource(R.drawable.dot_selector);</div><div class="line">           //添加图片选择器</div><div class="line">           imageView.setImageResource(R.drawable.dot_selector);</div><div class="line"></div><div class="line">           //默认为不选择灰色</div><div class="line"></div><div class="line">           imageView.setSelected(false);</div><div class="line"></div><div class="line">           //添加到dot容器</div><div class="line">           mLlLayoutDots.addView(imageView, mDotParams);</div><div class="line"></div><div class="line">           dots.add(imageView);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       //设置第一个为选择状态</div><div class="line">       dots.get(0).setSelected(true);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="viewpager设置监听"><a href="#viewpager设置监听" class="headerlink" title="viewpager设置监听"></a>viewpager设置监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">private void initViewPagerListener() &#123;</div><div class="line"></div><div class="line"></div><div class="line">        mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</div><div class="line">                Log.d(&quot;vivi&quot;, &quot;onPageScrolled:  position    &quot; + position + &quot;   positionOffset   &quot; + positionOffset + &quot;  positionOffsetPixels &quot; + positionOffsetPixels);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageSelected(int position) &#123;</div><div class="line">               /* int childCount = mLlLayoutDots.getChildCount();</div><div class="line"></div><div class="line">                for(int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">                    if(i == position) &#123;</div><div class="line">                        mLlLayoutDots.getChildAt(i).setSelected(true);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        mLlLayoutDots.getChildAt(i).setSelected(false);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;*/</div><div class="line"></div><div class="line">                //旧点不亮</div><div class="line">                dots.get(currPageIndex%mDatas.size()).setSelected(false);</div><div class="line">                //设置新的点</div><div class="line">                currPageIndex=position;</div><div class="line">                //新点亮起来</div><div class="line">                dots.get(currPageIndex%mDatas.size()).setSelected(true);</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onPageScrollStateChanged(int state) &#123;</div><div class="line"></div><div class="line">                Log.d(&quot;vivi&quot;, &quot;onPageScrollStateChanged: &quot; + state);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://ln0491.github.io/img/vpdots.gif" alt="vpdots.gif"></p>
<p>源码<br><a href="https://github.com/ln0491/ViewPagerDemo" target="_blank" rel="external">https://github.com/ln0491/ViewPagerDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ViewPager添加指示器&quot;&gt;&lt;a href=&quot;#ViewPager添加指示器&quot; class=&quot;headerlink&quot; title=&quot;ViewPager添加指示器&quot;&gt;&lt;/a&gt;ViewPager添加指示器&lt;/h2&gt;&lt;p&gt;接着基本使用的例子&lt;br&gt;基本使用&lt;a hr
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="viewpager" scheme="https://ln0491.github.io/tags/viewpager/"/>
    
  </entry>
  
</feed>
