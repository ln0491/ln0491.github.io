<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘楠的博客</title>
  <subtitle>热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ln0491.github.io/"/>
  <updated>2016-11-11T02:15:03.735Z</updated>
  <id>https://ln0491.github.io/</id>
  
  <author>
    <name>Liu Nan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android中帧动画</title>
    <link href="https://ln0491.github.io/2016/11/11/Android%E4%B8%AD%E5%B8%A7%E5%8A%A8%E7%94%BB/"/>
    <id>https://ln0491.github.io/2016/11/11/Android中帧动画/</id>
    <published>2016-11-11T02:02:53.000Z</published>
    <updated>2016-11-11T02:15:03.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android中帧动画"><a href="#Android中帧动画" class="headerlink" title="Android中帧动画"></a>Android中帧动画</h3><h4 id="Android中的逐帧动画"><a href="#Android中的逐帧动画" class="headerlink" title="Android中的逐帧动画"></a>Android中的逐帧动画</h4><p>，逐帧动画是一种常见的动画形式（Frame By Frame），其原理是在“连续的关键帧”中分解动画动作，也就是在时间轴的每帧上逐帧绘制不同的内容，使其连续播放而成动画。 因为逐帧动画的帧序列内容不一样，不但给制作增加了负担而且最终输出的文件量也很大，但它的优势也很明显：逐帧动画具有非常大的灵活性，几乎可以表现任何想表现的内容，而它类似与电影的播放模式，很适合于表演细腻的动画。</p>
<p>在Android中逐帧动画需要得到AnimationDrawable类的支持，它位于”android.graphics.drawable.AnimationDrawable”包下，是Drawable的间接子类。它主要用来创建一个逐帧动画，并且可以对帧进行拉伸，把它设置为View的背景即可使用AnimationDrawable.start()方法播放。既然逐帧动画是需要播放一帧一帧的图像，所以需要为其添加帧。在Android中提供了两种方式为AnimationDrawable添加帧：XML定义的资源文件和Java代码创建，后面再详细讲讲这两种添加帧的方式。</p>
<p>光为AnimationDrawable设置帧还不能完成播放动画的功能，还需要AnimationDrawable定义好的其他的一些方法来操作逐帧动画，下面简单介绍一下AnimationDrawable的常用方法：</p>
<ul>
<li>void start()：开始播放逐帧动画。</li>
<li>void stop()：停止播放逐帧动画。</li>
<li>void addFrame(Drawable frame,int duration)：为AnimationDrawable添加一帧，并设置持续时间。</li>
<li>int getDuration(int i)：得到指定index的帧的持续时间。</li>
<li>Drawable getFrame(int index)：得到指定index的帧Drawable。</li>
<li>int getNumberOfFrames()：得到当前AnimationDrawable的所有帧数量。</li>
<li>boolean isOneShot()：当前AnimationDrawable是否执行一次，返回true执行一次，false循环播放。</li>
<li>boolean isRunning()：当前AnimationDrawable是否正在播放。</li>
<li>void setOneShot(boolean oneShot)：设置AnimationDrawable是否执行一次，true执行一次，false循环播放</li>
</ul>
<h4 id="在代码中设置帧动画"><a href="#在代码中设置帧动画" class="headerlink" title="在代码中设置帧动画"></a>在代码中设置帧动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 为AnimationDrawable添加动画帧</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_01),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_02),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_03),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_04),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_05),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_06),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_07),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_08),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_09),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_10),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_11),100);</div><div class="line">       mCodeAd.addFrame(getResources().getDrawable(R.drawable.loading_img_12),100);</div><div class="line">       //循环播放</div><div class="line">       mCodeAd.setOneShot(false);</div><div class="line">       //设置背景</div><div class="line">       mIvCode.setBackgroundDrawable(mCodeAd);</div></pre></td></tr></table></figure>
<p>播放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void startCode() &#123;</div><div class="line"></div><div class="line">       if(mCodeAd!=null &amp;&amp; !mCodeAd.isRunning())&#123;</div><div class="line">           mCodeAd.start();</div><div class="line">       &#125;else if(mCodeAd!=null &amp;&amp; mCodeAd.isRunning()) &#123;</div><div class="line">           mCodeAd.stop();</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h4 id="在XML中设置帧动画"><a href="#在XML中设置帧动画" class="headerlink" title="在XML中设置帧动画"></a>在XML中设置帧动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:oneshot=&quot;false&quot;&gt;</div><div class="line">&lt;!--定义一个帧动画播放时间为100ms--&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_01&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_02&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_03&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_04&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_05&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_06&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_07&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_08&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_09&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_10&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_11&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/loading_img_12&quot; android:duration=&quot;100&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/animation-list&gt;</div></pre></td></tr></table></figure>
<p>代码中使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void initXMLFram() &#123;</div><div class="line"></div><div class="line">       mXmlAD = (AnimationDrawable) getResources().getDrawable(R.drawable.loading);</div><div class="line">       //为Image设置背景</div><div class="line">       mIvXML.setBackgroundDrawable(mXmlAD);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>播放</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void startXML() &#123;</div><div class="line">        if(mXmlAD!=null &amp;&amp; !mXmlAD.isRunning())&#123;</div><div class="line">            mXmlAD.start();</div><div class="line">        &#125;else if(mXmlAD!=null &amp;&amp; mXmlAD.isRunning()) &#123;</div><div class="line">            mXmlAD.stop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>源码<br><a href="https://github.com/ln0491/DrawableAnimation" target="_blank" rel="external">https://github.com/ln0491/DrawableAnimation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android中帧动画&quot;&gt;&lt;a href=&quot;#Android中帧动画&quot; class=&quot;headerlink&quot; title=&quot;Android中帧动画&quot;&gt;&lt;/a&gt;Android中帧动画&lt;/h3&gt;&lt;h4 id=&quot;Android中的逐帧动画&quot;&gt;&lt;a href=&quot;#Andr
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="动画" scheme="https://ln0491.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>初识View</title>
    <link href="https://ln0491.github.io/2016/11/10/%E5%88%9D%E8%AF%86View/"/>
    <id>https://ln0491.github.io/2016/11/10/初识View/</id>
    <published>2016-11-10T05:39:05.000Z</published>
    <updated>2016-11-10T07:52:49.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识View及一些工具类"><a href="#初识View及一些工具类" class="headerlink" title="初识View及一些工具类"></a>初识View及一些工具类</h3><h4 id="什么是View"><a href="#什么是View" class="headerlink" title="什么是View?"></a>什么是View?</h4><p>View是Android中所有控件的基类，如Button，TextView 或者Relativelayout，ListView的共同的基类也就是父类<br>除了View还是ViewGroup，ViewGroup也继承了View。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public abstract class ViewGroup extends View</div></pre></td></tr></table></figure></p>
<p>View可以是一个单独的控件，也可能是一个控件组包含多个子View</p>
<h4 id="View的参数坐标"><a href="#View的参数坐标" class="headerlink" title="View的参数坐标"></a>View的参数坐标</h4><p>View的位置主要是由View的4个坐标来顶点来决定的</p>
<ul>
<li>letf:     左上角x轴坐标</li>
<li>top:        左上角y轴坐标</li>
<li>right:    右下角x轴坐标</li>
<li>bottom:    右下角y轴坐标</li>
</ul>
<p><img src="https://ln0491.github.io/img/view坐标.png" alt="view坐标.png"></p>
<p>宽度: width=right-left<br>高度：height=bottom-top</p>
<h4 id="获取参数坐标"><a href="#获取参数坐标" class="headerlink" title="获取参数坐标"></a>获取参数坐标</h4><ul>
<li>left = getLeft()</li>
<li>top = getTop()</li>
<li>right = getRight()</li>
<li>bottom = getBottom()</li>
</ul>
<p>设置也量样有setXxxx方法</p>
<h4 id="新的参数"><a href="#新的参数" class="headerlink" title="新的参数"></a>新的参数</h4><p>3.0后<br>x,y,translationX,translationY</p>
<ul>
<li>x,y是View左上角的坐标</li>
<li>translationX,translationY 是View左上角相对于父容器的偏移量，默认为0</li>
</ul>
<p>一样有set/get方法</p>
<p>换算关系</p>
<p>x = left +translationX<br>y= top+translationY</p>
<p>View在平移过程中,top与left 表示的是原始左上角的位置信息，不会发生改变<br>此时发生改变的是x,y,translationX,translationY这4个参数</p>
<h4 id="MotionEvent和TouchSlop"><a href="#MotionEvent和TouchSlop" class="headerlink" title="MotionEvent和TouchSlop"></a>MotionEvent和TouchSlop</h4><h5 id="MotionEvent"><a href="#MotionEvent" class="headerlink" title="MotionEvent"></a>MotionEvent</h5><p>在手指接触屏幕后的一系列事件如：</p>
<p>ACTION_DOWN:手指刚接触屏幕 按下</p>
<p>ACTION_MOVE:手指在屏幕上移动</p>
<p>ACTION_UP:手机离开屏幕的一瞬间</p>
<blockquote>
<p>得到点击事件的x,y</p>
</blockquote>
<ul>
<li>getX/getY</li>
</ul>
<p>返回相对于当前View左上角的X和Y</p>
<ul>
<li>getRawX/getRawY</li>
</ul>
<p>返回相对于手机屏幕左上角的X，y</p>
<h5 id="TouchSlop"><a href="#TouchSlop" class="headerlink" title="TouchSlop"></a>TouchSlop</h5><p>是系统所能识别出的被认为是滑动的最小距离，当手指在屏幕上滑动时，如果2次滑动之间的距离小于这个常量，系统就不认为是滑动操作</p>
<p>获取方式 ViewConfiguration-工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int scaledTouchSlop = ViewConfiguration.get(getContext()).getScaledTouchSlop();</div></pre></td></tr></table></figure></p>
<p>系统给的默认值为8dp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Distance a touch can wander before we think the user is scrolling in dips.</div><div class="line">    * Note that this value defined here is only used as a fallback by legacy/misbehaving</div><div class="line">    * applications that do not provide a Context for determining density/configuration-dependent</div><div class="line">    * values.</div><div class="line">    *</div><div class="line">    * To alter this value, see the configuration resource config_viewConfigurationTouchSlop</div><div class="line">    * in frameworks/base/core/res/res/values/config.xml or the appropriate device resource overlay.</div><div class="line">    * It may be appropriate to tweak this on a device-specific basis in an overlay based on</div><div class="line">    * the characteristics of the touch panel and firmware.</div><div class="line">    */</div><div class="line">   private static final int TOUCH_SLOP = 8;</div></pre></td></tr></table></figure></p>
<p>config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;dimen name=&quot;config_viewConfigurationTouchSlop&quot;&gt;8dp&lt;/dimen&gt;</div></pre></td></tr></table></figure></p>
<h4 id="VelocityTracker-GestureDetector-和scroller"><a href="#VelocityTracker-GestureDetector-和scroller" class="headerlink" title="VelocityTracker GestureDetector 和scroller"></a>VelocityTracker GestureDetector 和scroller</h4><h5 id="VelocityTracker"><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h5><p>速度追踪：包括水平和竖直方法的速度<br>在onTouchEvent中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">       VelocityTracker velocityTracker = VelocityTracker.obtain();</div><div class="line">       velocityTracker.addMovement(event);</div><div class="line">       return super.onTouchEvent(event);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在其它需要的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">velocityTracker.computeCurrentVelocity(1000);</div><div class="line">     float xVelocity = velocityTracker.getXVelocity();</div><div class="line">     float yVelocity = velocityTracker.getYVelocity();</div></pre></td></tr></table></figure></p>
<p>需要注意的地方要先计算，才能获取到<br>不需要时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">velocityTracker.clear();</div><div class="line">     velocityTracker.recycle();</div></pre></td></tr></table></figure>
<h5 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h5><p>手势检测，用于辅助检测用户的单击，滑动，长按，双击等行力要使用GestureDetector<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   GestureDetector mGestureDetector = new GestureDetector(this);</div><div class="line">//长按不能拖动现象</div><div class="line">        mGestureDetector.setIsLongpressEnabled(false);</div></pre></td></tr></table></figure></p>
<ul>
<li>onDown 1个ACTION_DONW</li>
<li>onShowPress 由一个ACTON_DOWN触发，按下没有松开</li>
<li>onSingleTapUP:一1上ACTION_DOWN和一个ACTION_UP</li>
<li>onScroll :一个ACTION_DWON多个ACTION_MOVE组成</li>
<li>onLongPress：用户长按不放开</li>
<li>onFling: 快速滑动</li>
<li></li>
</ul>
<h5 id="scroller"><a href="#scroller" class="headerlink" title="scroller"></a>scroller</h5><p>弹性滑动，View的scrollTo与scrollBy方法来滑动，没有过渡效果，使用Scroller来实现有过渡现象的滑动<br>Scroll要与View的computeScroll结合来完成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void computeScroll() &#123;</div><div class="line">       super.computeScroll();</div><div class="line">       if(mScroller.computeScrollOffset())&#123;</div><div class="line">           scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</div><div class="line">           postInvalidate();</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private void smoothScrollTo(int destX,int destY)&#123;</div><div class="line">       int scrollX = destX;</div><div class="line">       int delta = destX-scrollX;</div><div class="line">       mScroller.startScroll(scrollX,0,delta,0,1000);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初识View及一些工具类&quot;&gt;&lt;a href=&quot;#初识View及一些工具类&quot; class=&quot;headerlink&quot; title=&quot;初识View及一些工具类&quot;&gt;&lt;/a&gt;初识View及一些工具类&lt;/h3&gt;&lt;h4 id=&quot;什么是View&quot;&gt;&lt;a href=&quot;#什么是Vie
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="View" scheme="https://ln0491.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android 欢迎页快速启动</title>
    <link href="https://ln0491.github.io/2016/11/07/Android-%E6%AC%A2%E8%BF%8E%E9%A1%B5%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8/"/>
    <id>https://ln0491.github.io/2016/11/07/Android-欢迎页快速启动/</id>
    <published>2016-11-07T09:38:21.000Z</published>
    <updated>2016-11-07T09:45:26.704Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-欢迎页快速启动"><a href="#Android-欢迎页快速启动" class="headerlink" title="Android 欢迎页快速启动"></a>Android 欢迎页快速启动</h3><p>默认情况下，Android App在点击App logo到App完全启动这之间会有一段时间空白期。那么如何做到在用户点击logo图标之后立即打开App的界面而不是一段白屏或黑屏呢？</p>
<h4 id="设置xml"><a href="#设置xml" class="headerlink" title="设置xml"></a>设置xml</h4><p>在drawable下建立welcome.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--背景色--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>  <span class="attr">android:drawable</span>=<span class="string">"@color/white"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--图片--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bitmap</span></span></div><div class="line">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/welcome_page"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="设置style"><a href="#设置style" class="headerlink" title="设置style"></a>设置style</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"WelcomeThem"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/welcome<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="清单文件中配置style"><a href="#清单文件中配置style" class="headerlink" title="清单文件中配置style"></a>清单文件中配置style</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 欢迎页 --&gt;</span></div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">           <span class="attr">android:name</span>=<span class="string">".ui.WelcomeActivity"</span></div><div class="line">           <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustNothing"</span> <span class="attr">android:theme</span>=<span class="string">"@style/WelcomeThem"</span>&gt;</div><div class="line">           <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line"></div><div class="line">               <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Activity中不需要设置setContentView"><a href="#Activity中不需要设置setContentView" class="headerlink" title="Activity中不需要设置setContentView()"></a>Activity中不需要设置setContentView()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">        startActivity(intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不需要为你的SplashActivity设置一个视图，这个视图来自于主题，在主题中为你的SplashActivity设置UI就足够了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android-欢迎页快速启动&quot;&gt;&lt;a href=&quot;#Android-欢迎页快速启动&quot; class=&quot;headerlink&quot; title=&quot;Android 欢迎页快速启动&quot;&gt;&lt;/a&gt;Android 欢迎页快速启动&lt;/h3&gt;&lt;p&gt;默认情况下，Android App在
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="android" scheme="https://ln0491.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit源码浅析</title>
    <link href="https://ln0491.github.io/2016/10/31/Retrofit%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://ln0491.github.io/2016/10/31/Retrofit源码浅析/</id>
    <published>2016-10-31T10:01:53.000Z</published>
    <updated>2016-11-01T05:59:49.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Retrofit源码浅析"><a href="#Retrofit源码浅析" class="headerlink" title="Retrofit源码浅析"></a>Retrofit源码浅析</h3><h4 id="retrofit如何为我们的接口实现实例-create方法"><a href="#retrofit如何为我们的接口实现实例-create方法" class="headerlink" title="retrofit如何为我们的接口实现实例-create方法"></a>retrofit如何为我们的接口实现实例-create方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public &lt;T&gt; T create(final Class&lt;T&gt; service) &#123;</div><div class="line">   Utils.validateServiceInterface(service);</div><div class="line">   if (validateEagerly) &#123;</div><div class="line">     eagerlyValidateMethods(service);</div><div class="line">   &#125;</div><div class="line">   return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&lt;?&gt;[] &#123; service &#125;,</div><div class="line">       new InvocationHandler() &#123;</div><div class="line">//判断平台</div><div class="line">         private final Platform platform = Platform.get();</div><div class="line"></div><div class="line">         @Override public Object invoke(Object proxy, Method method, Object... args)</div><div class="line">             throws Throwable &#123;</div><div class="line">           // If the method is a method from Object then defer to normal invocation.</div><div class="line">           if (method.getDeclaringClass() == Object.class) &#123;</div><div class="line">             return method.invoke(this, args);</div><div class="line">           &#125;</div><div class="line">           if (platform.isDefaultMethod(method)) &#123;</div><div class="line">             return platform.invokeDefaultMethod(method, service, proxy, args);</div><div class="line">           &#125;</div><div class="line">		//将方法转换为ServiceMethod</div><div class="line">           ServiceMethod serviceMethod = loadServiceMethod(method);</div><div class="line">		//创建OkHttpCall</div><div class="line">           OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);</div><div class="line">		//将okhttpcall包装</div><div class="line">           return serviceMethod.callAdapter.adapt(okHttpCall);</div><div class="line">         &#125;</div><div class="line">       &#125;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这里使用了JAVA中的动态代理</p>
<ul>
<li><p>platform-get()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">private static final Platform PLATFORM = findPlatform();</div><div class="line"></div><div class="line"> static Platform get() &#123;</div><div class="line">   return PLATFORM;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>findPlatform方法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private static Platform findPlatform() &#123;</div><div class="line">   try &#123;</div><div class="line">     Class.forName(&quot;android.os.Build&quot;);</div><div class="line">     if (Build.VERSION.SDK_INT != 0) &#123;</div><div class="line">       return new Android();</div><div class="line">     &#125;</div><div class="line">   &#125; catch (ClassNotFoundException ignored) &#123;</div><div class="line">   &#125;</div><div class="line">   try &#123;</div><div class="line">     Class.forName(&quot;java.util.Optional&quot;);</div><div class="line">     return new Java8();</div><div class="line">   &#125; catch (ClassNotFoundException ignored) &#123;</div><div class="line">   &#125;</div><div class="line">   try &#123;</div><div class="line">     Class.forName(&quot;org.robovm.apple.foundation.NSObject&quot;);</div><div class="line">     return new IOS();</div><div class="line">   &#125; catch (ClassNotFoundException ignored) &#123;</div><div class="line">   &#125;</div><div class="line">   return new Platform();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>通过反射，判断平台</p>
<ul>
<li>new Android</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static class Android extends Platform &#123;</div><div class="line">    @Override public Executor defaultCallbackExecutor() &#123;</div><div class="line">      return new MainThreadExecutor();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>创建一个主线程的线程</p>
<ul>
<li>MainThreadExecutor</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static class MainThreadExecutor implements Executor &#123;</div><div class="line">    private final Handler handler = new Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    @Override public void execute(Runnable r) &#123;</div><div class="line">      handler.post(r);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个主线程的Handler,执行post方法</p>
<p>最下面有三行代码</p>
<p>第一行是根据我们的method将其包装成ServiceMethod，<br>第二行是通过ServiceMethod和方法的参数构造retrofit2.OkHttpCall对象，<br>第三行是通过serviceMethod.callAdapter.adapt()方法，将OkHttpCall进行代理包装；</p>
<ul>
<li>构建过程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public Retrofit build() &#123;</div><div class="line">      if (baseUrl == null) &#123;</div><div class="line">        throw new IllegalStateException(&quot;Base URL required.&quot;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      okhttp3.Call.Factory callFactory = this.callFactory;</div><div class="line">      if (callFactory == null) &#123;</div><div class="line">        callFactory = new OkHttpClient();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Executor callbackExecutor = this.callbackExecutor;</div><div class="line">      if (callbackExecutor == null) &#123;</div><div class="line">        callbackExecutor = platform.defaultCallbackExecutor();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // Make a defensive copy of the adapters and add the default Call adapter.</div><div class="line">      List&lt;CallAdapter.Factory&gt; adapterFactories = new ArrayList&lt;&gt;(this.adapterFactories);</div><div class="line">      adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));</div><div class="line"></div><div class="line">      // Make a defensive copy of the converters.</div><div class="line">      List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;(this.converterFactories);</div><div class="line"></div><div class="line">      return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,</div><div class="line">          callbackExecutor, validateEagerly);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>baseUrl必需的，不然抛出异常</p>
</li>
<li><p>callFactory判断是否为空，默认new OkHttpClient(),可以使用.client来设置</p>
</li>
<li><p>callbackExecutor回调线程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">callbackExecutor = platform.defaultCallbackExecutor();</div></pre></td></tr></table></figure>
</li>
</ul>
<p>利用platform对象，对平台进行判断，判断主要是利用Class.forName(“”)进行查找</p>
<ul>
<li><p>adapterFactories 这个对象主要用于对Call进行转化，基本上不需要我们自己去自定义。</p>
</li>
<li><p>converterFactories 该对象用于转化数据，例如将返回的responseBody转化为对象等</p>
</li>
</ul>
<h4 id="ServiceMethod类"><a href="#ServiceMethod类" class="headerlink" title="ServiceMethod类"></a>ServiceMethod类</h4><ul>
<li><p>loadServiceMethod创建ServiceMethod</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ServiceMethod loadServiceMethod(Method method) &#123;</div><div class="line">    ServiceMethod result;</div><div class="line">    synchronized (serviceMethodCache) &#123;</div><div class="line">      result = serviceMethodCache.get(method);</div><div class="line">      if (result == null) &#123;</div><div class="line">        result = new ServiceMethod.Builder(this, method).build();</div><div class="line">        serviceMethodCache.put(method, result);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ServiceMethod.Builder build</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public Builder(Retrofit retrofit, Method method) &#123;</div><div class="line">    this.retrofit = retrofit;</div><div class="line">    this.method = method;</div><div class="line">    this.methodAnnotations = method.getAnnotations();</div><div class="line">    this.parameterTypes = method.getGenericParameterTypes();</div><div class="line">    this.parameterAnnotationsArray = method.getParameterAnnotations();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>build<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public ServiceMethod build() &#123;</div><div class="line">     callAdapter = createCallAdapter();</div><div class="line">     responseType = callAdapter.responseType();</div><div class="line">     if (responseType == Response.class || responseType == okhttp3.Response.class) &#123;</div><div class="line">       throw methodError(&quot;&apos;&quot;</div><div class="line">           + Utils.getRawType(responseType).getName()</div><div class="line">           + &quot;&apos; is not a valid response body type. Did you mean ResponseBody?&quot;);</div><div class="line">     &#125;</div><div class="line">     responseConverter = createResponseConverter();</div><div class="line"></div><div class="line">     for (Annotation annotation : methodAnnotations) &#123;</div><div class="line">       parseMethodAnnotation(annotation);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     if (httpMethod == null) &#123;</div><div class="line">       throw methodError(&quot;HTTP method annotation is required (e.g., @GET, @POST, etc.).&quot;);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     if (!hasBody) &#123;</div><div class="line">       if (isMultipart) &#123;</div><div class="line">         throw methodError(</div><div class="line">             &quot;Multipart can only be specified on HTTP methods with request body (e.g., @POST).&quot;);</div><div class="line">       &#125;</div><div class="line">       if (isFormEncoded) &#123;</div><div class="line">         throw methodError(&quot;FormUrlEncoded can only be specified on HTTP methods with &quot;</div><div class="line">             + &quot;request body (e.g., @POST).&quot;);</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     int parameterCount = parameterAnnotationsArray.length;</div><div class="line">     parameterHandlers = new ParameterHandler&lt;?&gt;[parameterCount];</div><div class="line">     for (int p = 0; p &lt; parameterCount; p++) &#123;</div><div class="line">       Type parameterType = parameterTypes[p];</div><div class="line">       if (Utils.hasUnresolvableType(parameterType)) &#123;</div><div class="line">         throw parameterError(p, &quot;Parameter type must not include a type variable or wildcard: %s&quot;,</div><div class="line">             parameterType);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Annotation[] parameterAnnotations = parameterAnnotationsArray[p];</div><div class="line">       if (parameterAnnotations == null) &#123;</div><div class="line">         throw parameterError(p, &quot;No Retrofit annotation found.&quot;);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     if (relativeUrl == null &amp;&amp; !gotUrl) &#123;</div><div class="line">       throw methodError(&quot;Missing either @%s URL or @Url parameter.&quot;, httpMethod);</div><div class="line">     &#125;</div><div class="line">     if (!isFormEncoded &amp;&amp; !isMultipart &amp;&amp; !hasBody &amp;&amp; gotBody) &#123;</div><div class="line">       throw methodError(&quot;Non-body HTTP method cannot contain @Body.&quot;);</div><div class="line">     &#125;</div><div class="line">     if (isFormEncoded &amp;&amp; !gotField) &#123;</div><div class="line">       throw methodError(&quot;Form-encoded method must contain at least one @Field.&quot;);</div><div class="line">     &#125;</div><div class="line">     if (isMultipart &amp;&amp; !gotPart) &#123;</div><div class="line">       throw methodError(&quot;Multipart method must contain at least one @Part.&quot;);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     return new ServiceMethod&lt;&gt;(this);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个callAdapter拿到的构建retrofit里面时adapterFactories时添加的，即为：new ExecutorCallbackCall&lt;&gt;(callbackExecutor, call)，该ExecutorCallbackCall唯一做的事情就是将原本call的回调转发至UI线程<br>callAdapter.responseType()返回的是我们方法的实际类型，例如:Call<user><br>createResponseConverter拿到responseConverter对象，其当然也是根据我们构建retrofit时,addConverterFactory添加的ConverterFactory对象来寻找一个合适的返回，寻找的依据主要看该converter能否处理你编写方法的返回值类型，默认实现为BuiltInConverters，仅仅支持返回值的实际类型为ResponseBody和Void，也就说明了默认情况下，是不支持Call<user>这类类型的。<br>注解进行解析了，主要是对方法上的注解进行解析，那么可以拿到httpMethod以及初步的url（包含占位符）。</user></user></p>
<p>后面是对方法中参数中的注解进行解析，这一步会拿到很多的ParameterHandler对象，该对象在toRequest()构造Request的时候调用其apply方法</p>
<p>最终返回一个ServiceMethod</p>
<ul>
<li>createCallAdapter</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private CallAdapter&lt;?&gt; createCallAdapter() &#123;</div><div class="line">      Type returnType = method.getGenericReturnType();</div><div class="line">      if (Utils.hasUnresolvableType(returnType)) &#123;</div><div class="line">        throw methodError(</div><div class="line">            &quot;Method return type must not include a type variable or wildcard: %s&quot;, returnType);</div><div class="line">      &#125;</div><div class="line">      if (returnType == void.class) &#123;</div><div class="line">        throw methodError(&quot;Service methods cannot return void.&quot;);</div><div class="line">      &#125;</div><div class="line">      Annotation[] annotations = method.getAnnotations();</div><div class="line">      try &#123;</div><div class="line">        return retrofit.callAdapter(returnType, annotations);</div><div class="line">      &#125; catch (RuntimeException e) &#123; // Wide exception range because factories are user code.</div><div class="line">        throw methodError(e, &quot;Unable to create call adapter for %s&quot;, returnType);</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="OkHttpCall-okHttpCall-new-OkHttpCall-lt-gt-serviceMethod-args-构建"><a href="#OkHttpCall-okHttpCall-new-OkHttpCall-lt-gt-serviceMethod-args-构建" class="headerlink" title="OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);构建"></a>OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);构建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">OkHttpCall(ServiceMethod&lt;T&gt; serviceMethod, Object[] args) &#123;</div><div class="line">   this.serviceMethod = serviceMethod;</div><div class="line">   this.args = args;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="serviceMethod-callAdapter-adapt-okHttpCall-最后"><a href="#serviceMethod-callAdapter-adapt-okHttpCall-最后" class="headerlink" title="serviceMethod.callAdapter.adapt(okHttpCall); 最后"></a>serviceMethod.callAdapter.adapt(okHttpCall); 最后</h4><p>这个callAdapter是ExecutorCallAdapterFactory.get()对应代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">final class ExecutorCallAdapterFactory extends CallAdapter.Factory &#123;</div><div class="line">  final Executor callbackExecutor;</div><div class="line"></div><div class="line">  ExecutorCallAdapterFactory(Executor callbackExecutor) &#123;</div><div class="line">    this.callbackExecutor = callbackExecutor;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public CallAdapter&lt;Call&lt;?&gt;&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123;</div><div class="line">    if (getRawType(returnType) != Call.class) &#123;</div><div class="line">      return null;</div><div class="line">    &#125;</div><div class="line">    final Type responseType = Utils.getCallResponseType(returnType);</div><div class="line">    return new CallAdapter&lt;Call&lt;?&gt;&gt;() &#123;</div><div class="line">      @Override public Type responseType() &#123;</div><div class="line">        return responseType;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override public &lt;R&gt; Call&lt;R&gt; adapt(Call&lt;R&gt; call) &#123;</div><div class="line">        return new ExecutorCallbackCall&lt;&gt;(callbackExecutor, call);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">static final class ExecutorCallbackCall&lt;T&gt; implements Call&lt;T&gt; &#123;</div><div class="line">   final Executor callbackExecutor;</div><div class="line">   final Call&lt;T&gt; delegate;</div><div class="line"></div><div class="line">   ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</div><div class="line">     this.callbackExecutor = callbackExecutor;</div><div class="line">     this.delegate = delegate;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override public void enqueue(final Callback&lt;T&gt; callback) &#123;</div><div class="line">     if (callback == null) throw new NullPointerException(&quot;callback == null&quot;);</div><div class="line"></div><div class="line">     delegate.enqueue(new Callback&lt;T&gt;() &#123;</div><div class="line">       @Override public void onResponse(Call&lt;T&gt; call, final Response&lt;T&gt; response) &#123;</div><div class="line">         callbackExecutor.execute(new Runnable() &#123;</div><div class="line">           @Override public void run() &#123;</div><div class="line">             if (delegate.isCanceled()) &#123;</div><div class="line">               // Emulate OkHttp&apos;s behavior of throwing/delivering an IOException on cancellation.</div><div class="line">               callback.onFailure(ExecutorCallbackCall.this, new IOException(&quot;Canceled&quot;));</div><div class="line">             &#125; else &#123;</div><div class="line">               callback.onResponse(ExecutorCallbackCall.this, response);</div><div class="line">             &#125;</div><div class="line">           &#125;</div><div class="line">         &#125;);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       @Override public void onFailure(Call&lt;T&gt; call, final Throwable t) &#123;</div><div class="line">         callbackExecutor.execute(new Runnable() &#123;</div><div class="line">           @Override public void run() &#123;</div><div class="line">             callback.onFailure(ExecutorCallbackCall.this, t);</div><div class="line">           &#125;</div><div class="line">         &#125;);</div><div class="line">       &#125;</div><div class="line">     &#125;);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>ExecutorCallbackCall仅仅是对Call对象进行封装，类似装饰者模式，只不过将其执行时的回调通过callbackExecutor进行回调到UI线程中去了。</p>
<h4 id="执行Call"><a href="#执行Call" class="headerlink" title="执行Call"></a>执行Call</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">@Override public void enqueue(final Callback&lt;T&gt; callback) &#123;</div><div class="line">    if (callback == null) throw new NullPointerException(&quot;callback == null&quot;);</div><div class="line"></div><div class="line">    okhttp3.Call call;</div><div class="line">    Throwable failure;</div><div class="line"></div><div class="line">    synchronized (this) &#123;</div><div class="line">      if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);</div><div class="line">      executed = true;</div><div class="line"></div><div class="line">      call = rawCall;</div><div class="line">      failure = creationFailure;</div><div class="line">      if (call == null &amp;&amp; failure == null) &#123;</div><div class="line">        try &#123;</div><div class="line">          call = rawCall = createRawCall();</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          failure = creationFailure = t;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (failure != null) &#123;</div><div class="line">      callback.onFailure(this, failure);</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (canceled) &#123;</div><div class="line">      call.cancel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    call.enqueue(new okhttp3.Callback() &#123;</div><div class="line">      @Override public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse)</div><div class="line">          throws IOException &#123;</div><div class="line">        Response&lt;T&gt; response;</div><div class="line">        try &#123;</div><div class="line">          response = parseResponse(rawResponse);</div><div class="line">        &#125; catch (Throwable e) &#123;</div><div class="line">          callFailure(e);</div><div class="line">          return;</div><div class="line">        &#125;</div><div class="line">        callSuccess(response);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      @Override public void onFailure(okhttp3.Call call, IOException e) &#123;</div><div class="line">        try &#123;</div><div class="line">          callback.onFailure(OkHttpCall.this, e);</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      private void callFailure(Throwable e) &#123;</div><div class="line">        try &#123;</div><div class="line">          callback.onFailure(OkHttpCall.this, e);</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      private void callSuccess(Response&lt;T&gt; response) &#123;</div><div class="line">        try &#123;</div><div class="line">          callback.onResponse(OkHttpCall.this, response);</div><div class="line">        &#125; catch (Throwable t) &#123;</div><div class="line">          t.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  	&#125;</div></pre></td></tr></table></figure>
<p>内部实际上就是okhttp的Call对象，也是调用okhttp3.Call.enqueue方法。</p>
<ul>
<li>创建call</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">private okhttp3.Call createRawCall() throws IOException &#123;</div><div class="line">  Request request = serviceMethod.toRequest(args);</div><div class="line">  okhttp3.Call call = serviceMethod.callFactory.newCall(request);</div><div class="line">  if (call == null) &#123;</div><div class="line">    throw new NullPointerException(&quot;Call.Factory returned null.&quot;);</div><div class="line"> 	 &#125;</div><div class="line"> 	 return call;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>toRequest</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> Request toRequest(Object... args) throws IOException &#123;</div><div class="line">  RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,</div><div class="line">      contentType, hasBody, isFormEncoded, isMultipart);</div><div class="line"></div><div class="line">  @SuppressWarnings(&quot;unchecked&quot;) // It is an error to invoke a method with the wrong arg types.</div><div class="line">  ParameterHandler&lt;Object&gt;[] handlers = (ParameterHandler&lt;Object&gt;[]) parameterHandlers;</div><div class="line"></div><div class="line">  int argumentCount = args != null ? args.length : 0;</div><div class="line">  if (argumentCount != handlers.length) &#123;</div><div class="line">    throw new IllegalArgumentException(&quot;Argument count (&quot; + argumentCount</div><div class="line">        + &quot;) doesn&apos;t match expected count (&quot; + handlers.length + &quot;)&quot;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  for (int p = 0; p &lt; argumentCount; p++) &#123;</div><div class="line">    handlers[p].apply(requestBuilder, args[p]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return requestBuilder.build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Retrofit源码浅析&quot;&gt;&lt;a href=&quot;#Retrofit源码浅析&quot; class=&quot;headerlink&quot; title=&quot;Retrofit源码浅析&quot;&gt;&lt;/a&gt;Retrofit源码浅析&lt;/h3&gt;&lt;h4 id=&quot;retrofit如何为我们的接口实现实例-crea
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="Retrofit" scheme="https://ln0491.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit学习(五)-文件上传</title>
    <link href="https://ln0491.github.io/2016/10/27/Retrofit%E5%AD%A6%E4%B9%A0-%E4%BA%94-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://ln0491.github.io/2016/10/27/Retrofit学习-五-文件上传/</id>
    <published>2016-10-27T10:31:00.000Z</published>
    <updated>2016-10-31T03:32:36.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Retrofit学习-五-文件上传"><a href="#Retrofit学习-五-文件上传" class="headerlink" title="Retrofit学习(五)-文件上传"></a>Retrofit学习(五)-文件上传</h2><p>Retrofit学习(一)-集成<br><a href="http://www.jianshu.com/p/86e5cddcc753" target="_blank" rel="external">http://www.jianshu.com/p/86e5cddcc753</a><br>Retrofit学习(二)-get请求<br><a href="http://www.jianshu.com/p/cdde02a0777c" target="_blank" rel="external">http://www.jianshu.com/p/cdde02a0777c</a><br>Retrofit学习(三)-普通post请求<br><a href="http://www.jianshu.com/p/7f252d10fd41" target="_blank" rel="external">http://www.jianshu.com/p/7f252d10fd41</a><br>Retrofit学习(四)-下载文件<br><a href="http://www.jianshu.com/p/f61645a770ae" target="_blank" rel="external">http://www.jianshu.com/p/f61645a770ae</a><br>Retrofit学习(五)-文件上传<br><a href="http://www.jianshu.com/p/ca0cb8640c8f" target="_blank" rel="external">http://www.jianshu.com/p/ca0cb8640c8f</a></p>
<h3 id="单个文件上传-Multipart-Part"><a href="#单个文件上传-Multipart-Part" class="headerlink" title="单个文件上传 @Multipart @Part"></a>单个文件上传 @Multipart @Part</h3><ul>
<li>接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    @Multipart</div><div class="line">    @POST(&quot;user/imgUpLoad&quot;)</div><div class="line">//    Call&lt;String&gt; uploadOne(@Part(&quot;sign&quot;) String sign,@Part(&quot;appKey&quot;) String appKey,@Part(&quot;osName&quot;) String osName,@Part(&quot;memberNo&quot;) String memberNo, @Part  MultipartBody.Part file);</div><div class="line">//    Call&lt;String&gt; uploadOne(@PartMap Map&lt;String,String&gt; params, @Part  MultipartBody.Part file);</div><div class="line"></div><div class="line">//    Call&lt;String&gt; uploadOne(@Query(&quot;sign&quot;) String sign, @Query(&quot;appKey&quot;) String appKey, @Query(&quot;osName&quot;) String osName, @Query(&quot;memberNo&quot;) String memberNo, @Part  MultipartBody.Part file);</div><div class="line">    Call&lt;String&gt; uploadOne(@QueryMap Map&lt;String,String&gt; params, @Part  MultipartBody.Part file);</div></pre></td></tr></table></figure>
<p>需要添加@Multipart表示支持文件上传的表单，Content-Type: multipart/form-data<br>以上4种写法都可以<br>普通参数@Query，@QueryMap<br>或者也@Part，这样</p>
<p>文件要使用<br>@Part  MultipartBody.Part file</p>
<ul>
<li>实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">        String path = &quot;/storage/emulated/0/Pictures/1477553156332.jpg&quot;;</div><div class="line">        File file = new File(path);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建请求体，内容是文件</div><div class="line">         */</div><div class="line">        RequestBody requestFile = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), file);</div><div class="line">//        final RequestBody requestFile = RequestBody.create(MediaType.parse(&quot;image/*&quot;), file);</div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建多部分拿上面的请求体做参数</div><div class="line">         * img 是上传是的参数key,根据需要更改为自己的</div><div class="line">         */</div><div class="line">        MultipartBody.Part body =</div><div class="line">                MultipartBody.Part.createFormData(&quot;img&quot;, file.getName(), requestFile);</div><div class="line"></div><div class="line"></div><div class="line">        Map&lt;String,String&gt; params = new HashMap&lt;&gt;();</div><div class="line">        params.put(&quot;sign&quot;, SIGN);</div><div class="line">        params.put(&quot;appKey&quot;, APP_KEY);</div><div class="line">        params.put(&quot;osName&quot;, OS_NAME);</div><div class="line">        params.put(&quot;memberNo&quot;, &quot;13410111258&quot;);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 初始化</div><div class="line">         */</div><div class="line">        Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(BASE_URL)</div><div class="line">                .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line">        UploadService uploadService = retrofit.create(UploadService.class);</div><div class="line">        Call&lt;String&gt; call  = uploadService.uploadOne(params,body);</div><div class="line">       // Call&lt;String&gt; call  = uploadService.uploadOne(SIGN,APP_KEY,OS_NAME,&quot;13410111258&quot;,body);</div><div class="line">        call.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line">                L.d(&quot;vivi&quot;,response.message()+&quot;    &quot;+response.body());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line">                t.printStackTrace();</div><div class="line">L.d(&quot;vivi&quot;,t.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>其中创建Part部分为重要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> String path = &quot;/storage/emulated/0/Pictures/1477553156332.jpg&quot;;</div><div class="line">        File file = new File(path);</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建请求体，内容是文件</div><div class="line">         */</div><div class="line"> RequestBody requestFile = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), file);</div><div class="line">//        final RequestBody requestFile = RequestBody.create(MediaType.parse(&quot;image/*&quot;), file);</div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建多部分拿上面的请求体做参数</div><div class="line">         * img 是上传是的参数key,根据需要更改为自己的</div><div class="line">         */</div><div class="line">        MultipartBody.Part body =</div><div class="line">                MultipartBody.Part.createFormData(&quot;img&quot;, file.getName(), requestFile);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK    &#123;&quot;code&quot;:&quot;M100001&quot;,&quot;msg&quot;:&quot;成功&quot;,&quot;info&quot;:&#123;&quot;successMessage&quot;:&quot;更改成功&quot;,&quot;memberHeadImg&quot;:&quot;http://10.18.200.24:8080/image/cd-img/20161027183654155618134101112581.jpg&quot;&#125;,&quot;sign&quot;:&quot;&quot;&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>再来一个 单个文件上传</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Multipart</div><div class="line">@POST(&quot;file//upload&quot;)</div><div class="line">Call&lt;String&gt; upload2(@Part   MultipartBody.Part file);</div></pre></td></tr></table></figure>
<ul>
<li><p>实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 单个 文件上传</div><div class="line">    * &lt;p&gt;</div><div class="line">    * /storage/emulated/0/Pictures/1477553156332.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474366085035.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474522550302.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474423699408.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1477553128722.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474365776853.jpg</div><div class="line">    */</div><div class="line">   private void uploadOne2() &#123;</div><div class="line"></div><div class="line"></div><div class="line">       String baseUrl = &quot;http://10.18.200.140:8080/hellosp/&quot;;</div><div class="line"></div><div class="line"></div><div class="line">       Retrofit retrofit = new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(ScalarsConverterFactory.create()).addConverterFactory(GsonConverterFactory.create()).build();</div><div class="line"></div><div class="line"></div><div class="line">       UploadService uploadService = retrofit.create(UploadService.class);</div><div class="line"></div><div class="line"></div><div class="line">       String path = &quot;/storage/emulated/0/Pictures/1477553156332.jpg&quot;;</div><div class="line"></div><div class="line"></div><div class="line">       File file = new File(path);</div><div class="line"></div><div class="line"></div><div class="line">       RequestBody requestBody = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), file);</div><div class="line"></div><div class="line"></div><div class="line">       /**</div><div class="line">        * 创建多部分拿上面的请求体做参数</div><div class="line">        * img 是上传是的参数key,根据需要更改为自己的</div><div class="line">        */</div><div class="line">       MultipartBody.Part body = MultipartBody.Part.createFormData(&quot;file&quot;, file.getName(), requestBody);</div><div class="line"></div><div class="line"></div><div class="line">       Call&lt;String&gt; call = uploadService.upload2(body);</div><div class="line"></div><div class="line"></div><div class="line">       call.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line">               L.d(&quot;vivi&quot;, response.message() + &quot;    &quot; + response.body());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line">               t.printStackTrace();</div><div class="line">               L.d(&quot;vivi&quot;, t.getMessage());</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>也可以另一种写法</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 单个 文件上传</div><div class="line">    * /storage/emulated/0/Pictures/1477553156332.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474366085035.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474522550302.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474423699408.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1477553128722.jpg</div><div class="line">    * /storage/emulated/0/Pictures/1474365776853.jpg</div><div class="line">    */</div><div class="line">   private void uploadOne3() &#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">       String baseUrl = &quot;http://10.18.200.140:8080/hellosp/&quot;;</div><div class="line"></div><div class="line"></div><div class="line">       Retrofit retrofit = new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(ScalarsConverterFactory.create()).addConverterFactory(GsonConverterFactory.create()).build();</div><div class="line"></div><div class="line"></div><div class="line">       UploadService uploadService = retrofit.create(UploadService.class);</div><div class="line"></div><div class="line"></div><div class="line">       String path = &quot;/storage/emulated/0/Pictures/1477553156332.jpg&quot;;</div><div class="line"></div><div class="line"></div><div class="line">       File file = new File(path);</div><div class="line"></div><div class="line"></div><div class="line">       RequestBody requestBody = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), file);</div><div class="line">       Map&lt;String, RequestBody&gt; params = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">       params.put(&quot;file\&quot;; filename=\&quot;&quot; + file.getName() + &quot;&quot;, requestBody);</div><div class="line"></div><div class="line">       Call&lt;String&gt; call = uploadService.upload3(params);</div><div class="line"></div><div class="line"></div><div class="line">       call.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line">               L.d(&quot;vivi&quot;, response.message() + &quot;    &quot; + response.body());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line">               t.printStackTrace();</div><div class="line">               L.d(&quot;vivi&quot;, t.getMessage());</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>看到不同了吗？参数的拼接不同<br>第一种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">     /**</div><div class="line">         * 创建请求体，内容是文件</div><div class="line">         */</div><div class="line"> RequestBody requestFile = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), file);</div><div class="line">//        final RequestBody requestFile = RequestBody.create(MediaType.parse(&quot;image/*&quot;), file);</div><div class="line"></div><div class="line"></div><div class="line">        /**</div><div class="line">         * 创建多部分拿上面的请求体做参数</div><div class="line">         * img 是上传是的参数key,根据需要更改为自己的</div><div class="line">         */</div><div class="line">        MultipartBody.Part body =</div><div class="line">                MultipartBody.Part.createFormData(&quot;img&quot;, file.getName(), requestFile);</div></pre></td></tr></table></figure></p>
<p>第二种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RequestBody requestBody = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), file);</div><div class="line">       Map&lt;String, RequestBody&gt; params = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">       params.put(&quot;file\&quot;; filename=\&quot;&quot; + file.getName() + &quot;&quot;, requestBody);</div></pre></td></tr></table></figure>
<p>第二种比较适合多文件上传 </p>
<p>file 是参数</p>
<h3 id="多个文件上传"><a href="#多个文件上传" class="headerlink" title="多个文件上传"></a>多个文件上传</h3><ul>
<li>接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Multipart</div><div class="line">@POST(&quot;file//upload&quot;)</div><div class="line">Call&lt;String&gt; upload22(@PartMap   Map&lt;String,RequestBody&gt; params);</div></pre></td></tr></table></figure>
<ul>
<li>实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line">     * 文件上传</div><div class="line">     * &lt;p&gt;</div><div class="line">     * /storage/emulated/0/Pictures/1477553156332.jpg</div><div class="line">     * /storage/emulated/0/Pictures/1474366085035.jpg</div><div class="line">     * /storage/emulated/0/Pictures/1474522550302.jpg</div><div class="line">     * /storage/emulated/0/Pictures/1474423699408.jpg</div><div class="line">     * /storage/emulated/0/Pictures/1477553128722.jpg</div><div class="line">     * /storage/emulated/0/Pictures/1474365776853.jpg</div><div class="line">     */</div><div class="line">    private void uploadOne22() &#123;</div><div class="line"></div><div class="line"></div><div class="line">        String baseUrl = &quot;http://10.18.200.140:8080/hellosp/&quot;;</div><div class="line"></div><div class="line"></div><div class="line">        Retrofit retrofit = new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(ScalarsConverterFactory.create()).addConverterFactory(GsonConverterFactory.create()).build();</div><div class="line"></div><div class="line"></div><div class="line">        UploadService uploadService = retrofit.create(UploadService.class);</div><div class="line"></div><div class="line"></div><div class="line">        String path  = &quot;/storage/emulated/0/Pictures/1477553156332.jpg&quot;;</div><div class="line">        String path2 = &quot;/storage/emulated/0/Pictures/1474366085035.jpg&quot;;</div><div class="line">        // String path3 = &quot;/storage/emulated/0/Pictures/1474522550302.jpg&quot;;</div><div class="line">        String path4 = &quot;/storage/emulated/0/Pictures/1474423699408.jpg&quot;;</div><div class="line">        String path5 = &quot;/storage/emulated/0/Pictures/1477553128722.jpg&quot;;</div><div class="line">        String path6 = &quot;/storage/emulated/0/Pictures/1474365776853.jpg&quot;;</div><div class="line"></div><div class="line"></div><div class="line">        File file  = new File(path);</div><div class="line">        File file2 = new File(path2);</div><div class="line">        // File file3 = new File(path3);</div><div class="line">        File file4 = new File(path4);</div><div class="line">        File file5 = new File(path5);</div><div class="line">        File file6 = new File(path6);</div><div class="line"></div><div class="line"></div><div class="line">        File[] files = new File[]&#123;file, file2, file4, file5, file6&#125;;</div><div class="line"></div><div class="line"></div><div class="line">        Map&lt;String, RequestBody&gt; params = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">        for(int i = 0; i &lt; files.length; i++) &#123;</div><div class="line">            RequestBody requestBody = RequestBody.create(MediaType.parse(&quot;multipart/form-data&quot;), files[i]);</div><div class="line">            params.put(&quot;file\&quot;; filename=\&quot;&quot; + files[i].getName() + &quot;&quot;, requestBody);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      /*  *//**</div><div class="line">         * 创建多部分拿上面的请求体做参数</div><div class="line">         * img 是上传是的参数key,根据需要更改为自己的</div><div class="line">         *//*</div><div class="line">        MultipartBody.Part body =</div><div class="line">                MultipartBody.Part.createFormData(&quot;file&quot;, file.getName(), requestBody);</div><div class="line">*/</div><div class="line"></div><div class="line">        Call&lt;String&gt; call = uploadService.upload22(params);</div><div class="line"></div><div class="line"></div><div class="line">        call.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line">                L.d(&quot;vivi&quot;, response.message() + &quot;    &quot; + response.body());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line">                t.printStackTrace();</div><div class="line">                L.d(&quot;vivi&quot;, t.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>基本的应用就算完成了 </p>
<p>源码：<br><a href="https://github.com/ln0491/RetrofitDemo2" target="_blank" rel="external">https://github.com/ln0491/RetrofitDemo2</a><br>上传服务器代码<br><a href="https://github.com/ln0491/hellosp" target="_blank" rel="external">https://github.com/ln0491/hellosp</a><br>半吊子springMVC写的有需要的就用吧，上传路径自己改下<br>在UploadController-addUser方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Retrofit学习-五-文件上传&quot;&gt;&lt;a href=&quot;#Retrofit学习-五-文件上传&quot; class=&quot;headerlink&quot; title=&quot;Retrofit学习(五)-文件上传&quot;&gt;&lt;/a&gt;Retrofit学习(五)-文件上传&lt;/h2&gt;&lt;p&gt;Retrofit
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="Retrofit" scheme="https://ln0491.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit学习(四)-下载文件</title>
    <link href="https://ln0491.github.io/2016/10/27/Retrofit%E5%AD%A6%E4%B9%A0-%E5%9B%9B-%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>https://ln0491.github.io/2016/10/27/Retrofit学习-四-下载文件/</id>
    <published>2016-10-27T09:01:28.000Z</published>
    <updated>2016-10-28T01:37:46.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Retrofit学习-四-下载文件"><a href="#Retrofit学习-四-下载文件" class="headerlink" title="Retrofit学习(四)-下载文件"></a>Retrofit学习(四)-下载文件</h2><p>Retrofit学习(一)-集成<br><a href="http://www.jianshu.com/p/86e5cddcc753" target="_blank" rel="external">http://www.jianshu.com/p/86e5cddcc753</a><br>Retrofit学习(二)-get请求<br><a href="http://www.jianshu.com/p/cdde02a0777c" target="_blank" rel="external">http://www.jianshu.com/p/cdde02a0777c</a><br>Retrofit学习(三)-普通post请求<br><a href="http://www.jianshu.com/p/7f252d10fd41" target="_blank" rel="external">http://www.jianshu.com/p/7f252d10fd41</a></p>
<h3 id="Streaming-用于下载大文件"><a href="#Streaming-用于下载大文件" class="headerlink" title="@Streaming:用于下载大文件"></a>@Streaming:用于下载大文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Streaming //大文件时要加不然会OOM</div><div class="line">@GET</div><div class="line">Call&lt;ResponseBody&gt; downloadFile(@Url String fileUrl);</div></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"> private void startDownload() &#123;</div><div class="line"></div><div class="line">            //http://surl.qq.com/195D0D?qbsrc=51&amp;asr=4286</div><div class="line"></div><div class="line">        String downloadUrl = &quot;195D0D?qbsrc=51&amp;asr=4286&quot;;</div><div class="line"></div><div class="line">//</div><div class="line">        Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(&quot;http://surl.qq.com/&quot;)</div><div class="line">                 .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .build();</div><div class="line"></div><div class="line"></div><div class="line">        DownloadService downloadService = retrofit.create(DownloadService.class);</div><div class="line"></div><div class="line">        Call&lt;ResponseBody&gt; responseBodyCall = downloadService.downloadFile(downloadUrl);</div><div class="line"></div><div class="line"></div><div class="line">        responseBodyCall.enqueue(new Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;ResponseBody&gt; call, final Response&lt;ResponseBody&gt; response) &#123;</div><div class="line"></div><div class="line">                L.d(&quot;vivi&quot;,response.message()+&quot;  length  &quot;+response.body().contentLength()+&quot;  type &quot;+response.body().contentType());</div><div class="line"></div><div class="line">                //建立一个文件</div><div class="line">                final File        file          = FileUtils.createFile(DownLoadActivity.this);</div><div class="line">                </div><div class="line">                //下载文件放在子线程</div><div class="line">                new Thread()&#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        super.run();</div><div class="line">                        //保存到本地</div><div class="line">                        FileUtils.writeFile2Disk(response, file, new HttpCallBack() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onLoading(final long current, final long total) &#123;</div><div class="line">                                /**</div><div class="line">                                 * 更新进度条</div><div class="line">                                 */</div><div class="line">                                runOnUiThread(new Runnable() &#123;</div><div class="line">                                    @Override</div><div class="line">                                    public void run() &#123;</div><div class="line">                                        L.d(&quot;vivi&quot;,current+&quot; to &quot;+total);</div><div class="line">                                        L.d(&quot;vivi&quot;,&quot; runOnUiThread  &quot;+ currentThread().getName());</div><div class="line">                                        mTv.setText(current+&quot;&quot;);</div><div class="line">                                        mPb.setMax((int) total);</div><div class="line">                                        mPb.setProgress((int) current);</div><div class="line"></div><div class="line"></div><div class="line">                                    &#125;</div><div class="line">                                &#125;);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;.start();</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">                t.printStackTrace();</div><div class="line">                L.d(&quot;vivi&quot;,t.getMessage()+&quot;  &quot;+t.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">package com.liu.retrofitdemo2.util;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.os.Environment;</div><div class="line"></div><div class="line">import com.liu.retrofitdemo2.callback.HttpCallBack;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.InputStream;</div><div class="line">import java.io.OutputStream;</div><div class="line"></div><div class="line">import okhttp3.ResponseBody;</div><div class="line">import retrofit2.Response;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @Description: 描述</div><div class="line"> * @AUTHOR 刘楠  Create By 2016/10/27 0027 15:56</div><div class="line"> */</div><div class="line">public class FileUtils &#123;</div><div class="line"></div><div class="line"></div><div class="line">    public static File createFile(Context context)&#123;</div><div class="line"></div><div class="line"></div><div class="line">        File file=null;</div><div class="line">        String state = Environment.getExternalStorageState();</div><div class="line"></div><div class="line">        if(state.equals(Environment.MEDIA_MOUNTED))&#123;</div><div class="line"></div><div class="line">            file = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/test.apk&quot;);</div><div class="line">        &#125;else &#123;</div><div class="line">            file = new File(context.getCacheDir().getAbsolutePath()+&quot;/test.apk&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        L.d(&quot;vivi&quot;,&quot;file &quot;+file.getAbsolutePath());</div><div class="line"></div><div class="line">        return file;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    public static void writeFile2Disk(Response&lt;ResponseBody&gt; response, File file, HttpCallBack httpCallBack)&#123;</div><div class="line"></div><div class="line"></div><div class="line">        long currentLength = 0;</div><div class="line">        OutputStream os =null;</div><div class="line"></div><div class="line">        InputStream is = response.body().byteStream();</div><div class="line">        long totalLength =response.body().contentLength();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line"></div><div class="line">            os = new FileOutputStream(file);</div><div class="line"></div><div class="line"></div><div class="line">            int len ;</div><div class="line"></div><div class="line">            byte [] buff = new byte[1024];</div><div class="line"></div><div class="line">            while((len=is.read(buff))!=-1)&#123;</div><div class="line"></div><div class="line">                os.write(buff,0,len);</div><div class="line">                currentLength+=len;</div><div class="line">                L.d(&quot;vivi&quot;,&quot;当前进度:&quot;+currentLength);</div><div class="line">                httpCallBack.onLoading(currentLength,totalLength);</div><div class="line">            &#125;</div><div class="line">           // httpCallBack.onLoading(currentLength,totalLength,true);</div><div class="line"></div><div class="line"></div><div class="line">        &#125; catch(FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch(IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if(os!=null)&#123;</div><div class="line">                try &#123;</div><div class="line">                    os.close();</div><div class="line">                &#125; catch(IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(is!=null)&#123;</div><div class="line">                try &#123;</div><div class="line">                    is.close();</div><div class="line">                &#125; catch(IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码：<br><a href="https://github.com/ln0491/RetrofitDemo2" target="_blank" rel="external">https://github.com/ln0491/RetrofitDemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Retrofit学习-四-下载文件&quot;&gt;&lt;a href=&quot;#Retrofit学习-四-下载文件&quot; class=&quot;headerlink&quot; title=&quot;Retrofit学习(四)-下载文件&quot;&gt;&lt;/a&gt;Retrofit学习(四)-下载文件&lt;/h2&gt;&lt;p&gt;Retrofit
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="Retrofit" scheme="https://ln0491.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit学习(三)-普通post请求</title>
    <link href="https://ln0491.github.io/2016/10/26/Retrofit%E5%AD%A6%E4%B9%A0-%E4%B8%89-%E6%99%AE%E9%80%9Apost%E8%AF%B7%E6%B1%82/"/>
    <id>https://ln0491.github.io/2016/10/26/Retrofit学习-三-普通post请求/</id>
    <published>2016-10-26T10:03:34.000Z</published>
    <updated>2016-10-27T06:12:51.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Retrofit学习-三-普通post请求"><a href="#Retrofit学习-三-普通post请求" class="headerlink" title="Retrofit学习(三)-普通post请求"></a>Retrofit学习(三)-普通post请求</h2><p>Retrofit学习(一)-集成<br><a href="http://www.jianshu.com/p/86e5cddcc753" target="_blank" rel="external">http://www.jianshu.com/p/86e5cddcc753</a><br>Retrofit学习(二)-get请求<br><a href="http://www.jianshu.com/p/cdde02a0777c" target="_blank" rel="external">http://www.jianshu.com/p/cdde02a0777c</a></p>
<h3 id="Post表单提交-单个参数-Field"><a href="#Post表单提交-单个参数-Field" class="headerlink" title="Post表单提交-单个参数 @Field"></a>Post表单提交-单个参数 @Field</h3><ul>
<li>接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/** 表单提交要加 @FormUrlEncoded</div><div class="line">   * 登录</div><div class="line">   * @param username 用户名</div><div class="line">   * @param password 密码</div><div class="line">   * @param deviceId 设置ID</div><div class="line">   * @param platform 平台这里是Android</div><div class="line">   * @param verId 版本号</div><div class="line">   * @return</div><div class="line">   */</div><div class="line">  @FormUrlEncoded</div><div class="line">  @POST(&quot;login&quot;)</div><div class="line">  Call&lt;String&gt; login(@Field(&quot;loginName&quot;) String username,</div><div class="line">                     @Field(&quot;password&quot;) String password,</div><div class="line">                     @Field(&quot;deviceId&quot;) String deviceId,</div><div class="line">                     @Field(&quot;platform&quot;) String platform,</div><div class="line">                     @Field(&quot;verId&quot;) String verId);</div></pre></td></tr></table></figure>
<ul>
<li>调用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">   private void login()&#123;</div><div class="line"></div><div class="line">       /**</div><div class="line">        * 初始化</div><div class="line">        */</div><div class="line">       Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(baseUrl)</div><div class="line">               .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">               .addConverterFactory(GsonConverterFactory.create())</div><div class="line">               .build();</div><div class="line"></div><div class="line">       //生成对象的Service</div><div class="line">       LoginService loginService = retrofit.create(LoginService.class);</div><div class="line">       //调用方法得到Call</div><div class="line">       Call&lt;String&gt; loginCall      = loginService.login(&quot;home123&quot;,</div><div class="line">               &quot;123456&quot;,</div><div class="line">               getDeviceId(),</div><div class="line">               PLATFORM,</div><div class="line">               VERSION_ID);</div><div class="line"></div><div class="line"></div><div class="line">       //异步执行</div><div class="line">       loginCall.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line"></div><div class="line">               L.d(&quot;vivi&quot;,response.message()+&quot;   &quot;+response.body());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">              L.d(&quot;vivi&quot;,t.getMessage());</div><div class="line">              L.d(&quot;vivi&quot;,t.toString());</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">/**</div><div class="line">    * 获取设备号</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   private String getDeviceId()&#123;</div><div class="line"></div><div class="line"></div><div class="line">       TelephonyManager tm = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);</div><div class="line"></div><div class="line"></div><div class="line">       String deviceId = tm.getDeviceId();</div><div class="line">       L.d(&quot;vivi&quot;,deviceId);</div><div class="line"></div><div class="line">       return deviceId;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>权限</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--读取手机状态的权限--&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK   &#123;&quot;msg&quot;:&quot;OK&quot;,&quot;result&quot;:&#123;&quot;accessToken&quot;:&quot;A0BdgCrMG22CwfSKrlsEPAs3ZAozND&quot;,&quot;securiyCode&quot;:&quot;5jUduYno&quot;,&quot;time&quot;:null,&quot;userId&quot;:&quot;402882823a9d5e0d013a9dabe3680002&quot;,&quot;userName&quot;:&quot;home&quot;,&quot;verId&quot;:&quot;V1.0&quot;&#125;,&quot;status&quot;:1,&quot;verId&quot;:&quot;1.0&quot;&#125;</div></pre></td></tr></table></figure>
<h3 id="Post表单提交-多个参数-FieldMap"><a href="#Post表单提交-多个参数-FieldMap" class="headerlink" title="Post表单提交-多个参数-@FieldMap"></a>Post表单提交-多个参数-@FieldMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 表单提交要加 @FormUrlEncoded </div><div class="line"> * Post使用map多参数</div><div class="line"> * @param params</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">@FormUrlEncoded</div><div class="line">@POST(&quot;login&quot;)</div><div class="line">Call&lt;LoginBean&gt; login2(@FieldMap Map&lt;String,String&gt;params);</div></pre></td></tr></table></figure>
<ul>
<li>调用 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 初始化</div><div class="line"> */</div><div class="line">Retrofit retrofit = new Retrofit.Builder()</div><div class="line">        .baseUrl(baseUrl)</div><div class="line">        .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build();</div><div class="line"></div><div class="line">Map&lt;String, String&gt; hashMap = new HashMap&lt;String, String&gt;();</div><div class="line">hashMap.put(&quot;loginName&quot;, &quot;home123&quot;);</div><div class="line">hashMap.put(&quot;password&quot;, &quot;123456&quot;);</div><div class="line">hashMap.put(&quot;deviceId&quot;, getDeviceId());</div><div class="line">hashMap.put(&quot;platform&quot;, PLATFORM);</div><div class="line">hashMap.put(&quot;verId&quot;, VERSION_ID);</div><div class="line"></div><div class="line"></div><div class="line">//生成对象的Service</div><div class="line">LoginService loginService = retrofit.create(LoginService.class);</div><div class="line"></div><div class="line">//调用方法得到Call</div><div class="line">Call&lt;LoginBean&gt; loginCall = loginService.login2(hashMap);</div><div class="line"></div><div class="line"></div><div class="line">//异步执行</div><div class="line">loginCall.enqueue(new Callback&lt;LoginBean&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onResponse(Call&lt;LoginBean&gt; call, Response&lt;LoginBean&gt; response) &#123;</div><div class="line"></div><div class="line">        L.d(&quot;vivi&quot;,response.message()+&quot;   &quot;+response.body().toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onFailure(Call&lt;LoginBean&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">        L.d(&quot;vivi&quot;,t.getMessage());</div><div class="line">        L.d(&quot;vivi&quot;,t.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果与第一个一样，这样就拿到token</p>
<h3 id="使用-HeaderMap过滤请求-动态添加请求动"><a href="#使用-HeaderMap过滤请求-动态添加请求动" class="headerlink" title="使用@HeaderMap过滤请求 动态添加请求动"></a>使用@HeaderMap过滤请求 动态添加请求动</h3><p>@Headers()<br>这个是写在方法上的<br>如果请求头是固定的，就可以使用这个</p>
<p>@Header与@HeaderMap作为参数使用的<br>请求头不固定，要动态添加 就使用，2个用法就和@Field 与@FieldMap一样</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">@POST(&quot;p/userCenter&quot;)</div><div class="line">Call&lt;String&gt; getUserCenter(@HeaderMap Map&lt;String,String&gt; headers);</div></pre></td></tr></table></figure>
<ul>
<li>调用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">private void getUserInfo()&#123;</div><div class="line">       </div><div class="line">       /**</div><div class="line">        * 初始化</div><div class="line">        */</div><div class="line">       Retrofit retrofit = new Retrofit.Builder()</div><div class="line">               .baseUrl(baseUrl)</div><div class="line">               .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">               .addConverterFactory(GsonConverterFactory.create())</div><div class="line">               .build();</div><div class="line"></div><div class="line">       //生成对象的Service</div><div class="line">       LoginService loginService = retrofit.create(LoginService.class);</div><div class="line">     /*  SimpleDateFormat     dateFormat   = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</div><div class="line"></div><div class="line">       String              date  = dateFormat.format(new Date());*/</div><div class="line"></div><div class="line">       /**</div><div class="line">        * 这里测试参数写死了，实际可以改变，</div><div class="line">        */</div><div class="line">       Map&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;();</div><div class="line">       headers.put(&quot;userId&quot;, &quot;402882823a9d5e0d013a9dabe3680002&quot;);</div><div class="line">       headers.put(&quot;userName&quot;, &quot;home&quot;);</div><div class="line">       headers.put(&quot;accessToken&quot;, &quot;A0BdgCrMG22CwfSKrlsEPAs3ZAozND&quot;);</div><div class="line">       //当前时间，因为后台加密，原因写死 </div><div class="line">       headers.put(&quot;time&quot;, &quot;2016-10-27 13:28:07&quot;);</div><div class="line">       headers.put(&quot;verId&quot;,&quot;V1.0&quot;);</div><div class="line"></div><div class="line">   //这个是加载后的数据后台接收后，同样有一个比对</div><div class="line">       String validateCode = &quot;674BA63B66D0D4A1E6C9EED16CE193C7&quot;;</div><div class="line">       headers.put(&quot;code&quot;, validateCode);</div><div class="line"></div><div class="line"></div><div class="line">       Call&lt;String&gt; userCall = loginService.getUserCenter(headers);</div><div class="line">       userCall.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line">               L.d(&quot;vivi&quot;,response.message()+&quot;   &quot;+response.body());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line">               L.d(&quot;vivi&quot;,t.getMessage());</div><div class="line">               L.d(&quot;vivi&quot;,t.toString());</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK   &#123;&quot;msg&quot;:&quot;OK&quot;,&quot;result&quot;:&#123;&quot;availablePredeposit&quot;:28,&quot;favoriteLength&quot;:2,&quot;messageCount&quot;:1,&quot;nickName&quot;:&quot;home123&quot;,&quot;portraitPic&quot;:&quot;2016/10/27/92f2272d-cf41-4f22-bf46-905575197441.jpg&quot;,&quot;score&quot;:602,&quot;subCountsDtoList&quot;:[&#123;&quot;status&quot;:&quot;UNPAY&quot;,&quot;subCounts&quot;:15&#125;,&#123;&quot;status&quot;:&quot;PADYED&quot;,&quot;subCounts&quot;:1&#125;,&#123;&quot;status&quot;:&quot;SUCCESS&quot;,&quot;subCounts&quot;:1&#125;,&#123;&quot;status&quot;:&quot;CLOSE&quot;,&quot;subCounts&quot;:3&#125;],&quot;userId&quot;:&quot;402882823a9d5e0d013a9dabe3680002&quot;,&quot;userMobile&quot;:&quot;13800138000&quot;,&quot;userName&quot;:&quot;home&quot;&#125;,&quot;status&quot;:1,&quot;verId&quot;:&quot;1.0&quot;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果传过去是一个空的map就请求不到数据</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK   &#123;&quot;msg&quot;:&quot;401 user validate failed&quot; ,&quot;result&quot;:null,&quot;status&quot;:&quot;401&quot;,&quot;verId&quot;:&quot;1.0&quot;&#125;</div></pre></td></tr></table></figure>
<p>@Headers()<br>@Header()<br>@HeaderMap<br>基本上是用于过滤请求的</p>
<p>源码：<br><a href="https://github.com/ln0491/RetrofitDemo2" target="_blank" rel="external">https://github.com/ln0491/RetrofitDemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Retrofit学习-三-普通post请求&quot;&gt;&lt;a href=&quot;#Retrofit学习-三-普通post请求&quot; class=&quot;headerlink&quot; title=&quot;Retrofit学习(三)-普通post请求&quot;&gt;&lt;/a&gt;Retrofit学习(三)-普通post请求
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="Retrofit" scheme="https://ln0491.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit学习(二)-get请求.</title>
    <link href="https://ln0491.github.io/2016/10/26/Retrofit%E5%AD%A6%E4%B9%A0-%E4%BA%8C-get%E8%AF%B7%E6%B1%82/"/>
    <id>https://ln0491.github.io/2016/10/26/Retrofit学习-二-get请求/</id>
    <published>2016-10-26T05:29:32.000Z</published>
    <updated>2016-10-26T09:42:16.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Retrofit学习-二-get请求"><a href="#Retrofit学习-二-get请求" class="headerlink" title="Retrofit学习(二)-get请求"></a>Retrofit学习(二)-get请求</h2><h3 id="环境、简单封装"><a href="#环境、简单封装" class="headerlink" title="环境、简单封装"></a>环境、简单封装</h3><p>Retrofit学习(一)-集成<br><a href="http://www.jianshu.com/p/86e5cddcc753" target="_blank" rel="external">http://www.jianshu.com/p/86e5cddcc753</a></p>
<h3 id="建立接口"><a href="#建立接口" class="headerlink" title="建立接口"></a>建立接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 方法不要加返回值之类的void String。。CAll&lt;String&gt;代表返回值</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">@GET(&quot;rank&quot;)</div><div class="line">Call&lt;String&gt; getRank(@Query(&quot;key&quot;) String key ,@Query(&quot;area&quot;) String area);</div></pre></td></tr></table></figure>
<h4 id="建立请求"><a href="#建立请求" class="headerlink" title="建立请求"></a>建立请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">String baseUrl = &quot;http://v.juhe.cn/boxoffice/&quot;;</div><div class="line"></div><div class="line">       String appKey = &quot;a915893513986a67fdac70235db2c0af&quot;;</div><div class="line"></div><div class="line"></div><div class="line">       Retrofit retrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(baseUrl)</div><div class="line">               .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">               .addConverterFactory(GsonConverterFactory.create())</div><div class="line">               .build();</div><div class="line"></div><div class="line">       DayService dayService = retrofit.create(DayService.class);</div><div class="line"></div><div class="line"></div><div class="line">       Call&lt;String&gt; call = dayService.getRank(appKey,&quot;CN&quot;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">       call.enqueue(new Callback&lt;String&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) &#123;</div><div class="line"></div><div class="line">               L.d(&quot;vivi&quot;,response.message()+ &quot;    &quot;+ response.body());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onFailure(Call&lt;String&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">               t.printStackTrace();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>结果：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vivi: OK    &#123;&quot;resultcode&quot;:&quot;200&quot;,&quot;reason&quot;:&quot;success&quot;,&quot;result&quot;:[&#123;&quot;rid&quot;:&quot;1&quot;,&quot;name&quot;:&quot;湄公河行动&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;53200&quot;,&quot;tboxoffice&quot;:&quot;53200&quot;&#125;,&#123;&quot;rid&quot;:&quot;2&quot;,&quot;name&quot;:&quot;从你的全世界路过&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;46800&quot;,&quot;tboxoffice&quot;:&quot;46800&quot;&#125;,&#123;&quot;rid&quot;:&quot;3&quot;,&quot;name&quot;:&quot;爵迹&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;27500&quot;,&quot;tboxoffice&quot;:&quot;27500&quot;&#125;,&#123;&quot;rid&quot;:&quot;4&quot;,&quot;name&quot;:&quot;王牌逗王牌&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;18900&quot;,&quot;tboxoffice&quot;:&quot;18900&quot;&#125;,&#123;&quot;rid&quot;:&quot;5&quot;,&quot;name&quot;:&quot;鲁滨逊漂流记&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;3800&quot;,&quot;tboxoffice&quot;:&quot;3800&quot;&#125;,&#123;&quot;rid&quot;:&quot;6&quot;,&quot;name&quot;:&quot;逗鸟外传：萌宝满天飞&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;3050&quot;,&quot;tboxoffice&quot;:&quot;3050&quot;&#125;,&#123;&quot;rid&quot;:&quot;7&quot;,&quot;name&quot;:&quot;铠甲勇士捕王&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;1745&quot;,&quot;tboxoffice&quot;:&quot;1745&quot;&#125;,&#123;&quot;rid&quot;:&quot;8&quot;,&quot;name&quot;:&quot;我是哪吒&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;927&quot;,&quot;tboxoffice&quot;:&quot;927&quot;&#125;,&#123;&quot;rid&quot;:&quot;9&quot;,&quot;name&quot;:&quot;七月与安生&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;359&quot;,&quot;tboxoffice&quot;:&quot;16689&quot;&#125;,&#123;&quot;rid&quot;:&quot;10&quot;,&quot;name&quot;:&quot;疯狂丑小鸭&quot;,&quot;wk&quot;:&quot;2016.10.1- 2016.10.7（单位：万元）&quot;,&quot;wboxoffice&quot;:&quot;318&quot;,&quot;tboxoffice&quot;:&quot;318&quot;&#125;],&quot;error_code&quot;:0&#125;</div></pre></td></tr></table></figure>
<p>这里看到<br>@Query表示一个参数key,String 表示要传进来的值<br>@Query(“key”) String key ,@Query(“area”) String area</p>
<p>String 的名字可以和@Query中的不一样，建立保持一致，<br>@Query表示是键</p>
<h4 id="将数据转换为BEAN，一样写法只是返回值变为实体类"><a href="#将数据转换为BEAN，一样写法只是返回值变为实体类" class="headerlink" title="将数据转换为BEAN，一样写法只是返回值变为实体类"></a>将数据转换为BEAN，一样写法只是返回值变为实体类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class RankBean &#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    public String resultcode;</div><div class="line">    public String reason;</div><div class="line">    public int    error_code;</div><div class="line">  </div><div class="line"></div><div class="line">    public List&lt;ResultEntity&gt; result;</div><div class="line"></div><div class="line">    public static class ResultEntity &#123;</div><div class="line">        public String rid;</div><div class="line">        public String name;</div><div class="line">        public String wk;</div><div class="line">        public String wboxoffice;</div><div class="line">        public String tboxoffice;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 方法不要加返回值之类的void String。。CAll&lt;String&gt;代表返回值</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @GET(&quot;rank&quot;)</div><div class="line">    Call&lt;RankBean&gt; getRank(@Query(&quot;key&quot;) String key , @Query(&quot;area&quot;) String area);</div></pre></td></tr></table></figure>
<h3 id="参数过多时使用-QueryMap"><a href="#参数过多时使用-QueryMap" class="headerlink" title="参数过多时使用@QueryMap"></a>参数过多时使用@QueryMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 使用@QueryMap</div><div class="line">    * @param params</div><div class="line">    * @return</div><div class="line">    */</div><div class="line">   @GET(&quot;rank&quot;)</div><div class="line">   Call&lt;RankBean&gt; getRank2(@QueryMap Map&lt;String,String&gt; params);</div><div class="line"></div><div class="line">/**</div><div class="line">    * 使用QueryMap传参数</div><div class="line">    */</div><div class="line">   private void getQueryMap() &#123;</div><div class="line">       String baseUrl = &quot;http://v.juhe.cn/boxoffice/&quot;;</div><div class="line">       String appKey = &quot;a915893513986a67fdac70235db2c0af&quot;;</div><div class="line"></div><div class="line"></div><div class="line">       Retrofit retrofit = new Retrofit.Builder()</div><div class="line">               .baseUrl(baseUrl)</div><div class="line">               .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">               .addConverterFactory(GsonConverterFactory.create())</div><div class="line">               .build();</div><div class="line"></div><div class="line">       DayService dayService = retrofit.create(DayService.class);</div><div class="line"></div><div class="line"></div><div class="line">       /**</div><div class="line">        * 传入多个参数，自己写key-value</div><div class="line">        */</div><div class="line">       Map&lt;String,String&gt; params = new HashMap&lt;&gt;();</div><div class="line"></div><div class="line">       params.put(&quot;key&quot;,appKey);</div><div class="line">       params.put(&quot;area&quot;,&quot;HK&quot;);</div><div class="line">       Call&lt;RankBean&gt; rank2Call = dayService.getRank2(params);</div><div class="line"></div><div class="line">       rank2Call.enqueue(new Callback&lt;RankBean&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public void onResponse(Call&lt;RankBean&gt; call, Response&lt;RankBean&gt; response) &#123;</div><div class="line">               Toast.makeText(FirstActivity.this, &quot;response  \n&quot;+response.body().toString(), Toast.LENGTH_SHORT).show();</div><div class="line">               L.d(&quot;vivi&quot;,response.message()+ &quot;    &quot;+ response.body().toString());</div><div class="line">               mTvResult.setText(response.body().toString());</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public void onFailure(Call&lt;RankBean&gt; call, Throwable t) &#123;</div><div class="line">               t.printStackTrace();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="URL注意事件"><a href="#URL注意事件" class="headerlink" title="URL注意事件"></a>URL注意事件</h3><p>图片来源:<br><a href="https://inthecheesefactory.com/blog/retrofit-2.0/en" target="_blank" rel="external">https://inthecheesefactory.com/blog/retrofit-2.0/en</a><br><img src="https://ln0491.github.io/img/apiservice1.png" alt="apiservice1.png"><br><img src="https://ln0491.github.io/img/apiservice2.png" alt="apiservice2.png"><br><img src="https://ln0491.github.io/img/apiservice3.png" alt="apiservice3.png"></p>
<p>Base URL: 在最后加下 /</p>
<p>@Url（@GET,@POST）: 不要在开始位置加 /</p>
<h3 id="配制HEADER"><a href="#配制HEADER" class="headerlink" title="配制HEADER"></a>配制HEADER</h3><p>用 @Headers 设置Http请求的header<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Headers(&quot;Cache-Control: max-age=640000&quot;)</div><div class="line">@GET(&quot;/widget/list&quot;)</div><div class="line">void widgetList(Call&lt;List&lt;Widget&gt;&gt; call);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Headers(&#123;</div><div class="line">    &quot;Accept: application/vnd.github.v3.full+json&quot;,</div><div class="line">    &quot;User-Agent: Retrofit-Sample-App&quot;</div><div class="line">&#125;)</div><div class="line">@GET(&quot;/users/&#123;username&#125;&quot;)</div><div class="line">void getUser(@Path(&quot;username&quot;) String username, Call&lt;User&gt;);</div></pre></td></tr></table></figure>
<p> Call<user>写前面也行，写这里也行</user></p>
<p>Http请求头不会互相覆盖，如果存在多个请求头的名字相同，那么它们全部都会被包含在Http请求中。</p>
<h4 id="动态更新HEADER"><a href="#动态更新HEADER" class="headerlink" title="动态更新HEADER"></a>动态更新HEADER</h4><p>在请求方法的参数中，用 @Header 动态更新Http请求头</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@GET(&quot;/user&quot;)</div><div class="line">  void getUser(@Header(&quot;Authorization&quot;) String authorization)</div></pre></td></tr></table></figure>
<p>参数不能为null，否则这个header将会被删掉。<br>@Headers可以用来判断用户是否有权限访问某些资源，如：访问用户的个人信息,只有登录了，才能带着自己的ID，tokey之类的去取个人信息</p>
<p>源码：<br><a href="https://github.com/ln0491/RetrofitDemo2" target="_blank" rel="external">https://github.com/ln0491/RetrofitDemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Retrofit学习-二-get请求&quot;&gt;&lt;a href=&quot;#Retrofit学习-二-get请求&quot; class=&quot;headerlink&quot; title=&quot;Retrofit学习(二)-get请求&quot;&gt;&lt;/a&gt;Retrofit学习(二)-get请求&lt;/h2&gt;&lt;h3 id=
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="Retrofit" scheme="https://ln0491.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit学习(一)集成-简单get请求</title>
    <link href="https://ln0491.github.io/2016/10/26/Retrofit%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E9%9B%86%E6%88%90-%E7%AE%80%E5%8D%95get%E8%AF%B7%E6%B1%82/"/>
    <id>https://ln0491.github.io/2016/10/26/Retrofit学习-一-集成-简单get请求/</id>
    <published>2016-10-26T04:24:38.000Z</published>
    <updated>2016-10-26T05:26:30.484Z</updated>
    
    <content type="html"><![CDATA[<p>##Retrofit学习(一)集成-简单get请求</p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><p>github<a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></p>
<p>在studio在添加依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> //添加retrofit-会自动下载okhttp</div><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.1.0&apos;</div><div class="line">    //添加retrofit gson转换会自动下载gson</div><div class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.1.0&apos;</div><div class="line">    //添加返回的字符串支付</div><div class="line">compile &apos;com.squareup.retrofit2:converter-scalars:2.1.0&apos;</div></pre></td></tr></table></figure>
<p>可以用其它的retrofit2支付的替代见连接<br>转换可以在API处找到<br><a href="http://square.github.io/retrofit/#api-declaration" target="_blank" rel="external">http://square.github.io/retrofit/#api-declaration</a><br>右侧点击Retrofit Configuration版本与retrofit2保持一直即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Gson: com.squareup.retrofit2:converter-gson</div><div class="line">Jackson: com.squareup.retrofit2:converter-jackson</div><div class="line">Moshi: com.squareup.retrofit2:converter-moshi</div><div class="line">Protobuf: com.squareup.retrofit2:converter-protobuf</div><div class="line">Wire: com.squareup.retrofit2:converter-wire</div><div class="line">Simple XML: com.squareup.retrofit2:converter-simplexml</div><div class="line">Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</div></pre></td></tr></table></figure></p>
<h3 id="第一个get请求"><a href="#第一个get请求" class="headerlink" title="第一个get请求"></a>第一个get请求</h3><p>添加网络权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>建立接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface GitHubService &#123;</div><div class="line"></div><div class="line"></div><div class="line">    @GET(&quot;users/&#123;user&#125;/repos&quot;)</div><div class="line">    Call&lt;String&gt; listRepos(@Path(&quot;user&quot;) String user);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单说明一下<br>@GET表示为get请求，还会有@POST<br>@PATH 表示后面的参数要添加到@GETR后面对应的{user}中，{user}相当于一个占位符<br>学习spring MVC都知道这种做学法把请求参数添加到请求路径中去，</p>
<p>@Query就是我们的请求的键值对的设置<br>@QueryMap 和@Query相似 就是个传个map集合,也是键值对</p>
<h3 id="开始请求"><a href="#开始请求" class="headerlink" title="开始请求"></a>开始请求</h3><p>界面就一个按键点击可以请求</p>
<blockquote>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OK  [&#123;&quot;id&quot;:18221276,&quot;name&quot;:&quot;git-consortium&quot;,&quot;full_name&quot;:&quot;octocat/git-consortium&quot;,&quot;owner&quot;:&#123;&quot;login&quot;:&quot;octocat&quot;,&quot;id&quot;:583231,&quot;avatar_url&quot;:&quot;https://avatars.githubusercontent.com/u/583231?v=3&quot;,&quot;gravatar_id&quot;:&quot;&quot;,&quot;url&quot;:&quot;https://api.github.com/users/octocat&quot;,&quot;html_url&quot;:&quot;https://github.com/octocat&quot;,&quot;followers_url&quot;:&quot;https://api.github.com/users/octocat/followers&quot;,&quot;following_url&quot;:&quot;https://api.github.com/users/octocat/following&#123;/other_user&#125;&quot;,&quot;gists_url&quot;:&quot;https://api.github.com/users/octocat/gists&#123;/gist_id&#125;&quot;,&quot;starred_url&quot;:&quot;https://api.github.com/users/octocat/starred&#123;/owner&#125;&#123;/repo&#125;&quot;,&quot;subscriptions_url&quot;:&quot;https://api.github.com/users/octocat/subscriptions&quot;,&quot;organizations_url&quot;:&quot;https://api.github.com/users/octocat/orgs&quot;,&quot;repos_url&quot;:&quot;https://api.github.com/users/octocat/repos&quot;,&quot;events_url&quot;:&quot;https://api.github.com/users/octocat/events&#123;/privacy&#125;&quot;,&quot;received_events_url&quot;:&quot;https://api.github.com/users/octocat/received_events&quot;,&quot;type&quot;:&quot;User&quot;,&quot;site_admin&quot;:false&#125;,&quot;private&quot;:false,&quot;html_url&quot;:&quot;https://github.com/octocat/git-consortium&quot;,&quot;description&quot;:&quot;This repo is for demonstration purposes only.&quot;,&quot;fork&quot;:false,&quot;url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium&quot;,&quot;forks_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/forks&quot;,&quot;keys_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/keys&#123;/key_id&#125;&quot;,&quot;collaborators_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/collaborators&#123;/collaborator&#125;&quot;,&quot;teams_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/teams&quot;,&quot;hooks_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/hooks&quot;,&quot;issue_events_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/issues/events&#123;/number&#125;&quot;,&quot;events_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/events&quot;,&quot;assignees_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/assignees&#123;/user&#125;&quot;,&quot;branches_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/branches&#123;/branch&#125;&quot;,&quot;tags_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/tags&quot;,&quot;blobs_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/git/blobs&#123;/sha&#125;&quot;,&quot;git_tags_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/git/tags&#123;/sha&#125;&quot;,&quot;git_refs_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/git/refs&#123;/sha&#125;&quot;,&quot;trees_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/git/trees&#123;/sha&#125;&quot;,&quot;statuses_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/statuses/&#123;sha&#125;&quot;,&quot;languages_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/languages&quot;,&quot;stargazers_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/stargazers&quot;,&quot;contributors_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/contributors&quot;,&quot;subscribers_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/subscribers&quot;,&quot;subscription_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/subscription&quot;,&quot;commits_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/commits&#123;/sha&#125;&quot;,&quot;git_commits_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/git/commits&#123;/sha&#125;&quot;,&quot;comments_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/comments&#123;/number&#125;&quot;,&quot;issue_comment_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/issues/comments&#123;/number&#125;&quot;,&quot;contents_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/contents/&#123;+path&#125;&quot;,&quot;compare_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/compare/&#123;base&#125;...&#123;head&#125;&quot;,&quot;merges_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/merges&quot;,&quot;archive_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/&#123;archive_format&#125;&#123;/ref&#125;&quot;,&quot;downloads_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/downloads&quot;,&quot;issues_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/issues&#123;/number&#125;&quot;,&quot;pulls_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/pulls&#123;/number&#125;&quot;,&quot;milestones_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/milestones&#123;/number&#125;&quot;,&quot;notifications_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/notifications&#123;?since,all,participating&#125;&quot;,&quot;labels_url&quot;:&quot;https://api.github.com/repos/octocat/git-consortium/labels&#123;/name&#125;&quot;,&quot;releases_url&quot;:&quot;https://api.github.com</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样一个网络请求就完成了</p>
<p>把返回字符串返回实体类使用Gson</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">public class Repo &#123;</div><div class="line"></div><div class="line">    public int id;</div><div class="line">    public String name;</div><div class="line">    public String full_name;</div><div class="line">    public OwnerEntity owner;</div><div class="line">    @SerializedName(&quot;private&quot;)</div><div class="line">    public boolean privateX;</div><div class="line">    public String  html_url;</div><div class="line">    public Object  description;</div><div class="line">    public boolean fork;</div><div class="line">    public String  url;</div><div class="line">    public String  forks_url;</div><div class="line">    public String  keys_url;</div><div class="line">    public String  collaborators_url;</div><div class="line">    public String  teams_url;</div><div class="line">    public String  hooks_url;</div><div class="line">    public String  issue_events_url;</div><div class="line">    public String  events_url;</div><div class="line">    public String  assignees_url;</div><div class="line">    public String  branches_url;</div><div class="line">    public String  tags_url;</div><div class="line">    public String  blobs_url;</div><div class="line">    public String  git_tags_url;</div><div class="line">    public String  git_refs_url;</div><div class="line">    public String  trees_url;</div><div class="line">    public String  statuses_url;</div><div class="line">    public String  languages_url;</div><div class="line">    public String  stargazers_url;</div><div class="line">    public String  contributors_url;</div><div class="line">    public String  subscribers_url;</div><div class="line">    public String  subscription_url;</div><div class="line">    public String  commits_url;</div><div class="line">    public String  git_commits_url;</div><div class="line">    public String  comments_url;</div><div class="line">    public String  issue_comment_url;</div><div class="line">    public String  contents_url;</div><div class="line">    public String  compare_url;</div><div class="line">    public String  merges_url;</div><div class="line">    public String  archive_url;</div><div class="line">    public String  downloads_url;</div><div class="line">    public String  issues_url;</div><div class="line">    public String  pulls_url;</div><div class="line">    public String  milestones_url;</div><div class="line">    public String  notifications_url;</div><div class="line">    public String  labels_url;</div><div class="line">    public String  releases_url;</div><div class="line">    public String  deployments_url;</div><div class="line">    public String  created_at;</div><div class="line">    public String  updated_at;</div><div class="line">    public String  pushed_at;</div><div class="line">    public String  git_url;</div><div class="line">    public String  ssh_url;</div><div class="line">    public String  clone_url;</div><div class="line">    public String  svn_url;</div><div class="line">    public Object  homepage;</div><div class="line">    public int     size;</div><div class="line">    public int     stargazers_count;</div><div class="line">    public int     watchers_count;</div><div class="line">    public String  language;</div><div class="line">    public boolean has_issues;</div><div class="line">    public boolean has_downloads;</div><div class="line">    public boolean has_wiki;</div><div class="line">    public boolean has_pages;</div><div class="line">    public int     forks_count;</div><div class="line">    public Object  mirror_url;</div><div class="line">    public int     open_issues_count;</div><div class="line">    public int     forks;</div><div class="line">    public int     open_issues;</div><div class="line">    public int     watchers;</div><div class="line">    public String  default_branch;</div><div class="line"></div><div class="line">    public static class OwnerEntity &#123;</div><div class="line">        public String  login;</div><div class="line">        public int     id;</div><div class="line">        public String  avatar_url;</div><div class="line">        public String  gravatar_id;</div><div class="line">        public String  url;</div><div class="line">        public String  html_url;</div><div class="line">        public String  followers_url;</div><div class="line">        public String  following_url;</div><div class="line">        public String  gists_url;</div><div class="line">        public String  starred_url;</div><div class="line">        public String  subscriptions_url;</div><div class="line">        public String  organizations_url;</div><div class="line">        public String  repos_url;</div><div class="line">        public String  events_url;</div><div class="line">        public String  received_events_url;</div><div class="line">        public String  type;</div><div class="line">        public boolean site_admin;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>记得添加toString方法方法查看</p>
<p>更改接口返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface GitHubService &#123;</div><div class="line"></div><div class="line"></div><div class="line">    @GET(&quot;users/&#123;user&#125;/repos&quot;)</div><div class="line">    Call&lt;List&lt;Repo&gt;&gt; listRepos(@Path(&quot;user&quot;) String user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>再次请求</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">    //建立retrofit对象</div><div class="line">    Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;https://api.github.com/&quot;)</div><div class="line">            //添加返回字符串的支持--不知道返回的是什么，添加字符串支持</div><div class="line">            .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">            //添加GSON转换支持</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .build();</div><div class="line"></div><div class="line">    //获取接口</div><div class="line">    GitHubService service = retrofit.create(GitHubService.class);</div><div class="line"></div><div class="line">    //调用方法-返回 回调更换为对象</div><div class="line">    Call&lt;List&lt;Repo&gt;&gt; call = service.listRepos(&quot;octocat&quot;);</div><div class="line"></div><div class="line">    //异步调用</div><div class="line">    call.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) &#123;</div><div class="line"></div><div class="line">            L.d(&quot;vivi&quot;,response.message()+&quot;  &quot;+response.body());</div><div class="line">            mTvResult.setText(response.message()+&quot; \n结果: &quot;+response.body().toString());</div><div class="line">            Toast.makeText(FirstActivity.this, &quot;结果:\n &quot;+response.body().toString(), Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">            t.printStackTrace();</div><div class="line">            mTvResult.setText(t.getMessage());</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>简单封装</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class RetrofitWrapper &#123;</div><div class="line">    //单例</div><div class="line">    private static RetrofitWrapper INSTANCE;</div><div class="line">    // Retrofit 对象</div><div class="line">    private Retrofit mRetrofit;</div><div class="line"></div><div class="line">    private RetrofitWrapper()&#123;</div><div class="line">        mRetrofit = new Retrofit.Builder()</div><div class="line">                .baseUrl(Constant.BASE_URL)  //添加baseurl</div><div class="line">                .addConverterFactory(ScalarsConverterFactory.create()) //添加返回为字符串的支持</div><div class="line">                .addConverterFactory(GsonConverterFactory.create()) //create中可以传入其它json对象，默认Gson</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    public static RetrofitWrapper getInstance() &#123;</div><div class="line"></div><div class="line">        if(INSTANCE == null) &#123;</div><div class="line">            synchronized(RetrofitWrapper.class) &#123;</div><div class="line">                if(INSTANCE == null) &#123;</div><div class="line">                    INSTANCE = new RetrofitWrapper();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 转换为对象的Service</div><div class="line">     * @param service</div><div class="line">     * @param &lt;T&gt;</div><div class="line">     * @return 传入的类型</div><div class="line">     */</div><div class="line">    public &lt;T&gt; T create(Class&lt;T&gt; service)&#123;</div><div class="line">        return mRetrofit.create(service);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Call&lt;List&lt;Repo&gt;&gt; call = RetrofitWrapper.getInstance().create(GitHubService.class).listRepos(&quot;octocat&quot;);</div><div class="line"></div><div class="line">callLn0941.enqueue(new Callback&lt;List&lt;Repo&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    public void onResponse(Call&lt;List&lt;Repo&gt;&gt; call, Response&lt;List&lt;Repo&gt;&gt; response) &#123;</div><div class="line">        // ...do something</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onFailure(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t) &#123;</div><div class="line">          // ...do something</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样用着方便很多<br>源码：<br><a href="https://github.com/ln0491/RetrofitDemo2" target="_blank" rel="external">https://github.com/ln0491/RetrofitDemo2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Retrofit学习(一)集成-简单get请求&lt;/p&gt;
&lt;h3 id=&quot;集成&quot;&gt;&lt;a href=&quot;#集成&quot; class=&quot;headerlink&quot; title=&quot;集成&quot;&gt;&lt;/a&gt;集成&lt;/h3&gt;&lt;p&gt;github&lt;a href=&quot;https://github.com/squ
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="Retrofit" scheme="https://ln0491.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>PorterDuffXfermode模式学习</title>
    <link href="https://ln0491.github.io/2016/10/25/PorterDuffXfermode%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ln0491.github.io/2016/10/25/PorterDuffXfermode模式学习/</id>
    <published>2016-10-25T09:11:07.000Z</published>
    <updated>2016-10-25T10:22:19.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PorterDuffXfermode学习"><a href="#PorterDuffXfermode学习" class="headerlink" title="PorterDuffXfermode学习"></a>PorterDuffXfermode学习</h2><p><img src="http://img.blog.csdn.net/20160517180528876" alt="http://img.blog.csdn.net/20160517180528876"></p>
<p>图片来自网络</p>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul>
<li>PorterDuff.Mode.CLEAR<br>  绘制不会提交到画布上</li>
<li>PorterDuff.Mode.SRC<br>  只显示绘制源图像</li>
<li>PorterDuff.Mode.DST<br>  只显示目标图像，即已在画布上的初始图像</li>
<li>PorterDuff.Mode.SRC_OVER<br>  正常绘制显示，即后绘制的叠加在原来绘制的图上</li>
<li>PorterDuff.Mode.DST_OVER<br>  上下两层都显示但是下层(DST)居上显示</li>
<li>PorterDuff.Mode.SRC_IN<br>  取两层绘制的交集且只显示上层(SRC)</li>
<li>PorterDuff.Mode.DST_IN<br>  取两层绘制的交集且只显示下层(DST)</li>
<li>PorterDuff.Mode.SRC_OUT<br>  取两层绘制的不相交的部分且只显示上层(SRC)</li>
<li>PorterDuff.Mode.DST_OUT<br>  取两层绘制的不相交的部分且只显示下层(DST)</li>
<li>PorterDuff.Mode.SRC_ATOP<br>  两层相交，取下层(DST)的非相交部分和上层(SRC)的相交部分</li>
<li>PorterDuff.Mode.DST_ATOP<br>  两层相交，取上层(SRC)的非相交部分和下层(DST)的相交部分</li>
<li>PorterDuff.Mode.XOR<br>  挖去两图层相交的部分</li>
<li>PorterDuff.Mode.DARKEN<br>  显示两图层全部区域且加深交集部分的颜色</li>
<li>PorterDuff.Mode.LIGHTEN<br>  显示两图层全部区域且点亮交集部分的颜色</li>
<li>PorterDuff.Mode.MULTIPLY<br>  显示两图层相交部分且加深该部分的颜色</li>
<li>PorterDuff.Mode.SCREEN<br>  显示两图层全部区域且将该部分颜色变为透明色</li>
</ul>
<h3 id="PorterDuff-Mode-CLEAR"><a href="#PorterDuff-Mode-CLEAR" class="headerlink" title="PorterDuff.Mode.CLEAR"></a>PorterDuff.Mode.CLEAR</h3><h3 id="PorterDuff-Mode-SRC"><a href="#PorterDuff-Mode-SRC" class="headerlink" title="PorterDuff.Mode.SRC"></a>PorterDuff.Mode.SRC</h3><h3 id="PorterDuff-Mode-DST"><a href="#PorterDuff-Mode-DST" class="headerlink" title="PorterDuff.Mode.DST"></a>PorterDuff.Mode.DST</h3><h3 id="PorterDuff-Mode-SRC-OVER"><a href="#PorterDuff-Mode-SRC-OVER" class="headerlink" title="PorterDuff.Mode.SRC_OVER"></a>PorterDuff.Mode.SRC_OVER</h3><h3 id="PorterDuff-Mode-DST-OVER"><a href="#PorterDuff-Mode-DST-OVER" class="headerlink" title="PorterDuff.Mode.DST_OVER"></a>PorterDuff.Mode.DST_OVER</h3><h3 id="PorterDuff-Mode-SRC-IN"><a href="#PorterDuff-Mode-SRC-IN" class="headerlink" title="PorterDuff.Mode.SRC_IN"></a>PorterDuff.Mode.SRC_IN</h3><h3 id="PorterDuff-Mode-DST-IN"><a href="#PorterDuff-Mode-DST-IN" class="headerlink" title="PorterDuff.Mode.DST_IN"></a>PorterDuff.Mode.DST_IN</h3><h3 id="PorterDuff-Mode-SRC-OUT"><a href="#PorterDuff-Mode-SRC-OUT" class="headerlink" title="PorterDuff.Mode.SRC_OUT"></a>PorterDuff.Mode.SRC_OUT</h3><h3 id="PorterDuff-Mode-DST-OUT"><a href="#PorterDuff-Mode-DST-OUT" class="headerlink" title="PorterDuff.Mode.DST_OUT"></a>PorterDuff.Mode.DST_OUT</h3><h3 id="PorterDuff-Mode-SRC-ATOP"><a href="#PorterDuff-Mode-SRC-ATOP" class="headerlink" title="PorterDuff.Mode.SRC_ATOP"></a>PorterDuff.Mode.SRC_ATOP</h3><h3 id="PorterDuff-Mode-DST-ATOP"><a href="#PorterDuff-Mode-DST-ATOP" class="headerlink" title="PorterDuff.Mode.DST_ATOP"></a>PorterDuff.Mode.DST_ATOP</h3><h3 id="PorterDuff-Mode-XOR"><a href="#PorterDuff-Mode-XOR" class="headerlink" title="PorterDuff.Mode.XOR"></a>PorterDuff.Mode.XOR</h3><h3 id="PorterDuff-Mode-DARKEN"><a href="#PorterDuff-Mode-DARKEN" class="headerlink" title="PorterDuff.Mode.DARKEN"></a>PorterDuff.Mode.DARKEN</h3><h3 id="PorterDuff-Mode-LIGHTEN"><a href="#PorterDuff-Mode-LIGHTEN" class="headerlink" title="PorterDuff.Mode.LIGHTEN"></a>PorterDuff.Mode.LIGHTEN</h3><h3 id="PorterDuff-Mode-MULTIPLY"><a href="#PorterDuff-Mode-MULTIPLY" class="headerlink" title="PorterDuff.Mode.MULTIPLY"></a>PorterDuff.Mode.MULTIPLY</h3><h3 id="PorterDuff-Mode-SCREEN"><a href="#PorterDuff-Mode-SCREEN" class="headerlink" title="PorterDuff.Mode.SCREEN"></a>PorterDuff.Mode.SCREEN</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PorterDuffXfermode学习&quot;&gt;&lt;a href=&quot;#PorterDuffXfermode学习&quot; class=&quot;headerlink&quot; title=&quot;PorterDuffXfermode学习&quot;&gt;&lt;/a&gt;PorterDuffXfermode学习&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="PorterDuffXfermode" scheme="https://ln0491.github.io/tags/PorterDuffXfermode/"/>
    
  </entry>
  
  <entry>
    <title>MeasureSpec模式</title>
    <link href="https://ln0491.github.io/2016/10/25/MeasureSpec%E6%A8%A1%E5%BC%8F/"/>
    <id>https://ln0491.github.io/2016/10/25/MeasureSpec模式/</id>
    <published>2016-10-25T09:06:48.000Z</published>
    <updated>2016-10-25T09:07:54.118Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MeasureSpec模式"><a href="#MeasureSpec模式" class="headerlink" title="MeasureSpec模式"></a>MeasureSpec模式</h2><h3 id="子View的SpecMode为MeasureSpec-EXACTLY-完全-，父元素决定自元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小"><a href="#子View的SpecMode为MeasureSpec-EXACTLY-完全-，父元素决定自元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小" class="headerlink" title="子View的SpecMode为MeasureSpec.EXACTLY-(完全)，父元素决定自元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小"></a>子View的SpecMode为MeasureSpec.EXACTLY-(完全)，父元素决定自元素的确切大小，子元素将被限定在给定的边界里而忽略它本身大小</h3><ul>
<li>1.当子view为的LayoutParams的宽(高)采用具体的值(如100dp)宽高为固定大小,且父容器的MeasureSpec为MeasureSpec.EXACTLY或者MeasureSpec.AT_MOST或者MeasureSpec.UNSPECIFIED时：系统返回给该子View的specMode就为MeasureSpec.EXACTLY，系统返回给该子View的specSize就为子View自己指定的大小(childSize)。</li>
</ul>
<blockquote>
<p>这种情况，子view指定了宽高的具体值，不管父容器是什么返回的都是MeasureSpec.EXACTLY</p>
</blockquote>
<ul>
<li>2.当子View的LayoutParams的宽(高)采用match_parent时并且父容器的MeasureSpec为MeasureSpec.EXACTLY时：系统返回给该子View的specMode就为 MeasureSpec.EXACTLY，系统返回给该子View的specSize就为该父容器剩余空间的大小(parentLeftSize)。</li>
</ul>
<blockquote>
<p>这种情况View设置宽高为match_parent,父容器为宽高为固定指定了大小的100dp，之类的，就是告诉子view要和父容器一样大</p>
</blockquote>
<h3 id="子View的SpecMode为MeasureSpec-AT-MOST-至多-，子元素至多达到指定大小的值"><a href="#子View的SpecMode为MeasureSpec-AT-MOST-至多-，子元素至多达到指定大小的值" class="headerlink" title="子View的SpecMode为MeasureSpec.AT_MOST-(至多)，子元素至多达到指定大小的值"></a>子View的SpecMode为MeasureSpec.AT_MOST-(至多)，子元素至多达到指定大小的值</h3><ul>
<li>1.当子View的LayoutParams的宽(高)采用match_parent并且父容器的MeasureSpec为MeasureSpec.AT_MOST时：系统返回给该子View的specMode就为MeasureSpec.AT_MOST，系统返回给该子View的specSize就为该父容器剩余空间的大小(parentLeftSize)</li>
</ul>
<blockquote>
<p>当子viwe的宽高为match_parent,父容器的宽高为MeasureSpec为MeasureSpec.AT_MOST也就是wrap_content时，子view就是要和父容器一样大</p>
</blockquote>
<ul>
<li>2.当子View的LayoutParams的宽(高)采用wrap_content时并且父容器的MeasureSpec为MeasureSpec.EXACTLY时：系统返回给该子View的specMode就为 MeasureSpec.AT_MOST，系统返回给该子View的specSize就为该父容器剩余空间的大小(parentLeftSize)</li>
</ul>
<blockquote>
<p>子view的宽高是wrap_content，而父容器的宽高为指定的固定大小，子view要看内容来确定大小，这里系统返回的就是MeasureSpec.AT_MOST</p>
</blockquote>
<ul>
<li>3.当子View的LayoutParams的宽(高)采用wrap_content时并且父容器的MeasureSpec为MeasureSpec.AT_MOST时:系统返回给该子View的specMode就为MeasureSpec.AT_MOST，系统返回给该子View的specSize就为该父容器剩余空间的大小(parentLeftSize)</li>
</ul>
<blockquote>
<p>子View的LayoutParams的宽(高)采用wrap_content，即说明这个子View的宽高不明确,要视内容而定,这个时候父容器的MeasureSpec为MeasureSpec.AT_MOST。这种情况概况起来简单地说就是：子View的宽高是不确定的，父容器的宽高也是不确定的，那么系统返回给该子View的specMode也就是不确定的即为MeasureSpec.AT_MOST，系统返回给该子View的specSize就为该父容器剩余空间的大小(parentLeftSize)</p>
</blockquote>
<h3 id="的SpecMode为MeasureSpec-UNSPECIFIED-未指定"><a href="#的SpecMode为MeasureSpec-UNSPECIFIED-未指定" class="headerlink" title="的SpecMode为MeasureSpec.UNSPECIFIED-未指定"></a>的SpecMode为MeasureSpec.UNSPECIFIED-未指定</h3><p>一般都是父控件是AdapterView，通过measure方法传入的模式</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MeasureSpec模式&quot;&gt;&lt;a href=&quot;#MeasureSpec模式&quot; class=&quot;headerlink&quot; title=&quot;MeasureSpec模式&quot;&gt;&lt;/a&gt;MeasureSpec模式&lt;/h2&gt;&lt;h3 id=&quot;子View的SpecMode为Measur
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="自定义View" scheme="https://ln0491.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>GRADLE命令简单学习</title>
    <link href="https://ln0491.github.io/2016/10/24/GRADLE%E5%91%BD%E4%BB%A4%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://ln0491.github.io/2016/10/24/GRADLE命令简单学习/</id>
    <published>2016-10-24T09:43:24.000Z</published>
    <updated>2016-10-24T09:44:13.356Z</updated>
    
    <content type="html"><![CDATA[<p>##GRADLE命令简单学习</p>
<h3 id="1、-gradlew-v-来查看下项目所用的Gradle版本"><a href="#1、-gradlew-v-来查看下项目所用的Gradle版本" class="headerlink" title="1、./gradlew -v 来查看下项目所用的Gradle版本"></a>1、./gradlew -v 来查看下项目所用的Gradle版本</h3><p>如果你是第一次执行会去下载Gradle，这个过程如果不翻墙非常慢，建议翻墙</p>
<p>紧接着下载成功会看到如下信息：</p>
<pre><code>------------------------------------------------------------
Gradle 2.2.1
------------------------------------------------------------

Build time:   2014-11-24 09:45:35 UTC
Build number: none
Revision:     6fcb59c06f43a4e6b1bcb401f7686a8601a1fb4a

Groovy:       2.3.6
Ant:          Apache Ant(TM) version 1.9.3 compiled on December 23 2013
JVM:          1.7.0_60 (Oracle Corporation 24.60-b09)
OS:           Mac OS X 10.9.5 x86_64
</code></pre><h3 id="2、接着执行-gradlew-clean"><a href="#2、接着执行-gradlew-clean" class="headerlink" title="2、接着执行 ./gradlew clean"></a>2、接着执行 ./gradlew clean</h3><p>BUILD SUCCESSFUL</p>
<h3 id="3、最后执行-gradlew-build"><a href="#3、最后执行-gradlew-build" class="headerlink" title="3、最后执行 ./gradlew build"></a>3、最后执行 ./gradlew build</h3><p>这个命令会直接编译并生成相应的apk文件，如果看到如下字样就代表build成功了</p>
<h3 id="很有用的命令-assemble"><a href="#很有用的命令-assemble" class="headerlink" title="很有用的命令 assemble"></a>很有用的命令 <strong>assemble</strong></h3><ul>
<li>./gradlew assembleDebug 编译并打Debug包</li>
<li><p>./gradlew assembleRelease 编译并打Release的包除此之外，assemble还可以和productFlavors结合使用，具体在下一篇多渠道打包进一步解释。</p>
</li>
<li><p>./gradlew installRelease Release模式打包并安装</p>
</li>
<li>./gradlew uninstallRelease 卸载Release模式包</li>
</ul>
<h3 id="4-友盟多渠道打包"><a href="#4-友盟多渠道打包" class="headerlink" title="4.友盟多渠道打包"></a>4.友盟多渠道打包</h3><p>在AndroidManifest.xml里面会有这么一段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">    android:value=&quot;Channel_ID&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>里面的Channel_ID就是渠道标示。</p>
<ul>
<li><p>第一步 在AndroidManifest.xml里配置PlaceHolder</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">    android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>第二步 在build.gradle设置productFlavors</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    productFlavors &#123;</div><div class="line">        xiaomi &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;xiaomi&quot;]</div><div class="line">        &#125;</div><div class="line">        _360 &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;_360&quot;]</div><div class="line">        &#125;</div><div class="line">        baidu &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;baidu&quot;]</div><div class="line">        &#125;</div><div class="line">        wandoujia &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;wandoujia&quot;]</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者批量修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    productFlavors &#123;</div><div class="line">        xiaomi &#123;&#125;</div><div class="line">        _360 &#123;&#125;</div><div class="line">        baidu &#123;&#125;</div><div class="line">        wandoujia &#123;&#125;</div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    productFlavors.all &#123; </div><div class="line">        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>直接执行 ./gradlew assembleRelease打包</p>
<h3 id="assemble结合Build-Variants来创建task"><a href="#assemble结合Build-Variants来创建task" class="headerlink" title="assemble结合Build Variants来创建task"></a>assemble结合Build Variants来创建task</h3><ul>
<li>./gradlew assembleDebug</li>
<li>./gradlew assembleRelease</li>
</ul>
<p>assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而 Build Variants = Build Type + Product Flavor</p>
<ul>
<li><p>如果我们想打包wandoujia渠道的release版本，执行如下命令就好了：</p>
<p>  ./gradlew assembleWandoujiaRelease</p>
</li>
</ul>
<p>如果我们只打wandoujia渠道版本，则：</p>
<pre><code>./gradlew assembleWandoujia
</code></pre><ul>
<li><p>同理我想打全部Release版本：</p>
<p>  ./gradlew assembleRelease</p>
</li>
</ul>
<p>这条命令会把Product Flavor下的所有渠道的Release版本都打出来。</p>
<p>总之，assemble 命令创建task有如下用法</p>
<ul>
<li><strong>assemble</strong>： 允许直接构建一个Variant版本，例如assembleFlavor1Debug。</li>
<li><strong>assemble</strong>： 允许构建指定Build Type的所有APK，例如assembleDebug将会构建Flavor1Debug和Flavor2Debug两个Variant版本。</li>
<li><strong>assemble</strong>： 允许构建指定flavor的所有APK，例如assembleFlavor1将会构建Flavor1Debug和Flavor1Release两个Variant版本。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">     </div><div class="line">      </div><div class="line">      // dex突破65535的限制</div><div class="line">      multiDexEnabled true</div><div class="line">      // 默认是umeng的渠道</div><div class="line">      manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;umeng&quot;]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lintOptions &#123;</div><div class="line">      abortOnError false</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  signingConfigs &#123;</div><div class="line">      debug &#123;</div><div class="line">          // No debug config</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      release &#123;</div><div class="line">          storeFile file(&quot;../yourapp.keystore&quot;)</div><div class="line">          storePassword &quot;your password&quot;</div><div class="line">          keyAlias &quot;your alias&quot;</div><div class="line">          keyPassword &quot;your password&quot;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##GRADLE命令简单学习&lt;/p&gt;
&lt;h3 id=&quot;1、-gradlew-v-来查看下项目所用的Gradle版本&quot;&gt;&lt;a href=&quot;#1、-gradlew-v-来查看下项目所用的Gradle版本&quot; class=&quot;headerlink&quot; title=&quot;1、./gradle
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="工具" scheme="https://ln0491.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Glide 源码浅析</title>
    <link href="https://ln0491.github.io/2016/10/24/Glide-%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://ln0491.github.io/2016/10/24/Glide-源码浅析/</id>
    <published>2016-10-24T09:29:27.000Z</published>
    <updated>2016-10-24T09:39:44.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide-源码浅析"><a href="#Glide-源码浅析" class="headerlink" title="Glide 源码浅析"></a>Glide 源码浅析</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Glide.with(this).load(file).into(mIv3);</div></pre></td></tr></table></figure>
<h3 id="从with开始"><a href="#从with开始" class="headerlink" title="从with开始"></a>从with开始</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static RequestManager with(Context context) &#123;</div><div class="line">     RequestManagerRetriever retriever = RequestManagerRetriever.get();</div><div class="line">     return retriever.get(context);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>通过RequestManagerRetriever返回了一个RequestManager</p>
<h3 id="RequestManagerRetriever"><a href="#RequestManagerRetriever" class="headerlink" title="RequestManagerRetriever"></a>RequestManagerRetriever</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * A collection of static methods for creating new &#123;@link com.bumptech.glide.RequestManager&#125;s or retrieving existing</div><div class="line"> * ones from activities and fragment.</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>一个静态方法集合，用于创建或者检索，从Activitys和fragement集合中取回一个</p>
<ul>
<li>定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class RequestManagerRetriever implements Handler.Callback</div></pre></td></tr></table></figure>
</li>
</ul>
<p>实现了Handler.Callback接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface Callback &#123;</div><div class="line">        public boolean handleMessage(Message msg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Hanlder的回调方法</p>
<ul>
<li>类定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private static final RequestManagerRetriever INSTANCE = new RequestManagerRetriever();</div><div class="line">....</div><div class="line"></div><div class="line">RequestManagerRetriever() &#123;</div><div class="line">        handler = new Handler(Looper.getMainLooper(), this /* Callback */);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">        public static RequestManagerRetriever get() &#123;</div><div class="line">            return INSTANCE;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个类是个单例的,在构造方法中，创建了一个在主线程的handler对象</p>
<p>通过get方法，得到这个类的实例对象</p>
<ul>
<li><p>通过get得到RequestManager</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public RequestManager get(Context context) &#123;</div><div class="line">       if (context == null) &#123;</div><div class="line">       //判断上下文是否为空，</div><div class="line">           throw new IllegalArgumentException(&quot;You cannot start a load on a null Context&quot;);</div><div class="line">       &#125; else if (Util.isOnMainThread() &amp;&amp; !(context instanceof Application)) &#123;</div><div class="line">          //判断是不是在主线程中，同时content是不是全局的,这里不是全局的，才进入</div><div class="line">          //下面进行各种匹配</div><div class="line">           if (context instanceof FragmentActivity) &#123;</div><div class="line"></div><div class="line">               return get((FragmentActivity) context);</div><div class="line">           &#125; else if (context instanceof Activity) &#123;</div><div class="line">               return get((Activity) context);</div><div class="line">           &#125; else if (context instanceof ContextWrapper) &#123;</div><div class="line">               return get(((ContextWrapper) context).getBaseContext());</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       //以上都不是的话，就调全局的</div><div class="line">       return getApplicationManager(context);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>get((FragmentActivity) context)之类的各种匹配</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public RequestManager get(FragmentActivity activity) &#123;</div><div class="line">      if (Util.isOnBackgroundThread()) &#123;</div><div class="line">          return get(activity.getApplicationContext());</div><div class="line">      &#125; else &#123;</div><div class="line">          assertNotDestroyed(activity);</div><div class="line">          FragmentManager fm = activity.getSupportFragmentManager();</div><div class="line">          return supportFragmentGet(activity, fm);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>判断是不是后台线程，是就回调上面的public RequestManager get(Context context)方法，再判断</p>
<p>不是就先断言Activity是不是销毁了，是抛出异常，不是就创建一个FragmentManager，通过supportFragmentGet方法返回RequestManager</p>
<ul>
<li><p>assertNotDestroyed</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)</div><div class="line"> private static void assertNotDestroyed(Activity activity) &#123;</div><div class="line">     if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR1 &amp;&amp; activity.isDestroyed()) &#123;</div><div class="line">         throw new IllegalArgumentException(&quot;You cannot start a load for a destroyed activity&quot;);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>supportFragmentGet(activity, fm)</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">RequestManager supportFragmentGet(Context context, FragmentManager fm) &#123;</div><div class="line">        SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm);</div><div class="line">        RequestManager requestManager = current.getRequestManager();</div><div class="line">        if (requestManager == null) &#123;</div><div class="line">            requestManager = new RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());</div><div class="line">            current.setRequestManager(requestManager);</div><div class="line">        &#125;</div><div class="line">        return requestManager;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>首先获取SupportRequestManagerFragment对象这个就是一个fragment继承fragment<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class SupportRequestManagerFragment extends Fragment &#123;</div></pre></td></tr></table></figure></p>
<ul>
<li>SupportRequestManagerFragment<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SupportRequestManagerFragment getSupportRequestManagerFragment(final FragmentManager fm) &#123;</div><div class="line">     SupportRequestManagerFragment current = (SupportRequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</div><div class="line">     if (current == null) &#123;</div><div class="line">         current = pendingSupportRequestManagerFragments.get(fm);</div><div class="line">         if (current == null) &#123;</div><div class="line">             current = new SupportRequestManagerFragment();</div><div class="line">             pendingSupportRequestManagerFragments.put(fm, current);</div><div class="line">             //就添加到集合中，开启事务，</div><div class="line">             fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</div><div class="line">             //发送消息到Handler</div><div class="line">             handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget();</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     return current;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>首先获取SupportRequestManagerFragment，在集合中取出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (current == null) &#123;</div><div class="line">            current = pendingSupportRequestManagerFragments.get(fm);</div></pre></td></tr></table></figure></p>
<p>再判断是否为NULL,为空说明集合pendingSupportRequestManagerFragments中没有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/** Pending adds for SupportRequestManagerFragments. */</div><div class="line"> final Map&lt;FragmentManager, SupportRequestManagerFragment&gt; pendingSupportRequestManagerFragments =</div><div class="line">         new HashMap&lt;FragmentManager, SupportRequestManagerFragment&gt;();</div></pre></td></tr></table></figure></p>
<ul>
<li><p>通过构造方法new一个出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 通过构造方法new一个出来</div><div class="line">*/</div><div class="line">RequestManager supportFragmentGet(Context context, FragmentManager fm) &#123;</div><div class="line">//先得到一个SupportRequestManagerFragment</div><div class="line">    SupportRequestManagerFragment current = getSupportRequestManagerFragment(fm);</div><div class="line">    RequestManager requestManager = current.getRequestManager();</div><div class="line">    if (requestManager == null) &#123;</div><div class="line">        requestManager = new RequestManager(context, current.getLifecycle(), current.getRequestManagerTreeNode());</div><div class="line">        current.setRequestManager(requestManager);</div><div class="line">    &#125;</div><div class="line">    return requestManager;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>current.setRequestManager(requestManager);</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private RequestManager requestManager;</div><div class="line"></div><div class="line">public void setRequestManager(RequestManager requestManager) &#123;</div><div class="line">        this.requestManager = requestManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">public RequestManager getRequestManager() &#123;</div><div class="line">        return requestManager;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>先得到一个SupportRequestManagerFragment,通过SupportRequestManagerFragment的getRequestManager，得到requestManager<br>起到把请求和Activity生命周期同步的作用</p>
<ul>
<li>getApplicationManager<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private RequestManager getApplicationManager(Context context) &#123;</div><div class="line">    // Either an application context or we&apos;re on a background thread.</div><div class="line">    if (applicationManager == null) &#123;</div><div class="line">        synchronized (this) &#123;</div><div class="line">            if (applicationManager == null) &#123;</div><div class="line">                // Normally pause/resume is taken care of by the fragment we add to the fragment or activity.</div><div class="line">                // However, in this case since the manager attached to the application will not receive lifecycle</div><div class="line">                // events, we must force the manager to start resumed using ApplicationLifecycle.</div><div class="line">                applicationManager = new RequestManager(context.getApplicationContext(),</div><div class="line">                        new ApplicationLifecycle(), new EmptyRequestManagerTreeNode());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return applicationManager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> /** The top application level RequestManager. */</div><div class="line">    private volatile RequestManager applicationManager;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里的applicationManager就是RequestManager</p>
<ul>
<li><p>handleMessage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean handleMessage(Message message) &#123;</div><div class="line">       boolean handled = true;</div><div class="line">       Object removed = null;</div><div class="line">       Object key = null;</div><div class="line">       switch (message.what) &#123;</div><div class="line">           case ID_REMOVE_FRAGMENT_MANAGER:</div><div class="line">               android.app.FragmentManager fm = (android.app.FragmentManager) message.obj;</div><div class="line">               key = fm;</div><div class="line">               removed = pendingRequestManagerFragments.remove(fm);</div><div class="line">               break;</div><div class="line">           case ID_REMOVE_SUPPORT_FRAGMENT_MANAGER:</div><div class="line">               FragmentManager supportFm = (FragmentManager) message.obj;</div><div class="line">               key = supportFm;</div><div class="line">               removed = pendingSupportRequestManagerFragments.remove(supportFm);</div><div class="line">               break;</div><div class="line">           default:</div><div class="line">               handled = false;</div><div class="line">       &#125;</div><div class="line">       if (handled &amp;&amp; removed == null &amp;&amp; Log.isLoggable(TAG, Log.WARN)) &#123;</div><div class="line">           Log.w(TAG, &quot;Failed to remove expected request manager fragment, manager: &quot; + key);</div><div class="line">       &#125;</div><div class="line">       return handled;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>handle中就是移除发送过来的对象FragmentManager</p>
</li>
</ul>
<h3 id="RequestManager"><a href="#RequestManager" class="headerlink" title="RequestManager"></a>RequestManager</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class RequestManager implements LifecycleListener &#123;</div><div class="line"></div><div class="line">    public RequestManager(Context context, Lifecycle lifecycle, RequestManagerTreeNode treeNode) &#123;</div><div class="line">        this(context, lifecycle, treeNode, new RequestTracker(), new ConnectivityMonitorFactory());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    RequestManager(Context context, final Lifecycle lifecycle, RequestManagerTreeNode treeNode,</div><div class="line">            RequestTracker requestTracker, ConnectivityMonitorFactory factory) &#123;</div><div class="line">        this.context = context.getApplicationContext();</div><div class="line">        this.lifecycle = lifecycle;</div><div class="line">        this.treeNode = treeNode;</div><div class="line">        this.requestTracker = requestTracker;</div><div class="line">        this.glide = Glide.get(context);</div><div class="line">        this.optionsApplier = new OptionsApplier();</div><div class="line"></div><div class="line">        ConnectivityMonitor connectivityMonitor = factory.build(context,</div><div class="line">                new RequestManagerConnectivityListener(requestTracker));</div><div class="line"></div><div class="line">        // If we&apos;re the application level request manager, we may be created on a background thread. In that case we</div><div class="line">        // cannot risk synchronously pausing or resuming requests, so we hack around the issue by delaying adding</div><div class="line">        // ourselves as a lifecycle listener by posting to the main thread. This should be entirely safe.</div><div class="line">        if (Util.isOnBackgroundThread()) &#123;</div><div class="line">            new Handler(Looper.getMainLooper()).post(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    lifecycle.addListener(RequestManager.this);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; else &#123;</div><div class="line">            lifecycle.addListener(this);</div><div class="line">        &#125;</div><div class="line">        lifecycle.addListener(connectivityMonitor);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个类实现了，一个接口LifecycleListener有2个构造方法实际就一个，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * An interface for listener to &#123;@link android.app.Fragment&#125; and &#123;@link android.app.Activity&#125; lifecycle events.</div><div class="line"> */</div><div class="line">public interface LifecycleListener &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Callback for when &#123;@link android.app.Fragment#onStart()&#125;&#125; or &#123;@link android.app.Activity#onStart()&#125; is called.</div><div class="line">     */</div><div class="line">    void onStart();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Callback for when &#123;@link android.app.Fragment#onStop()&#125;&#125; or &#123;@link android.app.Activity#onStop()&#125;&#125; is called.</div><div class="line">     */</div><div class="line">    void onStop();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Callback for when &#123;@link android.app.Fragment#onDestroy()&#125;&#125; or &#123;@link android.app.Activity#onDestroy()&#125; is</div><div class="line">     * called.</div><div class="line">     */</div><div class="line">    void onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>监听生命周期的接口</p>
<ul>
<li><p>private final Context context<br>上下文没什么说的</p>
</li>
<li><p>private final Lifecycle lifecycle一个接口用于添加生命监听器LifecycleListener</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * An interface for listening to Activity/Fragment lifecycle events.</div><div class="line"> */</div><div class="line">public interface Lifecycle &#123;</div><div class="line">    /**</div><div class="line">     * Adds the given listener to the set of listeners managed by this Lifecycle implementation.</div><div class="line">     */</div><div class="line">    void addListener(LifecycleListener listener);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>private final RequestManagerTreeNode treeNode 同样一个接口</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Provides access to the relatives of a RequestManager based on the current context. The context hierarchy</div><div class="line"> * is provided by nesting in Activity and Fragments; the application context does not provide access to</div><div class="line"> * any other RequestManagers hierarchically.</div><div class="line"> */</div><div class="line">public interface RequestManagerTreeNode &#123;</div><div class="line">    /**</div><div class="line">     * Returns all descendant &#123;@link RequestManager&#125;s relative to the context of the current &#123;@link RequestManager&#125;.</div><div class="line">     */</div><div class="line">    Set&lt;RequestManager&gt; getDescendants();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用于获取层次接口的Set集合，只能访问本层次内的，不能访问其它分支的</p>
<ul>
<li>private final RequestTracker requestTracker;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * A class for tracking, canceling, and restarting in progress, completed, and failed requests.</div><div class="line"> */</div><div class="line">public class RequestTracker &#123;</div></pre></td></tr></table></figure>
<p>一个请求类，用于跟踪取消，重启进度，完成与失败</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">public class RequestTracker &#123;</div><div class="line">    //一个集合，用于保存弱引用请求</div><div class="line">    private final Set&lt;Request&gt; requests = Collections.newSetFromMap(new WeakHashMap&lt;Request, Boolean&gt;());</div><div class="line">    // A set of requests that have not completed and are queued to be run again. We use this list to maintain hard</div><div class="line">    // references to these requests to ensure that they are not garbage collected before they start running or</div><div class="line">    // while they are paused. See #346.</div><div class="line">    //一个集合，一组未完成的请求，并将要重新运行的请求 以确保它们不是在开始运行或运行之前收集的垃圾</div><div class="line">       //                        当他们被暂停的时候</div><div class="line">    @SuppressWarnings(&quot;MismatchedQueryAndUpdateOfCollection&quot;)</div><div class="line">    private final List&lt;Request&gt; pendingRequests = new ArrayList&lt;Request&gt;();</div><div class="line"></div><div class="line">//标识位是否暂停</div><div class="line">    private boolean isPaused;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Starts tracking the given request.</div><div class="line">     */</div><div class="line">    public void runRequest(Request request) &#123;</div><div class="line">        requests.add(request);</div><div class="line">        if (!isPaused) &#123;</div><div class="line">            request.begin();</div><div class="line">        &#125; else &#123;</div><div class="line">            pendingRequests.add(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Visible for testing.</div><div class="line">    void addRequest(Request request) &#123;</div><div class="line">        requests.add(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Stops tracking the given request.</div><div class="line">     */</div><div class="line">    public void removeRequest(Request request) &#123;</div><div class="line">        requests.remove(request);</div><div class="line">        pendingRequests.remove(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns &#123;@code true&#125; if requests are currently paused, and &#123;@code false&#125; otherwise.</div><div class="line">     */</div><div class="line">    public boolean isPaused() &#123;</div><div class="line">        return isPaused;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Stops any in progress requests.</div><div class="line">     */</div><div class="line">    public void pauseRequests() &#123;</div><div class="line">        isPaused = true;</div><div class="line">        for (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">            if (request.isRunning()) &#123;</div><div class="line">                request.pause();</div><div class="line">                pendingRequests.add(request);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Starts any not yet completed or failed requests.</div><div class="line">     */</div><div class="line">    public void resumeRequests() &#123;</div><div class="line">        isPaused = false;</div><div class="line">        for (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">            if (!request.isComplete() &amp;&amp; !request.isCancelled() &amp;&amp; !request.isRunning()) &#123;</div><div class="line">                request.begin();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        pendingRequests.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Cancels all requests and clears their resources.</div><div class="line">     */</div><div class="line">    public void clearRequests() &#123;</div><div class="line">        for (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">            request.clear();</div><div class="line">        &#125;</div><div class="line">        pendingRequests.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Restarts failed requests and cancels and restarts in progress requests.</div><div class="line">     */</div><div class="line">    public void restartRequests() &#123;</div><div class="line">        for (Request request : Util.getSnapshot(requests)) &#123;</div><div class="line">            if (!request.isComplete() &amp;&amp; !request.isCancelled()) &#123;</div><div class="line">                // Ensure the request will be restarted in onResume.</div><div class="line">                request.pause();</div><div class="line">                if (!isPaused) &#123;</div><div class="line">                    request.begin();</div><div class="line">                &#125; else &#123;</div><div class="line">                    pendingRequests.add(request);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Request</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">public interface Request &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Starts an asynchronous load.</div><div class="line">     */</div><div class="line">    void begin();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Identical to &#123;@link #clear()&#125; except that the request may later be restarted.</div><div class="line">     */</div><div class="line">    void pause();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Prevents any bitmaps being loaded from previous requests, releases any resources held by this request,</div><div class="line">     * displays the current placeholder if one was provided, and marks the request as having been cancelled.</div><div class="line">     */</div><div class="line">    void clear();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if this request is paused and may be restarted.</div><div class="line">     */</div><div class="line">    boolean isPaused();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if this request is running and has not completed or failed.</div><div class="line">     */</div><div class="line">    boolean isRunning();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if the request has completed successfully.</div><div class="line">     */</div><div class="line">    boolean isComplete();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if a non-placeholder resource is set. For Requests that load more than one resource, isResourceSet</div><div class="line">     * may return true even if &#123;@link #isComplete()&#125;&#125; returns false.</div><div class="line">     */</div><div class="line">    boolean isResourceSet();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if the request has been cancelled.</div><div class="line">     */</div><div class="line">    boolean isCancelled();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns true if the request has failed.</div><div class="line">     */</div><div class="line">    boolean isFailed();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Recycles the request object and releases its resources.</div><div class="line">     */</div><div class="line">    void recycle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法一目了然都是状态需要子类实现</p>
<ul>
<li>private final Glide glide;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.glide = Glide.get(context);</div></pre></td></tr></table></figure>
<p>这里才创建Glide对象</p>
<ul>
<li>private final OptionsApplier optionsApplier;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class OptionsApplier &#123;</div><div class="line"></div><div class="line">      public &lt;A, X extends GenericRequestBuilder&lt;A, ?, ?, ?&gt;&gt; X apply(X builder) &#123;</div><div class="line">          if (options != null) &#123;</div><div class="line">          //option为DefaultOptions下面的内部接口</div><div class="line">              options.apply(builder);</div><div class="line">          &#125;</div><div class="line">          return builder;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>一个内部类</p>
<ul>
<li>private DefaultOptions options;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface DefaultOptions &#123;</div><div class="line">        /**</div><div class="line">         * Allows the implementor to apply some options to the given request.</div><div class="line">         *</div><div class="line">         * @param requestBuilder The request builder being used to construct the load.</div><div class="line">         * @param &lt;T&gt; The type of the model.</div><div class="line">         */</div><div class="line">        &lt;T&gt; void apply(GenericRequestBuilder&lt;T, ?, ?, ?&gt; requestBuilder);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>和optionsApplier配合使用</p>
<ul>
<li>public static Glide get(Context context)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">  * Get the singleton.</div><div class="line">  *</div><div class="line">  * @return the singleton</div><div class="line">  */</div><div class="line"> public static Glide get(Context context) &#123;</div><div class="line">     if (glide == null) &#123;</div><div class="line">         synchronized (Glide.class) &#123;</div><div class="line">             if (glide == null) &#123;</div><div class="line">                 Context applicationContext = context.getApplicationContext();</div><div class="line">                 List&lt;GlideModule&gt; modules = new ManifestParser(applicationContext).parse();</div><div class="line"></div><div class="line">                 GlideBuilder builder = new GlideBuilder(applicationContext);</div><div class="line">                 for (GlideModule module : modules) &#123;</div><div class="line">                     module.applyOptions(applicationContext, builder);</div><div class="line">                 &#125;</div><div class="line">                 glide = builder.createGlide();</div><div class="line">                 for (GlideModule module : modules) &#123;</div><div class="line">                     module.registerComponents(applicationContext, glide);</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     return glide;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>获取Glide对象，同步代码块,首先获取上下文，</p>
<p>获取一个GlideModule集合,</p>
<p>获取GlideBuilder</p>
<p>对象其中的所有对象进行应用设置和注册</p>
<p>GildeModule与GlideBuilder见<br><a href="https://ln0491.github.io/2016/10/19/Glide-%E2%80%94-%E7%94%A8Modules%E5%AE%9A%E5%88%B6Glide/">https://ln0491.github.io/2016/10/19/Glide-%E2%80%94-%E7%94%A8Modules%E5%AE%9A%E5%88%B6Glide/</a></p>
<p>初始化一些设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public interface GlideModule &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Lazily apply options to a &#123;@link com.bumptech.glide.GlideBuilder&#125; immediately before the Glide singleton is</div><div class="line">     * created.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;</div><div class="line">     *     This method will be called once and only once per implementation.</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * @param context An Application &#123;@link android.content.Context&#125;.</div><div class="line">     * @param builder The &#123;@link com.bumptech.glide.GlideBuilder&#125; that will be used to create Glide.</div><div class="line">     */</div><div class="line">    void applyOptions(Context context, GlideBuilder builder);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Lazily register components immediately after the Glide singleton is created but before any requests can be</div><div class="line">     * started.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;</div><div class="line">     *     This method will be called once and only once per implementation.</div><div class="line">     * &lt;/p&gt;</div><div class="line">     *</div><div class="line">     * @param context An Application &#123;@link android.content.Context&#125;.</div><div class="line">     * @param glide The newly created Glide singleton.</div><div class="line">     */</div><div class="line">    void registerComponents(Context context, Glide glide);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>createGlide</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Glide createGlide() &#123;</div><div class="line">        if (sourceService == null) &#123;</div><div class="line">            final int cores = Math.max(1, Runtime.getRuntime().availableProcessors());</div><div class="line">            sourceService = new FifoPriorityThreadPoolExecutor(cores);</div><div class="line">        &#125;</div><div class="line">        if (diskCacheService == null) &#123;</div><div class="line">            diskCacheService = new FifoPriorityThreadPoolExecutor(1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        MemorySizeCalculator calculator = new MemorySizeCalculator(context);</div><div class="line">        if (bitmapPool == null) &#123;</div><div class="line">            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">                int size = calculator.getBitmapPoolSize();</div><div class="line">                bitmapPool = new LruBitmapPool(size);</div><div class="line">            &#125; else &#123;</div><div class="line">                bitmapPool = new BitmapPoolAdapter();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (memoryCache == null) &#123;</div><div class="line">            memoryCache = new LruResourceCache(calculator.getMemoryCacheSize());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (diskCacheFactory == null) &#123;</div><div class="line">            diskCacheFactory = new InternalCacheDiskCacheFactory(context);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (engine == null) &#123;</div><div class="line">            engine = new Engine(memoryCache, diskCacheFactory, diskCacheService, sourceService);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (decodeFormat == null) &#123;</div><div class="line">            decodeFormat = DecodeFormat.DEFAULT;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return new Glide(engine, memoryCache, bitmapPool, context, decodeFormat);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="into方法"><a href="#into方法" class="headerlink" title="into方法"></a>into方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Target&lt;GlideDrawable&gt; into(ImageView view) &#123;</div><div class="line">    return super.into(view); //调父类的方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>父类 GenericRequestBuilder-目前只有2种变换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">public Target&lt;TranscodeType&gt; into(ImageView view) &#123;</div><div class="line">        Util.assertMainThread();</div><div class="line">        if (view == null) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;You must pass in a non null View&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (!isTransformationSet &amp;&amp; view.getScaleType() != null) &#123;</div><div class="line">            switch (view.getScaleType()) &#123;</div><div class="line">                case CENTER_CROP:</div><div class="line">                //变换</div><div class="line">                    applyCenterCrop();</div><div class="line">                    break;</div><div class="line">                case FIT_CENTER:</div><div class="line">                case FIT_START:</div><div class="line">                case FIT_END:</div><div class="line">                //变换</div><div class="line">                    applyFitCenter();</div><div class="line">                    break;</div><div class="line">                //$CASES-OMITTED$</div><div class="line">                default:</div><div class="line">                    // Do nothing.</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return into(glide.buildImageViewTarget(view, transcodeClass));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Returns a future that can be used to do a blocking get on a background thread.</div><div class="line">     *</div><div class="line">     * @param width The desired width in pixels, or &#123;@link Target#SIZE_ORIGINAL&#125;. This will be overridden by</div><div class="line">     *             &#123;@link #override * (int, int)&#125; if previously called.</div><div class="line">     * @param height The desired height in pixels, or &#123;@link Target#SIZE_ORIGINAL&#125;. This will be overridden by</div><div class="line">     *              &#123;@link #override * (int, int)&#125;&#125; if previously called).</div><div class="line">     *</div><div class="line">     * @see Glide#clear(com.bumptech.glide.request.FutureTarget)</div><div class="line">     *</div><div class="line">     * @return An &#123;@link com.bumptech.glide.request.FutureTarget&#125; that can be used to obtain the</div><div class="line">     *         resource in a blocking manner.</div><div class="line">     */</div><div class="line">    public FutureTarget&lt;TranscodeType&gt; into(int width, int height) &#123;</div><div class="line">        final RequestFutureTarget&lt;ModelType, TranscodeType&gt; target =</div><div class="line">                new RequestFutureTarget&lt;ModelType, TranscodeType&gt;(glide.getMainHandler(), width, height);</div><div class="line"></div><div class="line">        // TODO: Currently all loads must be started on the main thread...</div><div class="line">        glide.getMainHandler().post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                if (!target.isCancelled()) &#123;</div><div class="line">                    into(target);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        return target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * Set the target the resource will be loaded into.</div><div class="line">     *</div><div class="line">     * @see Glide#clear(com.bumptech.glide.request.target.Target)</div><div class="line">     *</div><div class="line">     * @param target The target to load the resource into.</div><div class="line">     * @return The given target.</div><div class="line">     */</div><div class="line">    public &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(Y target) &#123;</div><div class="line">        Util.assertMainThread();</div><div class="line">        if (target == null) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;You must pass in a non null Target&quot;);</div><div class="line">        &#125;</div><div class="line">        if (!isModelSet) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;You must first set a model (try #load())&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Request previous = target.getRequest();</div><div class="line"></div><div class="line">        if (previous != null) &#123;</div><div class="line">            previous.clear();</div><div class="line">            requestTracker.removeRequest(previous);</div><div class="line">            previous.recycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Request request = buildRequest(target);</div><div class="line">        target.setRequest(request);</div><div class="line">        lifecycle.addListener(target);</div><div class="line">        requestTracker.runRequest(request);</div><div class="line"></div><div class="line">        return target;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>RequestTracker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * Starts tracking the given request.</div><div class="line"> */</div><div class="line">public void runRequest(Request request) &#123;</div><div class="line">    requests.add(request);</div><div class="line">    if (!isPaused) &#123;</div><div class="line">    //开始请求调父类的，佼</div><div class="line">        request.begin();</div><div class="line">    &#125; else &#123;</div><div class="line">    //将请求添加到集合</div><div class="line">        pendingRequests.add(request);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>开始跟踪请求</p>
<ul>
<li>GenericRequest</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void begin() &#123;</div><div class="line">       startTime = LogTime.getLogTime();</div><div class="line">       if (model == null) &#123;</div><div class="line">           onException(null);</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       status = Status.WAITING_FOR_SIZE;</div><div class="line">       if (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</div><div class="line">           onSizeReady(overrideWidth, overrideHeight);</div><div class="line">       &#125; else &#123;</div><div class="line">           target.getSize(this);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (!isComplete() &amp;&amp; !isFailed() &amp;&amp; canNotifyStatusChanged()) &#123;</div><div class="line">           target.onLoadStarted(getPlaceholderDrawable());</div><div class="line">       &#125;</div><div class="line">       if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">           logV(&quot;finished run method in &quot; + LogTime.getElapsedMillis(startTime));</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>onSizeReady</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * A callback method that should never be invoked directly.</div><div class="line">   */</div><div class="line">  @Override</div><div class="line">  public void onSizeReady(int width, int height) &#123;</div><div class="line">      if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">          logV(&quot;Got onSizeReady in &quot; + LogTime.getElapsedMillis(startTime));</div><div class="line">      &#125;</div><div class="line">      if (status != Status.WAITING_FOR_SIZE) &#123;</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line">      status = Status.RUNNING;</div><div class="line"></div><div class="line">      width = Math.round(sizeMultiplier * width);</div><div class="line">      height = Math.round(sizeMultiplier * height);</div><div class="line"></div><div class="line">      ModelLoader&lt;A, T&gt; modelLoader = loadProvider.getModelLoader();</div><div class="line">      final DataFetcher&lt;T&gt; dataFetcher = modelLoader.getResourceFetcher(model, width, height);</div><div class="line"></div><div class="line">      if (dataFetcher == null) &#123;</div><div class="line">          onException(new Exception(&quot;Failed to load model: \&apos;&quot; + model + &quot;\&apos;&quot;));</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line">      ResourceTranscoder&lt;Z, R&gt; transcoder = loadProvider.getTranscoder();</div><div class="line">      if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">          logV(&quot;finished setup for calling load in &quot; + LogTime.getElapsedMillis(startTime));</div><div class="line">      &#125;</div><div class="line">      loadedFromMemoryCache = true;</div><div class="line">      //调用load方法</div><div class="line">      loadStatus = engine.load(signature, width, height, dataFetcher, loadProvider, transformation, transcoder,</div><div class="line">              priority, isMemoryCacheable, diskCacheStrategy, this);</div><div class="line">      loadedFromMemoryCache = resource != null;</div><div class="line">      if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">          logV(&quot;finished onSizeReady in &quot; + LogTime.getElapsedMillis(startTime));</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>里面调用了engine.load方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">loadStatus = engine.load(signature, width, height, dataFetcher, loadProvider, transformation, transcoder,</div><div class="line">              priority, isMemoryCacheable, diskCacheStrategy, this);</div></pre></td></tr></table></figure></p>
<ul>
<li>load方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public &lt;T, Z, R&gt; LoadStatus load(Key signature, int width, int height, DataFetcher&lt;T&gt; fetcher,</div><div class="line">           DataLoadProvider&lt;T, Z&gt; loadProvider, Transformation&lt;Z&gt; transformation, ResourceTranscoder&lt;Z, R&gt; transcoder,</div><div class="line">           Priority priority, boolean isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb) &#123;</div><div class="line">       Util.assertMainThread();</div><div class="line">       long startTime = LogTime.getLogTime();</div><div class="line"></div><div class="line">       final String id = fetcher.getId();</div><div class="line">       EngineKey key = keyFactory.buildKey(id, signature, width, height, loadProvider.getCacheDecoder(),</div><div class="line">               loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(),</div><div class="line">               transcoder, loadProvider.getSourceEncoder());</div><div class="line"></div><div class="line">       EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</div><div class="line">       if (cached != null) &#123;</div><div class="line">           cb.onResourceReady(cached);</div><div class="line">           if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">               logWithTimeAndKey(&quot;Loaded resource from cache&quot;, startTime, key);</div><div class="line">           &#125;</div><div class="line">           return null;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</div><div class="line">       if (active != null) &#123;</div><div class="line">           cb.onResourceReady(active);</div><div class="line">           if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">               logWithTimeAndKey(&quot;Loaded resource from active resources&quot;, startTime, key);</div><div class="line">           &#125;</div><div class="line">           return null;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       EngineJob current = jobs.get(key);</div><div class="line">       if (current != null) &#123;</div><div class="line">           current.addCallback(cb);</div><div class="line">           if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">               logWithTimeAndKey(&quot;Added to existing load&quot;, startTime, key);</div><div class="line">           &#125;</div><div class="line">           return new LoadStatus(cb, current);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);</div><div class="line">       DecodeJob&lt;T, Z, R&gt; decodeJob = new DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation,</div><div class="line">               transcoder, diskCacheProvider, diskCacheStrategy, priority);</div><div class="line">       EngineRunnable runnable = new EngineRunnable(engineJob, decodeJob, priority);</div><div class="line">       jobs.put(key, engineJob);</div><div class="line">       engineJob.addCallback(cb);</div><div class="line">       engineJob.start(runnable);</div><div class="line"></div><div class="line">       if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">           logWithTimeAndKey(&quot;Started new load&quot;, startTime, key);</div><div class="line">       &#125;</div><div class="line">       return new LoadStatus(cb, engineJob);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>加载资源方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">  private EngineResource&lt;?&gt; loadFromActiveResources(Key key, boolean isMemoryCacheable) &#123;</div><div class="line">        if (!isMemoryCacheable) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        EngineResource&lt;?&gt; active = null;</div><div class="line">        WeakReference&lt;EngineResource&lt;?&gt;&gt; activeRef = activeResources.get(key);</div><div class="line">        if (activeRef != null) &#123;</div><div class="line">            active = activeRef.get();</div><div class="line">            if (active != null) &#123;</div><div class="line">                active.acquire();</div><div class="line">            &#125; else &#123;</div><div class="line">                activeResources.remove(key);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return active;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private EngineResource&lt;?&gt; loadFromCache(Key key, boolean isMemoryCacheable) &#123;</div><div class="line">        if (!isMemoryCacheable) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        EngineResource&lt;?&gt; cached = getEngineResourceFromCache(key);</div><div class="line">        if (cached != null) &#123;</div><div class="line">            cached.acquire();</div><div class="line">            activeResources.put(key, new ResourceWeakReference(key, cached, getReferenceQueue()));</div><div class="line">        &#125;</div><div class="line">        return cached;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    private EngineResource&lt;?&gt; getEngineResourceFromCache(Key key) &#123;</div><div class="line">        Resource&lt;?&gt; cached = cache.remove(key);</div><div class="line"></div><div class="line">        final EngineResource result;</div><div class="line">        if (cached == null) &#123;</div><div class="line">            result = null;</div><div class="line">        &#125; else if (cached instanceof EngineResource) &#123;</div><div class="line">            // Save an object allocation if we&apos;ve cached an EngineResource (the typical case).</div><div class="line">            result = (EngineResource) cached;</div><div class="line">        &#125; else &#123;</div><div class="line">            result = new EngineResource(cached, true /*isCacheable*/);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//释放资源，索引++</div><div class="line">  void acquire() &#123;</div><div class="line">        if (isRecycled) &#123;</div><div class="line">            throw new IllegalStateException(&quot;Cannot acquire a recycled resource&quot;);</div><div class="line">        &#125;</div><div class="line">        if (!Looper.getMainLooper().equals(Looper.myLooper())) &#123;</div><div class="line">            throw new IllegalThreadStateException(&quot;Must call acquire on the main thread&quot;);</div><div class="line">        &#125;</div><div class="line">        ++acquired;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>先从cache中寻找资源，如果找到则将其从cache中移除并放入activeResources中，否则从activeResources中寻找。cache是LruResourceCache对象，作为资源的LRU缓存；activeResources是以弱引用为值的Map，用于缓存使用中的资源。比一般内存缓存额外多一级缓存的意义在于，当内存不足时清理cache中的资源时，不会对使用中的Bitmap造成影响。<br>若再次寻找失败，则创建EngineJob对象并调用其start方法。</p>
<ul>
<li>EngineJob</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void start(EngineRunnable engineRunnable) &#123;</div><div class="line">      this.engineRunnable = engineRunnable;</div><div class="line">      future = diskCacheService.submit(engineRunnable);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">      private final ExecutorService diskCacheService;</div><div class="line">      private final ExecutorService sourceService;</div></pre></td></tr></table></figure>
<p>diskCacheService是线程池</p>
<p>传进来的参数engineRunnable，放在future = diskCacheService.submit(engineRunnable);执行</p>
<ul>
<li>EngineRunnable</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">  public void run() &#123;</div><div class="line">      if (isCancelled) &#123;</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Exception exception = null;</div><div class="line">      Resource&lt;?&gt; resource = null;</div><div class="line">      try &#123;</div><div class="line">          resource = decode();</div><div class="line">      &#125; catch (Exception e) &#123;</div><div class="line">          if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">              Log.v(TAG, &quot;Exception decoding&quot;, e);</div><div class="line">          &#125;</div><div class="line">          exception = e;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      if (isCancelled) &#123;</div><div class="line">          if (resource != null) &#123;</div><div class="line">              resource.recycle();</div><div class="line">          &#125;</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      if (resource == null) &#123;</div><div class="line">          onLoadFailed(exception);</div><div class="line">      &#125; else &#123;</div><div class="line">          onLoadComplete(resource);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"> private void onLoadComplete(Resource resource) &#123;</div><div class="line">     manager.onResourceReady(resource);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> private void onLoadFailed(Exception e) &#123;</div><div class="line">     if (isDecodingFromCache()) &#123;</div><div class="line">         stage = Stage.SOURCE;</div><div class="line">         manager.submitForSource(this);</div><div class="line">     &#125; else &#123;</div><div class="line">         manager.onException(e);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在EngineRunnable的run方法中进行编码，根据缓存策略调用decodeFromCache或者decodeFromSource。</p>
<ul>
<li>decode</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private Resource&lt;?&gt; decode() throws Exception &#123;</div><div class="line">     if (isDecodingFromCache()) &#123;</div><div class="line">         return decodeFromCache();</div><div class="line">     &#125; else &#123;</div><div class="line">         return decodeFromSource();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>decodeFromCache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private Resource&lt;?&gt; decodeFromCache() throws Exception &#123;</div><div class="line">       Resource&lt;?&gt; result = null;</div><div class="line">       try &#123;</div><div class="line">           result = decodeJob.decodeResultFromCache();</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           if (Log.isLoggable(TAG, Log.DEBUG)) &#123;</div><div class="line">               Log.d(TAG, &quot;Exception decoding result from cache: &quot; + e);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (result == null) &#123;</div><div class="line">           result = decodeJob.decodeSourceFromCache();</div><div class="line">       &#125;</div><div class="line">       return result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>decodeFromSource</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private Resource&lt;?&gt; decodeFromSource() throws Exception &#123;</div><div class="line">       return decodeJob.decodeFromSource();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>DecodeJob</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Returns a transformed and transcoded resource decoded from source data in the disk cache, or null if no such</div><div class="line">    * resource exists.</div><div class="line">    *</div><div class="line">    * @throws Exception</div><div class="line">    */</div><div class="line">   public Resource&lt;Z&gt; decodeSourceFromCache() throws Exception &#123;</div><div class="line">       if (!diskCacheStrategy.cacheSource()) &#123;</div><div class="line">           return null;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       long startTime = LogTime.getLogTime();</div><div class="line">       Resource&lt;T&gt; decoded = loadFromCache(resultKey.getOriginalKey());</div><div class="line">       if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">           logWithTimeAndKey(&quot;Decoded source from cache&quot;, startTime);</div><div class="line">       &#125;</div><div class="line">       return transformEncodeAndTranscode(decoded);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * Returns a transformed and transcoded resource decoded from source data, or null if no source data could be</div><div class="line">    * obtained or no resource could be decoded.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;</div><div class="line">    *     Depending on the &#123;@link com.bumptech.glide.load.engine.DiskCacheStrategy&#125; used, source data is either decoded</div><div class="line">    *     directly or first written to the disk cache and then decoded from the disk cache.</div><div class="line">    * &lt;/p&gt;</div><div class="line">    *</div><div class="line">    * @throws Exception</div><div class="line">    */</div><div class="line">   public Resource&lt;Z&gt; decodeFromSource() throws Exception &#123;</div><div class="line">       Resource&lt;T&gt; decoded = decodeSource();</div><div class="line">       return transformEncodeAndTranscode(decoded);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>构建fetcher.loadData()加载数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> private Resource&lt;T&gt; decodeSource() throws Exception &#123;</div><div class="line">        Resource&lt;T&gt; decoded = null;</div><div class="line">        try &#123;</div><div class="line">            long startTime = LogTime.getLogTime();</div><div class="line">            final A data = fetcher.loadData(priority);</div><div class="line">            if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">                logWithTimeAndKey(&quot;Fetched data&quot;, startTime);</div><div class="line">            &#125;</div><div class="line">            if (isCancelled) &#123;</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            decoded = decodeFromSourceData(data);</div><div class="line">        &#125; finally &#123;</div><div class="line">            fetcher.cleanup();</div><div class="line">        &#125;</div><div class="line">        return decoded;</div><div class="line">    &#125;</div><div class="line">`</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过DataFetcher fetcher。<br>编码前需要先通过DataFetcher访问网络获得文件流。接口DataFetcher的实现类根据配置而不同，</p>
<p>之后根据需要将文件流写入磁盘缓存，再对文件流进行编码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"> public Resource&lt;Z&gt; decodeFromSource() throws Exception &#123;</div><div class="line">        Resource&lt;T&gt; decoded = decodeSource();</div><div class="line">        return transformEncodeAndTranscode(decoded);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //转换</div><div class="line"></div><div class="line">    private Resource&lt;Z&gt; transformEncodeAndTranscode(Resource&lt;T&gt; decoded) &#123;</div><div class="line">        long startTime = LogTime.getLogTime();</div><div class="line">        Resource&lt;T&gt; transformed = transform(decoded);</div><div class="line">        if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(&quot;Transformed resource from source&quot;, startTime);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">//写入缓存</div><div class="line">        writeTransformedToCache(transformed);</div><div class="line"></div><div class="line">        startTime = LogTime.getLogTime();</div><div class="line">        Resource&lt;Z&gt; result = transcode(transformed);</div><div class="line">        if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(&quot;Transcoded transformed from source&quot;, startTime);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//写入缓存</div><div class="line">    private void writeTransformedToCache(Resource&lt;T&gt; transformed) &#123;</div><div class="line">        if (transformed == null || !diskCacheStrategy.cacheResult()) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        long startTime = LogTime.getLogTime();</div><div class="line">        SourceWriter&lt;Resource&lt;T&gt;&gt; writer = new SourceWriter&lt;Resource&lt;T&gt;&gt;(loadProvider.getEncoder(), transformed);</div><div class="line">        diskCacheProvider.getDiskCache().put(resultKey, writer);</div><div class="line">        if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(&quot;Wrote transformed from source to cache&quot;, startTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">     class SourceWriter&lt;DataType&gt; implements DiskCache.Writer &#123;</div><div class="line"></div><div class="line">            private final Encoder&lt;DataType&gt; encoder;</div><div class="line">            private final DataType data;</div><div class="line"></div><div class="line">            public SourceWriter(Encoder&lt;DataType&gt; encoder, DataType data) &#123;</div><div class="line">                this.encoder = encoder;</div><div class="line">                this.data = data;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean write(File file) &#123;</div><div class="line">                boolean success = false;</div><div class="line">                OutputStream os = null;</div><div class="line">                try &#123;</div><div class="line">                    os = fileOpener.open(file);</div><div class="line">                    success = encoder.encode(data, os);</div><div class="line">                &#125; catch (FileNotFoundException e) &#123;</div><div class="line">                    if (Log.isLoggable(TAG, Log.DEBUG)) &#123;</div><div class="line">                        Log.d(TAG, &quot;Failed to find file to write to disk cache&quot;, e);</div><div class="line">                    &#125;</div><div class="line">                &#125; finally &#123;</div><div class="line">                    if (os != null) &#123;</div><div class="line">                        try &#123;</div><div class="line">                            os.close();</div><div class="line">                        &#125; catch (IOException e) &#123;</div><div class="line">                            // Do nothing.</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return success;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>DiskLruCacheWrapper</p>
<p>diskCacheProvider.getDiskCache().put(resultKey, writer);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void put(Key key, Writer writer) &#123;</div><div class="line">       String safeKey = safeKeyGenerator.getSafeKey(key);</div><div class="line">       writeLocker.acquire(key);</div><div class="line">       try &#123;</div><div class="line">           DiskLruCache.Editor editor = getDiskCache().edit(safeKey);</div><div class="line">           // Editor will be null if there are two concurrent puts. In the worst case we will just silently fail.</div><div class="line">           if (editor != null) &#123;</div><div class="line">               try &#123;</div><div class="line">                   File file = editor.getFile(0);</div><div class="line">                   if (writer.write(file)) &#123;</div><div class="line">                       editor.commit();</div><div class="line">                   &#125;</div><div class="line">               &#125; finally &#123;</div><div class="line">                   editor.abortUnlessCommitted();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; catch (IOException e) &#123;</div><div class="line">           if (Log.isLoggable(TAG, Log.WARN)) &#123;</div><div class="line">               Log.w(TAG, &quot;Unable to put to disk cache&quot;, e);</div><div class="line">           &#125;</div><div class="line">       &#125; finally &#123;</div><div class="line">           writeLocker.release(key);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>StreamBitmapDecoder –  decoded = loadProvider.getSourceDecoder().decode(data, width, height);</li>
</ul>
<p>StreamBitmapDecoder</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">  public Resource&lt;Bitmap&gt; decode(InputStream source, int width, int height) &#123;</div><div class="line">      Bitmap bitmap = downsampler.decode(source, bitmapPool, width, height, decodeFormat);</div><div class="line">      return BitmapResource.obtain(bitmap, bitmapPool);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>Downsampler</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public Bitmap decode(InputStream is, BitmapPool pool, int outWidth, int outHeight, DecodeFormat decodeFormat) &#123;</div><div class="line">       final ByteArrayPool byteArrayPool = ByteArrayPool.get();</div><div class="line">       final byte[] bytesForOptions = byteArrayPool.getBytes();</div><div class="line">       final byte[] bytesForStream = byteArrayPool.getBytes();</div><div class="line">       final BitmapFactory.Options options = getDefaultOptions();</div><div class="line"></div><div class="line">       // Use to fix the mark limit to avoid allocating buffers that fit entire images.</div><div class="line">       RecyclableBufferedInputStream bufferedStream = new RecyclableBufferedInputStream(</div><div class="line">               is, bytesForStream);</div><div class="line">       // Use to retrieve exceptions thrown while reading.</div><div class="line">       // TODO(#126): when the framework no longer returns partially decoded Bitmaps or provides a way to determine</div><div class="line">       // if a Bitmap is partially decoded, consider removing.</div><div class="line">       ExceptionCatchingInputStream exceptionStream =</div><div class="line">               ExceptionCatchingInputStream.obtain(bufferedStream);</div><div class="line">       // Use to read data.</div><div class="line">       // Ensures that we can always reset after reading an image header so that we can still attempt to decode the</div><div class="line">       // full image even when the header decode fails and/or overflows our read buffer. See #283.</div><div class="line">       MarkEnforcingInputStream invalidatingStream = new MarkEnforcingInputStream(exceptionStream);</div><div class="line">       try &#123;</div><div class="line">           exceptionStream.mark(MARK_POSITION);</div><div class="line">           int orientation = 0;</div><div class="line">           try &#123;</div><div class="line">               orientation = new ImageHeaderParser(exceptionStream).getOrientation();</div><div class="line">           &#125; catch (IOException e) &#123;</div><div class="line">               if (Log.isLoggable(TAG, Log.WARN)) &#123;</div><div class="line">                   Log.w(TAG, &quot;Cannot determine the image orientation from header&quot;, e);</div><div class="line">               &#125;</div><div class="line">           &#125; finally &#123;</div><div class="line">               try &#123;</div><div class="line">                   exceptionStream.reset();</div><div class="line">               &#125; catch (IOException e) &#123;</div><div class="line">                   if (Log.isLoggable(TAG, Log.WARN)) &#123;</div><div class="line">                       Log.w(TAG, &quot;Cannot reset the input stream&quot;, e);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           options.inTempStorage = bytesForOptions;</div><div class="line"></div><div class="line">           final int[] inDimens = getDimensions(invalidatingStream, bufferedStream, options);</div><div class="line">           final int inWidth = inDimens[0];</div><div class="line">           final int inHeight = inDimens[1];</div><div class="line"></div><div class="line">           final int degreesToRotate = TransformationUtils.getExifOrientationDegrees(orientation);</div><div class="line">           final int sampleSize = getRoundedSampleSize(degreesToRotate, inWidth, inHeight, outWidth, outHeight);</div><div class="line"></div><div class="line">           final Bitmap downsampled =</div><div class="line">                   downsampleWithSize(invalidatingStream, bufferedStream, options, pool, inWidth, inHeight, sampleSize,</div><div class="line">                           decodeFormat);</div><div class="line"></div><div class="line">           // BitmapFactory swallows exceptions during decodes and in some cases when inBitmap is non null, may catch</div><div class="line">           // and log a stack trace but still return a non null bitmap. To avoid displaying partially decoded bitmaps,</div><div class="line">           // we catch exceptions reading from the stream in our ExceptionCatchingInputStream and throw them here.</div><div class="line">           final Exception streamException = exceptionStream.getException();</div><div class="line">           if (streamException != null) &#123;</div><div class="line">               throw new RuntimeException(streamException);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           Bitmap rotated = null;</div><div class="line">           if (downsampled != null) &#123;</div><div class="line">               rotated = TransformationUtils.rotateImageExif(downsampled, pool, orientation);</div><div class="line"></div><div class="line">               if (!downsampled.equals(rotated) &amp;&amp; !pool.put(downsampled)) &#123;</div><div class="line">                   downsampled.recycle();</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           return rotated;</div><div class="line">       &#125; finally &#123;</div><div class="line">           byteArrayPool.releaseBytes(bytesForOptions);</div><div class="line">           byteArrayPool.releaseBytes(bytesForStream);</div><div class="line">           exceptionStream.release();</div><div class="line">           releaseOptions(options);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private int getRoundedSampleSize(int degreesToRotate, int inWidth, int inHeight, int outWidth, int outHeight) &#123;</div><div class="line">       int targetHeight = outHeight == Target.SIZE_ORIGINAL ? inHeight : outHeight;</div><div class="line">       int targetWidth = outWidth == Target.SIZE_ORIGINAL ? inWidth : outWidth;</div><div class="line"></div><div class="line">       final int exactSampleSize;</div><div class="line">       if (degreesToRotate == 90 || degreesToRotate == 270) &#123;</div><div class="line">           // If we&apos;re rotating the image +-90 degrees, we need to downsample accordingly so the image width is</div><div class="line">           // decreased to near our target&apos;s height and the image height is decreased to near our target width.</div><div class="line">           //noinspection SuspiciousNameCombination</div><div class="line">           exactSampleSize = getSampleSize(inHeight, inWidth, targetWidth, targetHeight);</div><div class="line">       &#125; else &#123;</div><div class="line">           exactSampleSize = getSampleSize(inWidth, inHeight, targetWidth, targetHeight);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       // BitmapFactory only accepts powers of 2, so it will round down to the nearest power of two that is less than</div><div class="line">       // or equal to the sample size we provide. Because we need to estimate the final image width and height to</div><div class="line">       // re-use Bitmaps, we mirror BitmapFactory&apos;s calculation here. For bug, see issue #224. For algorithm see</div><div class="line">       // http://stackoverflow.com/a/17379704/800716.</div><div class="line">       final int powerOfTwoSampleSize = exactSampleSize == 0 ? 0 : Integer.highestOneBit(exactSampleSize);</div><div class="line"></div><div class="line">       // Although functionally equivalent to 0 for BitmapFactory, 1 is a safer default for our code than 0.</div><div class="line">       return Math.max(1, powerOfTwoSampleSize);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private Bitmap downsampleWithSize(MarkEnforcingInputStream is, RecyclableBufferedInputStream  bufferedStream,</div><div class="line">           BitmapFactory.Options options, BitmapPool pool, int inWidth, int inHeight, int sampleSize,</div><div class="line">           DecodeFormat decodeFormat) &#123;</div><div class="line">       // Prior to KitKat, the inBitmap size must exactly match the size of the bitmap we&apos;re decoding.</div><div class="line">       Bitmap.Config config = getConfig(is, decodeFormat);</div><div class="line">       options.inSampleSize = sampleSize;</div><div class="line">       options.inPreferredConfig = config;</div><div class="line">       if ((options.inSampleSize == 1 || Build.VERSION_CODES.KITKAT &lt;= Build.VERSION.SDK_INT) &amp;&amp; shouldUsePool(is)) &#123;</div><div class="line">           int targetWidth = (int) Math.ceil(inWidth / (double) sampleSize);</div><div class="line">           int targetHeight = (int) Math.ceil(inHeight / (double) sampleSize);</div><div class="line">           // BitmapFactory will clear out the Bitmap before writing to it, so getDirty is safe.</div><div class="line">           setInBitmap(options, pool.getDirty(targetWidth, targetHeight, config));</div><div class="line">       &#125;</div><div class="line">       return decodeStream(is, bufferedStream, options);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>通过设置采样率缩放图片，降低内存占用，提高加载性能。</p>
<p>编码之后通过transformEncodeAndTranscode方法进行转换处理。–DecodeJob类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private Resource&lt;T&gt; transform(Resource&lt;T&gt; decoded) &#123;</div><div class="line">     if (decoded == null) &#123;</div><div class="line">         return null;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     Resource&lt;T&gt; transformed = transformation.transform(decoded, width, height);</div><div class="line">     if (!decoded.equals(transformed)) &#123;</div><div class="line">         decoded.recycle();</div><div class="line">     &#125;</div><div class="line">     return transformed;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>transform方法调用了Transformation的transform方法。</p>
<p>Transformation是接口；<br>BitmapTransformation实现了该接口但留下了另一个抽象方法transform；<br>CenterCrop和FitCenter两个类继承了BitmapTransformation并实现了抽象方法transform。</p>
<ul>
<li>BitmapTransformation</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"> public final Resource&lt;Bitmap&gt; transform(Resource&lt;Bitmap&gt; resource, int outWidth, int outHeight) &#123;</div><div class="line">     if (!Util.isValidDimensions(outWidth, outHeight)) &#123;</div><div class="line">         throw new IllegalArgumentException(&quot;Cannot apply transformation on width: &quot; + outWidth + &quot; or height: &quot;</div><div class="line">                 + outHeight + &quot; less than or equal to zero and not Target.SIZE_ORIGINAL&quot;);</div><div class="line">     &#125;</div><div class="line">     Bitmap toTransform = resource.get();</div><div class="line">     int targetWidth = outWidth == Target.SIZE_ORIGINAL ? toTransform.getWidth() : outWidth;</div><div class="line">     int targetHeight = outHeight == Target.SIZE_ORIGINAL ? toTransform.getHeight() : outHeight;</div><div class="line">     Bitmap transformed = transform(bitmapPool, toTransform, targetWidth, targetHeight);</div><div class="line"></div><div class="line">     final Resource&lt;Bitmap&gt; result;</div><div class="line">     if (toTransform.equals(transformed)) &#123;</div><div class="line">         result = resource;</div><div class="line">     &#125; else &#123;</div><div class="line">         result = BitmapResource.obtain(transformed, bitmapPool);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     return result;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">     protected abstract Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight)</div></pre></td></tr></table></figure>
<ul>
<li>CenterCrop</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123;</div><div class="line">      final Bitmap toReuse = pool.get(outWidth, outHeight, toTransform.getConfig() != null</div><div class="line">              ? toTransform.getConfig() : Bitmap.Config.ARGB_8888);</div><div class="line">      Bitmap transformed = TransformationUtils.centerCrop(toReuse, toTransform, outWidth, outHeight);</div><div class="line">      if (toReuse != null &amp;&amp; toReuse != transformed &amp;&amp; !pool.put(toReuse)) &#123;</div><div class="line">          toReuse.recycle();</div><div class="line">      &#125;</div><div class="line">      return transformed;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>FitCenter<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected Bitmap transform(BitmapPool pool, Bitmap toTransform, int outWidth, int outHeight) &#123;</div><div class="line">       return TransformationUtils.fitCenter(toTransform, pool, outWidth, outHeight);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>由BitmapPool提供一个Bitmap作为下一步的Canvas载体。BitmapPool的实现类是LruBitmapPool，顾名思义是一个基于LRU方式的Bitmap缓存池，用于Bitmap的复用。</p>
<ul>
<li>TransformationUtils</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public static Bitmap centerCrop(Bitmap recycled, Bitmap toCrop, int width, int height) &#123;</div><div class="line">        if (toCrop == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125; else if (toCrop.getWidth() == width &amp;&amp; toCrop.getHeight() == height) &#123;</div><div class="line">            return toCrop;</div><div class="line">        &#125;</div><div class="line">        // From ImageView/Bitmap.createScaledBitmap.</div><div class="line">        final float scale;</div><div class="line">        float dx = 0, dy = 0;</div><div class="line">        Matrix m = new Matrix();</div><div class="line">        if (toCrop.getWidth() * height &gt; width * toCrop.getHeight()) &#123;</div><div class="line">            scale = (float) height / (float) toCrop.getHeight();</div><div class="line">            dx = (width - toCrop.getWidth() * scale) * 0.5f;</div><div class="line">        &#125; else &#123;</div><div class="line">            scale = (float) width / (float) toCrop.getWidth();</div><div class="line">            dy = (height - toCrop.getHeight() * scale) * 0.5f;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        m.setScale(scale, scale);</div><div class="line">        m.postTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));</div><div class="line">        final Bitmap result;</div><div class="line">        if (recycled != null) &#123;</div><div class="line">            result = recycled;</div><div class="line">        &#125; else &#123;</div><div class="line">            result = Bitmap.createBitmap(width, height, getSafeConfig(toCrop));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // We don&apos;t add or remove alpha, so keep the alpha setting of the Bitmap we were given.</div><div class="line">        TransformationUtils.setAlpha(toCrop, result);</div><div class="line"></div><div class="line">        Canvas canvas = new Canvas(result);</div><div class="line">        Paint paint = new Paint(PAINT_FLAGS);</div><div class="line">        canvas.drawBitmap(toCrop, m, paint);</div><div class="line">        return result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在TransformationUtils的centerCrop方法中，根据目标尺寸调整矩阵并绘制结果。<br>与上面的流程类似，FitCenter类的transform方法调用TransformationUtils的fitCenter方法调整Bitmap。</p>
<p>继续看DecodeJob的transformEncodeAndTranscode方法。接下来调用writeTransformedToCache将转换结果写入磁盘缓存，再调用transcode方法进行转码。transcode方法中的transcoder的实际类型是GlideBitmapDrawableTranscoder。</p>
<ul>
<li>GlideBitmapDrawableTranscoder<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">  public Resource&lt;GlideBitmapDrawable&gt; transcode(Resource&lt;Bitmap&gt; toTranscode) &#123;</div><div class="line">      GlideBitmapDrawable drawable = new GlideBitmapDrawable(resources, toTranscode.get());</div><div class="line">      return new GlideBitmapDrawableResource(drawable, bitmapPool);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>GlideBitmapDrawableTranscoder的transcode方法将Bitmap资源进行封装。<br>到这里就结束了decodeFromSource的流程。<br>然后看decodeFromCache。</p>
<ul>
<li>EngineRunnable-decodeFromCache</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private Resource&lt;?&gt; decodeFromCache() throws Exception &#123;</div><div class="line">      Resource&lt;?&gt; result = null;</div><div class="line">      try &#123;</div><div class="line">          result = decodeJob.decodeResultFromCache();</div><div class="line">      &#125; catch (Exception e) &#123;</div><div class="line">          if (Log.isLoggable(TAG, Log.DEBUG)) &#123;</div><div class="line">              Log.d(TAG, &quot;Exception decoding result from cache: &quot; + e);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      if (result == null) &#123;</div><div class="line">          result = decodeJob.decodeSourceFromCache();</div><div class="line">      &#125;</div><div class="line">      return result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>先调用DecodeJob的decodeResultFromCache方法获取，获取失败则调用DecodeJob的decodeSourceFromCache方法。</p>
<ul>
<li>decodeResultFromCache<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public Resource&lt;Z&gt; decodeResultFromCache() throws Exception &#123;</div><div class="line">       if (!diskCacheStrategy.cacheResult()) &#123;</div><div class="line">           return null;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       long startTime = LogTime.getLogTime();</div><div class="line">       Resource&lt;T&gt; transformed = loadFromCache(resultKey);</div><div class="line">       if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">           logWithTimeAndKey(&quot;Decoded transformed from cache&quot;, startTime);</div><div class="line">       &#125;</div><div class="line">       startTime = LogTime.getLogTime();</div><div class="line">       Resource&lt;Z&gt; result = transcode(transformed);</div><div class="line">       if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">           logWithTimeAndKey(&quot;Transcoded transformed from cache&quot;, startTime);</div><div class="line">       &#125;</div><div class="line">       return result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>先loadFromCache 再</p>
<ul>
<li><p>loadFromCache</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private Resource&lt;T&gt; loadFromCache(Key key) throws IOException &#123;</div><div class="line">       File cacheFile = diskCacheProvider.getDiskCache().get(key);</div><div class="line">       if (cacheFile == null) &#123;</div><div class="line">           return null;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Resource&lt;T&gt; result = null;</div><div class="line">       try &#123;</div><div class="line">           result = loadProvider.getCacheDecoder().decode(cacheFile, width, height);</div><div class="line">       &#125; finally &#123;</div><div class="line">           if (result == null) &#123;</div><div class="line">               diskCacheProvider.getDiskCache().delete(key);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       return result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>transcode</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">private Resource&lt;Z&gt; transcode(Resource&lt;T&gt; transformed) &#123;</div><div class="line">    if (transformed == null) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    return transcoder.transcode(transformed);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>decodeSourceFromCache 就是上面 的decodeSource</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public Resource&lt;Z&gt; decodeSourceFromCache() throws Exception &#123;</div><div class="line">     if (!diskCacheStrategy.cacheSource()) &#123;</div><div class="line">         return null;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     long startTime = LogTime.getLogTime();</div><div class="line">     Resource&lt;T&gt; decoded = loadFromCache(resultKey.getOriginalKey());</div><div class="line">     if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">         logWithTimeAndKey(&quot;Decoded source from cache&quot;, startTime);</div><div class="line">     &#125;</div><div class="line">     return transformEncodeAndTranscode(decoded);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>decodeResultFromCache方法从磁盘缓存中获取对应Bitmap并将其转码。<br>decodeSourceFromCache方法从磁盘缓存中获取对应Bitmap并将其转换（因为是原尺寸，需要调整大小）。<br>到这里结束了EngineRunnable的decode方法的流程。</p>
<ul>
<li>EngineRunnable的decode是decodeFromCache和decodeFromSource二选一，decodeFromCache也获取失败的话就没有然后了<br>EngineRunnable</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void run() &#123;</div><div class="line">       if (isCancelled) &#123;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Exception exception = null;</div><div class="line">       Resource&lt;?&gt; resource = null;</div><div class="line">       try &#123;</div><div class="line">           resource = decode();</div><div class="line">       &#125; catch (Exception e) &#123;</div><div class="line">           if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">               Log.v(TAG, &quot;Exception decoding&quot;, e);</div><div class="line">           &#125;</div><div class="line">           exception = e;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (isCancelled) &#123;</div><div class="line">           if (resource != null) &#123;</div><div class="line">               resource.recycle();</div><div class="line">           &#125;</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (resource == null) &#123;</div><div class="line">           onLoadFailed(exception);</div><div class="line">       &#125; else &#123;</div><div class="line">           onLoadComplete(resource);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>失败会走onLoadFailed，成功会走onLoadComplete<br>缓存中没有结果的情况下会调用onLoadFailed方法，变更缓存策略重新放入线程池中执行，也就是从网络获取。这里的线程池是sourceService而不是上面的diskCacheService<br>得到了处理结果，接下来调用EngineRunnable的onLoadComplete方法将结果传入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void onLoadComplete(Resource resource) &#123;</div><div class="line">      manager.onResourceReady(resource);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private void onLoadFailed(Exception e) &#123;</div><div class="line">      if (isDecodingFromCache()) &#123;</div><div class="line">          stage = Stage.SOURCE;</div><div class="line">          manager.submitForSource(this);</div><div class="line">      &#125; else &#123;</div><div class="line">          manager.onException(e);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>onLoadComplete方法调用了EngineJob的onResourceReady方法。</p>
<ul>
<li>EngineJob-onResourceReady</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">  public void onResourceReady(final Resource&lt;?&gt; resource) &#123;</div><div class="line">      this.resource = resource;</div><div class="line">      MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, this).sendToTarget();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>只是赋值加发送消息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private static class MainThreadCallback implements Handler.Callback &#123;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      public boolean handleMessage(Message message) &#123;</div><div class="line">          if (MSG_COMPLETE == message.what || MSG_EXCEPTION == message.what) &#123;</div><div class="line">              EngineJob job = (EngineJob) message.obj;</div><div class="line">              if (MSG_COMPLETE == message.what) &#123;</div><div class="line">                  job.handleResultOnMainThread();</div><div class="line">              &#125; else &#123;</div><div class="line">                  job.handleExceptionOnMainThread();</div><div class="line">              &#125;</div><div class="line">              return true;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          return false;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>接收消息判断，并处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//完成处理</div><div class="line">private void handleResultOnMainThread() &#123;</div><div class="line">    if (isCancelled) &#123;</div><div class="line">        resource.recycle();</div><div class="line">        return;</div><div class="line">    &#125; else if (cbs.isEmpty()) &#123;</div><div class="line">        throw new IllegalStateException(&quot;Received a resource without any callbacks to notify&quot;);</div><div class="line">    &#125;</div><div class="line">    engineResource = engineResourceFactory.build(resource, isCacheable);</div><div class="line">    hasResource = true;</div><div class="line"></div><div class="line">    // Hold on to resource for duration of request so we don&apos;t recycle it in the middle of notifying if it</div><div class="line">    // synchronously released by one of the callbacks.</div><div class="line">    engineResource.acquire();</div><div class="line">    listener.onEngineJobComplete(key, engineResource);</div><div class="line"></div><div class="line">    for (ResourceCallback cb : cbs) &#123;</div><div class="line">        if (!isInIgnoredCallbacks(cb)) &#123;</div><div class="line">            engineResource.acquire();</div><div class="line">            cb.onResourceReady(engineResource);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // Our request is complete, so we can release the resource.</div><div class="line">    engineResource.release();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//异常处理</div><div class="line">private void handleExceptionOnMainThread() &#123;</div><div class="line">    if (isCancelled) &#123;</div><div class="line">        return;</div><div class="line">    &#125; else if (cbs.isEmpty()) &#123;</div><div class="line">        throw new IllegalStateException(&quot;Received an exception without any callbacks to notify&quot;);</div><div class="line">    &#125;</div><div class="line">    hasException = true;</div><div class="line"></div><div class="line">    listener.onEngineJobComplete(key, null);</div><div class="line"></div><div class="line">    for (ResourceCallback cb : cbs) &#123;</div><div class="line">        if (!isInIgnoredCallbacks(cb)) &#123;</div><div class="line">            cb.onException(exception);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>onResourceReady方法中向Handler传递消息并由MainThreadCallback处理消息 ，也就切换到了主线程。<br>handleResultOnMainThread方法会调用GenericRequest的onResourceReady方法。</p>
<ul>
<li>GenericRequest<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public void onResourceReady(Resource&lt;?&gt; resource) &#123;</div><div class="line">        if (resource == null) &#123;</div><div class="line">            onException(new Exception(&quot;Expected to receive a Resource&lt;R&gt; with an object of &quot; + transcodeClass</div><div class="line">                    + &quot; inside, but instead got null.&quot;));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Object received = resource.get();</div><div class="line">        if (received == null || !transcodeClass.isAssignableFrom(received.getClass())) &#123;</div><div class="line">            releaseResource(resource);</div><div class="line">            onException(new Exception(&quot;Expected to receive an object of &quot; + transcodeClass</div><div class="line">                    + &quot; but instead got &quot; + (received != null ? received.getClass() : &quot;&quot;) + &quot;&#123;&quot; + received + &quot;&#125;&quot;</div><div class="line">                    + &quot; inside Resource&#123;&quot; + resource + &quot;&#125;.&quot;</div><div class="line">                    + (received != null ? &quot;&quot; : &quot; &quot;</div><div class="line">                        + &quot;To indicate failure return a null Resource object, &quot;</div><div class="line">                        + &quot;rather than a Resource object containing null data.&quot;)</div><div class="line">            ));</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (!canSetResource()) &#123;</div><div class="line">            releaseResource(resource);</div><div class="line">            // We can&apos;t set the status to complete before asking canSetResource().</div><div class="line">            status = Status.COMPLETE;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        onResourceReady(resource, (R) received);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">       private void onResourceReady(Resource&lt;?&gt; resource, R result) &#123;</div><div class="line">            // We must call isFirstReadyResource before setting status.</div><div class="line">            boolean isFirstResource = isFirstReadyResource();</div><div class="line">            status = Status.COMPLETE;</div><div class="line">            this.resource = resource;</div><div class="line"></div><div class="line">            if (requestListener == null || !requestListener.onResourceReady(result, model, target, loadedFromMemoryCache,</div><div class="line">                    isFirstResource)) &#123;</div><div class="line">                GlideAnimation&lt;R&gt; animation = animationFactory.build(loadedFromMemoryCache, isFirstResource);</div><div class="line">                target.onResourceReady(result, animation);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            notifyLoadSuccess();</div><div class="line"></div><div class="line">            if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">                logV(&quot;Resource ready in &quot; + LogTime.getElapsedMillis(startTime) + &quot; size: &quot;</div><div class="line">                        + (resource.getSize() * TO_MEGABYTE) + &quot; fromCache: &quot; + loadedFromMemoryCache);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>onResourceReady方法调用GlideDrawableImageViewTarget的onResourceReady方法。</p>
<ul>
<li>GlideDrawableImageViewTarget</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    @Override</div><div class="line">    public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; animation) &#123;</div><div class="line">        if (!resource.isAnimated()) &#123;</div><div class="line">            //TODO: Try to generalize this to other sizes/shapes.</div><div class="line">            // This is a dirty hack that tries to make loading square thumbnails and then square full images less costly</div><div class="line">            // by forcing both the smaller thumb and the larger version to have exactly the same intrinsic dimensions.</div><div class="line">            // If a drawable is replaced in an ImageView by another drawable with different intrinsic dimensions,</div><div class="line">            // the ImageView requests a layout. Scrolling rapidly while replacing thumbs with larger images triggers</div><div class="line">            // lots of these calls and causes significant amounts of jank.</div><div class="line">            float viewRatio = view.getWidth() / (float) view.getHeight();</div><div class="line">            float drawableRatio = resource.getIntrinsicWidth() / (float) resource.getIntrinsicHeight();</div><div class="line">            if (Math.abs(viewRatio - 1f) &lt;= SQUARE_RATIO_MARGIN</div><div class="line">                    &amp;&amp; Math.abs(drawableRatio - 1f) &lt;= SQUARE_RATIO_MARGIN) &#123;</div><div class="line">                resource = new SquaringDrawable(resource, view.getWidth());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        super.onResourceReady(resource, animation);</div><div class="line">        this.resource = resource;</div><div class="line">        resource.setLoopCount(maxLoopCount);</div><div class="line">        resource.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     @Override</div><div class="line">        protected void setResource(GlideDrawable resource) &#123;</div><div class="line">            view.setImageDrawable(resource);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">调用了父类的ImageViewTarget 中的方法</div><div class="line"></div><div class="line"></div><div class="line">* ImageViewTarget</div></pre></td></tr></table></figure>
<p> @Override<br>    public void onResourceReady(Z resource, GlideAnimation&lt;? super Z&gt; glideAnimation) {<br>        if (glideAnimation == null || !glideAnimation.animate(resource, this)) {<br>            setResource(resource);<br>        }<br>    }<br>    protected abstract void setResource(Z resource);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">GlideDrawableImageViewTarget的onResourceReady方法调用其父类ImageViewTarget的onResourceReady方法，</div><div class="line">而ImageViewTarget的onResourceReady方法中调用的抽象方法setResource在子类GlideDrawableImageViewTarget中实现，</div><div class="line">该方法中调用了ImageView的setImageDrawable方法设置图像。至此，整个加载流程就完成了。</div><div class="line"></div><div class="line"></div><div class="line">![http://upload-images.jianshu.io/upload_images/2041538-689bc766123bdf43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240](http://upload-images.jianshu.io/upload_images/2041538-689bc766123bdf43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line"></div><div class="line">### load方法 在RequestManager中</div><div class="line"></div><div class="line">有很多的load方法 以url为例</div></pre></td></tr></table></figure></p>
<p>@Deprecated<br>    public DrawableTypeRequest<url> load(URL url) {<br>        return (DrawableTypeRequest<url>) fromUrl().load(url);<br>    }</url></url></p>
<pre><code>@Deprecated
public DrawableTypeRequest&lt;URL&gt; fromUrl() {
    return loadGeneric(URL.class);
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">最后调的都是loadGeneric</div></pre></td></tr></table></figure>
<p>private <t> DrawableTypeRequest<t> loadGeneric(Class<t> modelClass) {<br>        ModelLoader<t, inputstream=""> streamModelLoader = Glide.buildStreamModelLoader(modelClass, context);<br>        ModelLoader<t, parcelfiledescriptor=""> fileDescriptorModelLoader =<br>                Glide.buildFileDescriptorModelLoader(modelClass, context);<br>        if (modelClass != null &amp;&amp; streamModelLoader == null &amp;&amp; fileDescriptorModelLoader == null) {<br>            throw new IllegalArgumentException(“Unknown type “ + modelClass + “. You must provide a Model of a type for”</t,></t,></t></t></t></p>
<pre><code>                + &quot; which there is a registered ModelLoader, if you are using a custom model, you must first call&quot;
                + &quot; Glide#register with a ModelLoaderFactory for your custom model class&quot;);
    }

    return optionsApplier.apply(
            new DrawableTypeRequest&lt;T&gt;(modelClass, streamModelLoader, fileDescriptorModelLoader, context,
                    glide, requestTracker, lifecycle, optionsApplier));
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">* DrawableTypeRequest</div></pre></td></tr></table></figure>
<p> DrawableTypeRequest(Class<modeltype> modelClass, ModelLoader<modeltype, inputstream=""> streamModelLoader,<br>            ModelLoader<modeltype, parcelfiledescriptor=""> fileDescriptorModelLoader, Context context, Glide glide,<br>            RequestTracker requestTracker, Lifecycle lifecycle, RequestManager.OptionsApplier optionsApplier) {<br>        super(context, modelClass,<br>                buildProvider(glide, streamModelLoader, fileDescriptorModelLoader, GifBitmapWrapper.class,<br>                        GlideDrawable.class, null),<br>                glide, requestTracker, lifecycle);<br>        this.streamModelLoader = streamModelLoader;<br>        this.fileDescriptorModelLoader = fileDescriptorModelLoader;<br>        this.optionsApplier = optionsApplier;<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">调用了super</div><div class="line"></div><div class="line">* DrawableRequestBuilder</div></pre></td></tr></table></figure></modeltype,></modeltype,></modeltype></p>
<p>public class DrawableRequestBuilder<modeltype><br>        extends GenericRequestBuilder<modeltype, imagevideowrapper,="" gifbitmapwrapper,="" glidedrawable=""><br>        implements BitmapOptions, DrawableOptions {</modeltype,></modeltype></p>
<pre><code>DrawableRequestBuilder(Context context, Class&lt;ModelType&gt; modelClass,
        LoadProvider&lt;ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable&gt; loadProvider, Glide glide,
        RequestTracker requestTracker, Lifecycle lifecycle) {
    super(context, modelClass, loadProvider, GlideDrawable.class, glide, requestTracker, lifecycle);
    // Default to animating.
    crossFade();
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">调用了crossFade设置淡入淡出效果</div></pre></td></tr></table></figure>
<p>  public final DrawableRequestBuilder<modeltype> crossFade() {<br>        super.animate(new DrawableCrossFadeFactory<glidedrawable>());<br>        return this;<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">*DrawableCrossFadeFactory  默认淡入淡出效果时间</div></pre></td></tr></table></figure></glidedrawable></modeltype></p>
<p>public class DrawableCrossFadeFactory<t extends="" drawable=""> implements GlideAnimationFactory<t> {<br>    private static final int DEFAULT_DURATION_MS = 300;<br>```</t></t></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide-源码浅析&quot;&gt;&lt;a href=&quot;#Glide-源码浅析&quot; class=&quot;headerlink&quot; title=&quot;Glide 源码浅析&quot;&gt;&lt;/a&gt;Glide 源码浅析&lt;/h2&gt;&lt;h3 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerli
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="源码" scheme="https://ln0491.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Glide — 用Modules定制Glide</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide-%E2%80%94-%E7%94%A8Modules%E5%AE%9A%E5%88%B6Glide/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide-—-用Modules定制Glide/</id>
    <published>2016-10-19T06:19:56.000Z</published>
    <updated>2016-10-19T06:20:24.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide-—-用Modules定制Glide"><a href="#Glide-—-用Modules定制Glide" class="headerlink" title="Glide — 用Modules定制Glide"></a>Glide — 用Modules定制Glide</h2><h3 id="Glide-Modules"><a href="#Glide-Modules" class="headerlink" title="Glide Modules"></a>Glide Modules</h3><p>Glide modules是一个全局改变Glide行为的抽象的方式。你需要创建Glide的实例，来访问GlideBuilder。可以通过创建一个公共的类，实现GlideModule的接口来定制Glide<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class SimpleGlideModule implements GlideModule &#123;</div><div class="line">    @Override public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">        // todo</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override public void registerComponents(Context context, Glide glide) &#123;</div><div class="line">        // todo</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口提供了两个方法去调节Glide的不同部分，大部分内容只研究第一个方法：applyOptions(Context context, GlideBuilder builder)</p>
<p>需要创建一个额外的类去自定义Glide。下一步是要在全局中声明这个类，这样Glide知道它应该加载并使用它。Glide会扫描AndroidManifest.xml的Glide modules的meta定义。这样，你必须在AndroidManifest.xml里的<application>标签下声明刚创建的Glide module。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;manifest</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    &lt;application&gt;</div><div class="line"></div><div class="line">        &lt;meta-data</div><div class="line">            android:name=&quot;io.futurestud.tutorials.glide.glidemodule.SimpleGlideModule&quot;</div><div class="line">            android:value=&quot;GlideModule&quot; /&gt;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">    &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></application></p>
<p>确保你设置android:name为你自己的包名+类名，这样才能正确引用。你不需要添加其他的代码到其中。如果你想要禁止Glide Module，只要从AndroidManifest.xml里移除它。Java类里的代码可以留着供以后使用。当在AndroidManifest.xml里没有引用的时候，它永远不会被加载。</p>
<p>Glide推荐实现自定义module的方式有一个好处：你可以一次同时声明多个Glide Module。Glide会（没有特殊的顺序）都遍历所有声明的module。由于你当前未定义顺序，确保你的定制不会造成冲突！</p>
<h3 id="GlideBuilder"><a href="#GlideBuilder" class="headerlink" title="GlideBuilder"></a>GlideBuilder</h3><p>接口的第一个方法：applyOptions(Context context, GlideBuilder builder)。这个方法将GlideBuilder的对象当作参数，并且是void返回类型，所以你在这个方法里能调用GlideBuilder可以用的方法。</p>
<ul>
<li>.setMemoryCache(MemoryCache memoryCache)</li>
<li>.setBitmapPool(BitmapPool bitmapPool)</li>
<li>.setDiskCache(DiskCache.Factory diskCacheFactory)</li>
<li>.setDiskCacheService(ExecutorService service)</li>
<li>.setResizeService(ExecutorService service)</li>
<li>.setDecodeFormat(DecodeFormat decodeFormat)</li>
</ul>
<p>Android里有两个方法去解析图片：ARGB8888和RGB565。第一个为每个像素采用4 byte表示，后面一个则用2 byte表示。ARG8888有更高的图片质量，并且能够存储一个alpha通道。当Picasso使用ARGB888时，Glide默认使用低质量的RGB565。Glide用户的好消息：你可以通过使用Glide module方法改变解析格式。</p>
<p>你只要简单地实现一个GlideModule，像之前提到的一样，然后调用builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888)，并传入正确的枚举型参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class SimpleGlideModule implements GlideModule &#123;</div><div class="line">    @Override public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">        builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override public void registerComponents(Context context, Glide glide) &#123;</div><div class="line">        // nothing to do here</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide-—-用Modules定制Glide&quot;&gt;&lt;a href=&quot;#Glide-—-用Modules定制Glide&quot; class=&quot;headerlink&quot; title=&quot;Glide — 用Modules定制Glide&quot;&gt;&lt;/a&gt;Glide — 用Modules定
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程十一变换</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8D%81%E4%B8%80%E5%8F%98%E6%8D%A2/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide入门教程十一变换/</id>
    <published>2016-10-19T06:09:18.000Z</published>
    <updated>2016-10-19T06:09:51.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程十一变换"><a href="#Glide入门教程十一变换" class="headerlink" title="Glide入门教程十一变换"></a>Glide入门教程十一变换</h2><p>在图片显示出之前可以对图片进行变换处理。例如，如果你的app需要显示一张灰度图，但只能获取到一个原始全色彩的版本，你可以使用一个变换去将图片从有明艳色彩的版本转换成惨淡的黑白版</p>
<p>推荐一个库Glide变换<br><a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="external">https://github.com/wasabeef/glide-transformations</a><br>里面有很实现的效果</p>
<ul>
<li>引入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//glide 变换</div><div class="line">    compile &apos;jp.wasabeef:glide-transformations:2.0.1&apos;</div><div class="line">    // If you want to use the GPU Filters   -glide 变换使用GPU</div><div class="line">    compile &apos;jp.co.cyberagent.android.gpuimage:gpuimage-library:1.3.0&apos;</div></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String trUrl = &quot;http://pic.58pic.com/58pic/16/83/91/40558PICYDj_1024.jpg&quot;;</div><div class="line"></div><div class="line"></div><div class="line">      Glide.with(this)</div><div class="line">              .load(trUrl)</div><div class="line">              .bitmapTransform(new CropCircleTransformation(this))</div><div class="line">              .into(mIvEc2);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">      Glide.with(this)</div><div class="line">              .load(trUrl)</div><div class="line">              .bitmapTransform(new BlurTransformation(this))</div><div class="line">              .into(mIvEc3);</div></pre></td></tr></table></figure>
<p>提示：当你使用变换的时候，你不能使用.centerCrop()或者.fitCenter()</p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程十一变换&quot;&gt;&lt;a href=&quot;#Glide入门教程十一变换&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程十一变换&quot;&gt;&lt;/a&gt;Glide入门教程十一变换&lt;/h2&gt;&lt;p&gt;在图片显示出之前可以对图片进行变换处理。例如，如果你
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程十-异常: 调试和报错处理</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%8D%81-%E5%BC%82%E5%B8%B8-%E8%B0%83%E8%AF%95%E5%92%8C%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide入门教程十-异常-调试和报错处理/</id>
    <published>2016-10-19T06:08:12.000Z</published>
    <updated>2016-10-19T06:08:54.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程十-异常-调试和报错处理"><a href="#Glide入门教程十-异常-调试和报错处理" class="headerlink" title="Glide入门教程十-异常: 调试和报错处理"></a>Glide入门教程十-异常: 调试和报错处理</h2><ul>
<li>本地调试</li>
</ul>
<p>Glide的常规请求里提供了一个方法设置Log的层级。不幸地是，你没法轻易在产品使用中轻易获取。但，也有一个很简单的方法获得Glide的调试log。你只要通过adb shell，打开terminal，然后使用下面的命令行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell setprop log.tag.GenericRequest DEBUG</div></pre></td></tr></table></figure>
<p>最后一部分DEBUG来自标准Android的log常量。因此，作为参数的递增优先级的选项如下：</p>
<pre><code>* VERBOSE
* DEBUG
* INFO
* WARN
* ERROR
</code></pre><p>当图片不存在时，会输出下面的日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">io.futurestud.tutorials.glide D/GenericRequest: load failed</div><div class="line">io.futurestud.tutorials.glide D/GenericRequest: java.io.IOException: Request failed 404: Not Found</div><div class="line">...</div></pre></td></tr></table></figure></p>
<ul>
<li>基本的异常日志</li>
</ul>
<p>Glide不提供直接获取常规请求的日志，但是你可以在请求出错时抓取异常的日志。例如，如果图片不存在，Glide会（静静地）抛出一个异常，并显示出你.erroer()里指定的图片。如果你明确想要知道异常，创建一个listener,然后传递给Glide的.listener()方法。</p>
<ul>
<li><p>监听器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">String testUrl =&quot;http://photo.enterdesk.com/2009-4-21/2009012416095313783333.png&quot;;</div><div class="line"></div><div class="line">       RequestListener&lt;String,GlideDrawable&gt; listener = new RequestListener&lt;String, GlideDrawable&gt;() &#123;</div><div class="line">           @Override</div><div class="line">           public boolean onException(Exception e, String model, Target&lt;GlideDrawable&gt; target, boolean isFirstResource) &#123;</div><div class="line"></div><div class="line"></div><div class="line">               e.printStackTrace();</div><div class="line">               Log.d(&quot;vivi&quot;, &quot;onException: &quot;+e.getMessage());</div><div class="line"></div><div class="line"></div><div class="line">               /**</div><div class="line">                * false 时error中的才会显示</div><div class="line">                * true 时error中的就不显示</div><div class="line">                */</div><div class="line">               return false;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           @Override</div><div class="line">           public boolean onResourceReady(GlideDrawable resource, String model, Target&lt;GlideDrawable&gt; target, boolean isFromMemoryCache, boolean isFirstResource) &#123;</div><div class="line">               return false;</div><div class="line">           &#125;</div><div class="line">       &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>加载<br>你可以在Glide中的构造方法里设置listener:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">              .load(testUrl)</div><div class="line">              .listener(listener)</div><div class="line">              .error(R.mipmap.pictures_no)</div><div class="line">              .into(mIvEc1);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在onException方法中，你可以抓取问题，并决定你需要做什么，比如记录日志。如果Glide应当处理这个后果，比如显示一个出错占位图，在onException方法中返回false是很重要的。</p>
<p>.error()是否设置不影响日志正常工作。但只有在listener的onException方法里返回false，R.mipmap.pictures_no才会显示出来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程十-异常-调试和报错处理&quot;&gt;&lt;a href=&quot;#Glide入门教程十-异常-调试和报错处理&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程十-异常: 调试和报错处理&quot;&gt;&lt;/a&gt;Glide入门教程十-异常: 调试和报错处理
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程九-通知栏图片加载</title>
    <link href="https://ln0491.github.io/2016/10/19/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%B9%9D-%E9%80%9A%E7%9F%A5%E6%A0%8F%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    <id>https://ln0491.github.io/2016/10/19/Glide入门教程九-通知栏图片加载/</id>
    <published>2016-10-19T03:25:31.000Z</published>
    <updated>2016-10-19T06:08:36.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程九-通知栏图片加载"><a href="#Glide入门教程九-通知栏图片加载" class="headerlink" title="Glide入门教程九-通知栏图片加载"></a>Glide入门教程九-通知栏图片加载</h2><p>系统通知的图标为用户传递了重要的内容。用NotificationCompat.Builder为通知图片传递一个图片是最直接方式，但是这个图片必须是<b>Bitmap</b>格式的。如果这个图片已经在手机上，那没问题。但，如果这个图片还不在手机上，需要从网络下载，想要用这个标准的工具是不现实的。</p>
<ul>
<li>自定义的通知布局</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:background=&quot;@android:color/white&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:padding=&quot;2dp&quot;&gt;</div><div class="line"></div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/remoteview_notification_icon&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_marginRight=&quot;2dp&quot;</div><div class="line">            android:layout_weight=&quot;0&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id=&quot;@+id/remoteview_notification_headline&quot;</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;wrap_content&quot;</div><div class="line">                android:ellipsize=&quot;end&quot;</div><div class="line">                android:singleLine=&quot;true&quot;</div><div class="line">                android:textSize=&quot;12sp&quot;/&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id=&quot;@+id/remoteview_notification_short_message&quot;</div><div class="line">                android:layout_width=&quot;match_parent&quot;</div><div class="line">                android:layout_height=&quot;wrap_content&quot;</div><div class="line">                android:ellipsize=&quot;end&quot;</div><div class="line">                android:paddingBottom=&quot;2dp&quot;</div><div class="line">                android:singleLine=&quot;true&quot;</div><div class="line">                android:textSize=&quot;14sp&quot;</div><div class="line">                android:textStyle=&quot;bold&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">//创建通知布局</div><div class="line">       RemoteViews remoteViews = new RemoteViews(getPackageName(),R.layout.remoteview_notification);</div><div class="line"></div><div class="line"></div><div class="line">       remoteViews.setImageViewResource(R.id.remoteview_notification_icon,R.mipmap.ic_launcher);</div><div class="line"></div><div class="line">       remoteViews.setTextViewText(R.id.remoteview_notification_headline,&quot;头部分标题&quot;);</div><div class="line">       remoteViews.setTextViewText(R.id.remoteview_notification_short_message,&quot;二级标题内容&quot;);</div><div class="line"></div><div class="line"></div><div class="line">       NotificationCompat.Builder builder =</div><div class="line">               new NotificationCompat.Builder(getApplicationContext())</div><div class="line">                                  .setSmallIcon(R.mipmap.ic_launcher)</div><div class="line">                                   .setTicker(&quot;ticker&quot;)</div><div class="line">                                   .setContentText(&quot;contenttext&quot;)</div><div class="line">                                   .setContentTitle(&quot;contenttitle&quot;)</div><div class="line">                                   .setContent(remoteViews)</div><div class="line">                                   .setPriority(NotificationCompat.PRIORITY_HIGH);</div><div class="line"></div><div class="line">       Notification notification = builder.build();</div><div class="line"></div><div class="line">       if(Build.VERSION.SDK_INT&gt;16)&#123;</div><div class="line">           notification.bigContentView = remoteViews;</div><div class="line">       &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">       NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"></div><div class="line">       notificationManager.notify(NOTIFICATION_ID,notification);</div><div class="line">       //这个类是Glide自带的</div><div class="line">       NotificationTarget notificationTarget =</div><div class="line">               new NotificationTarget(getApplicationContext(),remoteViews,R.id.remoteview_notification_icon,notification,NOTIFICATION_ID);</div><div class="line"></div><div class="line"></div><div class="line">       String notUrl = &quot;http://photo.enterdesk.com/2009-4-21/200901241609531378.png&quot;;</div><div class="line">       Glide.with(getApplicationContext())</div><div class="line">               .load(notUrl)</div><div class="line">               .asBitmap()</div><div class="line">               .into(notificationTarget);</div></pre></td></tr></table></figure>
<p>只要图片被加载了，我们定制的通知栏就会显示</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程九-通知栏图片加载&quot;&gt;&lt;a href=&quot;#Glide入门教程九-通知栏图片加载&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程九-通知栏图片加载&quot;&gt;&lt;/a&gt;Glide入门教程九-通知栏图片加载&lt;/h2&gt;&lt;p&gt;系统通知的图
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget</title>
    <link href="https://ln0491.github.io/2016/10/18/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%85%AB-%E5%9B%9E%E8%B0%83%EF%BC%9A%E5%AE%9A%E5%88%B6view%E4%B8%AD%E4%BD%BF%E7%94%A8SimpleTarget%E5%92%8CViewTarget/"/>
    <id>https://ln0491.github.io/2016/10/18/Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget/</id>
    <published>2016-10-18T11:33:22.000Z</published>
    <updated>2016-10-18T11:39:23.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget"><a href="#Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget" class="headerlink" title="Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget"></a>Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget</h2><ul>
<li>Glide中的回调：Target</li>
</ul>
<p>假设我们并没有ImageView作为图片加载的目标。我们只需要Bitmap本身。Glide提供了一个用Target获取Bitmap资源的方法。Target只是用来回调，它会在所有的加载和处理完毕时返回想要的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">String url1 = &quot;http://img4.imgtn.bdimg.com/it/u=21385237,1665284751&amp;fm=21&amp;gp=0.jpg&quot;;</div><div class="line"></div><div class="line">     /**</div><div class="line">      * 代码的第一部分，创建一个target字段对象，里面定义了个方法，</div><div class="line">      * 这个方法一旦Glide加载和处理完图片将会被调用。</div><div class="line">      * 回调方法传回Bitmap作为参数，你可以在你所需要用的地方随意使用这个Bitmap对象。</div><div class="line">      */</div><div class="line">     SimpleTarget&lt;Bitmap&gt; target = new SimpleTarget&lt;Bitmap&gt;() &#123;</div><div class="line">         @Override</div><div class="line">         public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;</div><div class="line"></div><div class="line">             //设置图片显示</div><div class="line">             mIvt1.setImageBitmap(resource);</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"></div><div class="line">     Glide.with(this).load(url1)</div><div class="line">             .asBitmap() //作为bitmap显示</div><div class="line">             .into(target); //显示在这个对象</div></pre></td></tr></table></figure>
<p>代码的第二部分，表明了Glide里如何使用Target，明显跟ImageView一样！<br>你可以传递一个Target或者ImageView作为参数到.into()方法里。<br>Glide会神奇地将结果返回。这里有个不同点，我们添加了.asBitmap()，<br>这会强制返回一个Bitmap对象。<br>记住，Glide也可以加载Gif或视频。为了防止在从网络URL（可能是GIF）获取Bitmap时，<br>出现未知格式图片冲突（期望是Bitmap），<br>我们设置.asBitmap()去告诉Glide只有在资源是一个图片是才算成功，其他的都算解析失败。</p>
<ul>
<li>特定大小的Target</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">       *  通过构造方法设置图片大小</div><div class="line">       */</div><div class="line">      SimpleTarget&lt;Bitmap&gt; target2 = new SimpleTarget&lt;Bitmap&gt;(300,300) &#123;</div><div class="line">          @Override</div><div class="line">          public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123;</div><div class="line">              //设置图片显示</div><div class="line">              mIvt2.setImageBitmap(resource);</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      Glide.with(this).load(url2)</div><div class="line">              .asBitmap() //作为bitmap显示</div><div class="line">              .into(target2); //显示在这个对象</div></pre></td></tr></table></figure>
<p>和“普通”target唯一不同的是这个以像素为单位的图片大小声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new SimpleTarget&lt;Bitmap&gt;(300,300)</div></pre></td></tr></table></figure></p>
<ul>
<li>ViewTarget</li>
</ul>
<p>有很多原因导致我们不能直接使用ImageView,由于没有已知的方法在哪里设置图片，Glide并不支持加载图片到定制的View内。然而用ViewTarget会让这个更简单。<br>假设你有个自定义的View<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class FutureStudioView extends FrameLayout &#123;</div><div class="line">    ImageView iv;</div><div class="line">    TextView tv;</div><div class="line"></div><div class="line">    public void initialize(Context context) &#123;</div><div class="line">        inflate( context, R.layout.custom_view_futurestudio, this );</div><div class="line"></div><div class="line">        iv = (ImageView) findViewById( R.id.custom_view_image );</div><div class="line">        tv = (TextView) findViewById( R.id.custom_view_text );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public FutureStudioView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super( context, attrs );</div><div class="line">        initialize( context );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public FutureStudioView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super( context, attrs, defStyleAttr );</div><div class="line">        initialize( context );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setImage(Drawable drawable) &#123;</div><div class="line">        iv = (ImageView) findViewById( R.id.custom_view_image );</div><div class="line"></div><div class="line">        iv.setImageDrawable( drawable );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于我们定制的view并不是继承自ImageView，这里不能使用常规的.into()方法。因此，我们只能创建一个ViewTarget，用来传递给.into()方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void loadImageViewTarget() &#123;</div><div class="line"> String targetUrl = &quot;http://photo.enterdesk.com/2009-4-21/200901241609531378.png&quot;;</div><div class="line">    FutureStudioView customView = (FutureStudioView) findViewById( R.id.custom_view );</div><div class="line"></div><div class="line">    viewTarget = new ViewTarget&lt;FutureStudioView, GlideDrawable&gt;( customView ) &#123;</div><div class="line">        @Override</div><div class="line">        public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; glideAnimation) &#123;</div><div class="line">            this.view.setImage( resource.getCurrent() );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    Glide.with(this)</div><div class="line">                   .load(targetUrl)</div><div class="line">                   .centerCrop()</div><div class="line">                   .override(300,300)</div><div class="line">                   //显示自定义控件中</div><div class="line">                   .into(viewTarget);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在target的回调方法中，我们在定制view上使用我们创建的setImage(Drawable drawable)方法设置图片。同时，确保你注意到我们已经在ViewTarget的构造方法里传递了我们的定制view:new ViewTarget<futurestudioview, glidedrawable="">( customView )。</futurestudioview,></p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget&quot;&gt;&lt;a href=&quot;#Glide入门教程八-回调：定制view中使用SimpleTarget和ViewTarget&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程七-图片请求优先级</title>
    <link href="https://ln0491.github.io/2016/10/17/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E4%B8%83-%E5%9B%BE%E7%89%87%E8%AF%B7%E6%B1%82%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://ln0491.github.io/2016/10/17/Glide入门教程七-图片请求优先级/</id>
    <published>2016-10-17T08:16:33.000Z</published>
    <updated>2016-10-18T11:39:16.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程七-图片请求优先级"><a href="#Glide入门教程七-图片请求优先级" class="headerlink" title="Glide入门教程七-图片请求优先级"></a>Glide入门教程七-图片请求优先级</h2><p>.priority()方法参数的Priority的枚举变量<br>一共有四个不同的枚举变量。下面以递增方式列出：</p>
<pre><code>* Priority.LOW
* Priority.NORMAL
* Priority.HIGH
* Priority.IMMEDIATE
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">               .load(url10)</div><div class="line">               .placeholder(R.mipmap.pictures_no)</div><div class="line">               .override(300,300)</div><div class="line">               .skipMemoryCache(true)   //跳过内存缓存，不在内存中保存图片</div><div class="line">               .diskCacheStrategy(DiskCacheStrategy.ALL)</div><div class="line">               .priority(Priority.HIGH)   //添加高优先级</div><div class="line">               .into(mIv10);</div></pre></td></tr></table></figure>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程七-图片请求优先级&quot;&gt;&lt;a href=&quot;#Glide入门教程七-图片请求优先级&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程七-图片请求优先级&quot;&gt;&lt;/a&gt;Glide入门教程七-图片请求优先级&lt;/h2&gt;&lt;p&gt;.prior
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Glide入门教程六-缓存基础</title>
    <link href="https://ln0491.github.io/2016/10/17/Glide%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%85%AD-%E7%BC%93%E5%AD%98%E5%9F%BA%E7%A1%80/"/>
    <id>https://ln0491.github.io/2016/10/17/Glide入门教程六-缓存基础/</id>
    <published>2016-10-17T08:15:44.000Z</published>
    <updated>2016-10-18T11:39:12.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide入门教程六-缓存基础"><a href="#Glide入门教程六-缓存基础" class="headerlink" title="Glide入门教程六-缓存基础"></a>Glide入门教程六-缓存基础</h2><p>Glide默认使用内存和磁盘缓存来避免不必要的网络请求,所有的图片请求都会被缓存在内存和磁盘上.</p>
<ul>
<li>内存缓存<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">               .load(url10)</div><div class="line">               .placeholder(R.mipmap.pictures_no)</div><div class="line">               .skipMemoryCache(true)   //跳过内存缓存，不在内存中保存图片</div><div class="line">               .into(mIv10);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>调用了.skipMemoryCache( true )去特意告诉Glide跳过内存缓存。这意味着Glide不会把这个图片缓存到内存里。重要是，这个只影响内存缓存！Glide为了避免以后的网络请求，仍然会缓存到磁盘。<br>由于Glide默认会将所有的图片资源缓存到内存中，因此，没有必要手动调用.skipMemoryCache( false )了</p>
<ul>
<li>跳过磁盘缓存</li>
</ul>
<p>即使你关闭了内存缓存，所请求的图片仍然会被保存在设备的磁盘存储上。如果你有一张不段变化的图片，但是都是用的同一个URL，你可能需要禁止磁盘缓存了。<br>可以用.diskCacheStrategy()方法改变Glide的行为。不同于.skipMemoryCache()方法，它将需要从枚举型变量中选择一个，而不是一个简单的boolean。如果你想要禁止请求的磁盘缓存，使用枚举型变量DiskCacheStrategy.NONE作为参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Glide.with(this)</div><div class="line">               .load(url10)</div><div class="line">               .placeholder(R.mipmap.pictures_no)</div><div class="line"></div><div class="line">               .skipMemoryCache(true)   //跳过内存缓存，不在内存中保存图片</div><div class="line">               .diskCacheStrategy(DiskCacheStrategy.NONE)  //跳这磁盘缓存</div><div class="line">               .into(mIv10);</div></pre></td></tr></table></figure>
<ul>
<li><p>DiskCacheStrategy</p>
<ul>
<li>DiskCacheStrategy.NONE 不在磁盘下保存图片没有磁盘缓存</li>
<li>DiskCacheStrategy.SOURCE 只缓存全尺寸图，原图是多大就保存多大</li>
<li>DiskCacheStrategy.RESULT 只缓存最终降低分辨后用到的图片   例:  .override(300,300),300*300像素</li>
<li>DiskCacheStrategy.ALL 缓存所有类型的图片 (默认行为)</li>
</ul>
</li>
</ul>
<p>官方wiki<a href="https://github.com/bumptech/glide/wiki/Caching-and-Cache-Invalidation" target="_blank" rel="external">https://github.com/bumptech/glide/wiki/Caching-and-Cache-Invalidation</a></p>
<p>源码<br><a href="https://github.com/ln0491/GlideDemo" target="_blank" rel="external">https://github.com/ln0491/GlideDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide入门教程六-缓存基础&quot;&gt;&lt;a href=&quot;#Glide入门教程六-缓存基础&quot; class=&quot;headerlink&quot; title=&quot;Glide入门教程六-缓存基础&quot;&gt;&lt;/a&gt;Glide入门教程六-缓存基础&lt;/h2&gt;&lt;p&gt;Glide默认使用内存和磁盘缓存来避
    
    </summary>
    
      <category term="android" scheme="https://ln0491.github.io/categories/android/"/>
    
    
      <category term="图片加载" scheme="https://ln0491.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
</feed>
